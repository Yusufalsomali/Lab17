
c:/Users/USER/Desktop/Lab17/target/2.1.0/photon/Lab17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003a54  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3a70  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a3a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000558  20000074  20000074  00030074  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3ae8  080a3ae8  00023ae8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3b10  080a3b10  00023b10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0015a62a  00000000  00000000  00023b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017700  00000000  00000000  0017e13e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fb66  00000000  00000000  0019583e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022f0  00000000  00000000  001b53a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050f8  00000000  00000000  001b7694  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ce4b  00000000  00000000  001bc78c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000360af  00000000  00000000  001e95d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1dbf  00000000  00000000  0021f686  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005ce4  00000000  00000000  002d1448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fb27 	bl	80a2680 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fb2f 	bl	80a269c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3a74 	.word	0x080a3a74
 80a004c:	20000074 	.word	0x20000074
 80a0050:	20000074 	.word	0x20000074
 80a0054:	200005cc 	.word	0x200005cc
 80a0058:	200005cc 	.word	0x200005cc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 ff1d 	bl	80a1e9c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a3a48 	.word	0x080a3a48
 80a0080:	080a3a68 	.word	0x080a3a68

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b826 	b.w	80a00d4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f87f 	bl	80a018c <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bec5 	b.w	80a1e20 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f001 bcd9 	b.w	80a1a4c <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f001 bcdf 	b.w	80a1a5c <free>
	...

080a00a0 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a0:	2100      	movs	r1, #0
 80a00a2:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a6:	4a02      	ldr	r2, [pc, #8]	; (80a00b0 <__cxa_pure_virtual+0x10>)
 80a00a8:	f001 fc34 	bl	80a1914 <panic_>
  while (1);
 80a00ac:	e7fe      	b.n	80a00ac <__cxa_pure_virtual+0xc>
 80a00ae:	bf00      	nop
 80a00b0:	080a1681 	.word	0x080a1681

080a00b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b4:	7800      	ldrb	r0, [r0, #0]
 80a00b6:	fab0 f080 	clz	r0, r0
 80a00ba:	0940      	lsrs	r0, r0, #5
 80a00bc:	4770      	bx	lr

080a00be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00be:	2301      	movs	r3, #1
 80a00c0:	7003      	strb	r3, [r0, #0]
 80a00c2:	4770      	bx	lr

080a00c4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00c4:	b510      	push	{r4, lr}
 80a00c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a00c8:	6800      	ldr	r0, [r0, #0]
 80a00ca:	b108      	cbz	r0, 80a00d0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a00cc:	f001 fcc6 	bl	80a1a5c <free>
class SystemClass {
 80a00d0:	4620      	mov	r0, r4
 80a00d2:	bd10      	pop	{r4, pc}

080a00d4 <setup>:





void setup() {
 80a00d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
  display.setup();
 80a00d6:	4c14      	ldr	r4, [pc, #80]	; (80a0128 <setup+0x54>)
  Serial.begin(9600);
 80a00d8:	f001 ffe0 	bl	80a209c <_Z16_fetch_usbserialv>
 80a00dc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00e0:	f001 ffc2 	bl	80a2068 <_ZN9USBSerial5beginEl>
  display.setup();
 80a00e4:	4620      	mov	r0, r4
 80a00e6:	f000 fd61 	bl	80a0bac <_ZN16OledWingAdafruit5setupEv>
	display.clearDisplay();
 80a00ea:	4620      	mov	r0, r4
 80a00ec:	f000 ff98 	bl	80a1020 <_ZN16Adafruit_SSD130612clearDisplayEv>
  	display.display();
 80a00f0:	4620      	mov	r0, r4
 80a00f2:	f001 fa03 	bl	80a14fc <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
 80a00f6:	4620      	mov	r0, r4
 80a00f8:	f000 ff92 	bl	80a1020 <_ZN16Adafruit_SSD130612clearDisplayEv>
 display.drawBitmap(10,0,bitmap_kykacd,100,30,WHITE);
 80a00fc:	231e      	movs	r3, #30
 80a00fe:	2201      	movs	r2, #1
 80a0100:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80a0104:	2364      	movs	r3, #100	; 0x64
 80a0106:	2200      	movs	r2, #0
 80a0108:	210a      	movs	r1, #10
 80a010a:	4620      	mov	r0, r4
 80a010c:	9300      	str	r3, [sp, #0]
 80a010e:	4b07      	ldr	r3, [pc, #28]	; (80a012c <setup+0x58>)
 80a0110:	f000 face 	bl	80a06b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
	display.display();
 80a0114:	4620      	mov	r0, r4
 80a0116:	f001 f9f1 	bl	80a14fc <_ZN16Adafruit_SSD13067displayEv>
 delay(5000);
 80a011a:	f241 3088 	movw	r0, #5000	; 0x1388
}
 80a011e:	b004      	add	sp, #16
 80a0120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 delay(5000);
 80a0124:	f001 be26 	b.w	80a1d74 <delay>
 80a0128:	20000084 	.word	0x20000084
 80a012c:	080a2a93 	.word	0x080a2a93

080a0130 <_GLOBAL__sub_I_SystemMode>:
   Choosegame = false;
   delay(100);
 }


}
 80a0130:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
 80a0132:	2500      	movs	r5, #0
 80a0134:	4c0f      	ldr	r4, [pc, #60]	; (80a0174 <_GLOBAL__sub_I_SystemMode+0x44>)
    SleepResult() {}
 80a0136:	4b10      	ldr	r3, [pc, #64]	; (80a0178 <_GLOBAL__sub_I_SystemMode+0x48>)
SYSTEM_MODE(MANUAL);
 80a0138:	4e10      	ldr	r6, [pc, #64]	; (80a017c <_GLOBAL__sub_I_SystemMode+0x4c>)
 80a013a:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
 80a013c:	6025      	str	r5, [r4, #0]
 80a013e:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
 80a0140:	71a5      	strb	r5, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0142:	2003      	movs	r0, #3
 80a0144:	f001 fbee 	bl	80a1924 <set_system_mode>
 80a0148:	4632      	mov	r2, r6
 80a014a:	4620      	mov	r0, r4
 80a014c:	490c      	ldr	r1, [pc, #48]	; (80a0180 <_GLOBAL__sub_I_SystemMode+0x50>)
OledWingAdafruit display;
 80a014e:	4c0d      	ldr	r4, [pc, #52]	; (80a0184 <_GLOBAL__sub_I_SystemMode+0x54>)
SYSTEM_MODE(MANUAL);
 80a0150:	f002 fa7e 	bl	80a2650 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 80a0154:	4629      	mov	r1, r5
 80a0156:	2001      	movs	r0, #1
 80a0158:	f001 fbf4 	bl	80a1944 <system_thread_set_state>
OledWingAdafruit display;
 80a015c:	2107      	movs	r1, #7
 80a015e:	4620      	mov	r0, r4
 80a0160:	f000 fcf6 	bl	80a0b50 <_ZN16OledWingAdafruitC1Ei>
 80a0164:	4632      	mov	r2, r6
 80a0166:	4620      	mov	r0, r4
}
 80a0168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
OledWingAdafruit display;
 80a016c:	4906      	ldr	r1, [pc, #24]	; (80a0188 <_GLOBAL__sub_I_SystemMode+0x58>)
 80a016e:	f002 ba6f 	b.w	80a2650 <__aeabi_atexit>
 80a0172:	bf00      	nop
 80a0174:	20000078 	.word	0x20000078
 80a0178:	ffff0000 	.word	0xffff0000
 80a017c:	20000074 	.word	0x20000074
 80a0180:	080a00c5 	.word	0x080a00c5
 80a0184:	20000084 	.word	0x20000084
 80a0188:	080a0b1d 	.word	0x080a0b1d

080a018c <loop>:
void loop() {
 80a018c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 display.loop();
 80a018e:	4c51      	ldr	r4, [pc, #324]	; (80a02d4 <loop+0x148>)
 if (Choosegame) 
 80a0190:	4e51      	ldr	r6, [pc, #324]	; (80a02d8 <loop+0x14c>)
 display.loop();
 80a0192:	4620      	mov	r0, r4
 80a0194:	f000 fd33 	bl	80a0bfe <_ZN16OledWingAdafruit4loopEv>
 if (Choosegame) 
 80a0198:	7832      	ldrb	r2, [r6, #0]
 80a019a:	b192      	cbz	r2, 80a01c2 <loop+0x36>
   display.clearDisplay();
 80a019c:	4620      	mov	r0, r4
 80a019e:	f000 ff3f 	bl	80a1020 <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.setTextSize(1);
 80a01a2:	2101      	movs	r1, #1
 80a01a4:	4620      	mov	r0, r4
 80a01a6:	f000 fcb2 	bl	80a0b0e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80a01aa:	2500      	movs	r5, #0
 80a01ac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    display.println("Choose Level A = Easy mode, B = Normal mode, C = Hard mode");
 80a01b0:	4620      	mov	r0, r4
 80a01b2:	e9c4 5304 	strd	r5, r3, [r4, #16]
 80a01b6:	4949      	ldr	r1, [pc, #292]	; (80a02dc <loop+0x150>)
 80a01b8:	f001 fd6b 	bl	80a1c92 <_ZN5Print7printlnEPKc>
    display.display();
 80a01bc:	4620      	mov	r0, r4
 80a01be:	f001 f99d 	bl	80a14fc <_ZN16Adafruit_SSD13067displayEv>
  if (display.pressedA())
 80a01c2:	4844      	ldr	r0, [pc, #272]	; (80a02d4 <loop+0x148>)
 80a01c4:	f000 fd34 	bl	80a0c30 <_ZN16OledWingAdafruit8pressedAEv>
 80a01c8:	b338      	cbz	r0, 80a021a <loop+0x8e>
  display.clearDisplay();
 80a01ca:	4842      	ldr	r0, [pc, #264]	; (80a02d4 <loop+0x148>)
 80a01cc:	f000 ff28 	bl	80a1020 <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.setTextSize(1);
 80a01d0:	2101      	movs	r1, #1
 80a01d2:	4840      	ldr	r0, [pc, #256]	; (80a02d4 <loop+0x148>)
 80a01d4:	f000 fc9b 	bl	80a0b0e <_ZN12Adafruit_GFX11setTextSizeEh>
 80a01d8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.drawPixel(x,y,WHITE);
 80a01dc:	4a40      	ldr	r2, [pc, #256]	; (80a02e0 <loop+0x154>)
 80a01de:	4941      	ldr	r1, [pc, #260]	; (80a02e4 <loop+0x158>)
 80a01e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80a01e4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80a01e8:	483a      	ldr	r0, [pc, #232]	; (80a02d4 <loop+0x148>)
 80a01ea:	6163      	str	r3, [r4, #20]
 80a01ec:	2301      	movs	r3, #1
 80a01ee:	f000 fdad 	bl	80a0d4c <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawBitmap(10,0,bitmap_y2b118,100,30,WHITE);
 80a01f2:	2564      	movs	r5, #100	; 0x64
 80a01f4:	231e      	movs	r3, #30
 80a01f6:	2001      	movs	r0, #1
 80a01f8:	2200      	movs	r2, #0
 80a01fa:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80a01fe:	210a      	movs	r1, #10
 80a0200:	4b39      	ldr	r3, [pc, #228]	; (80a02e8 <loop+0x15c>)
 80a0202:	4834      	ldr	r0, [pc, #208]	; (80a02d4 <loop+0x148>)
 80a0204:	9500      	str	r5, [sp, #0]
 80a0206:	f000 fa53 	bl	80a06b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
	display.display();
 80a020a:	4832      	ldr	r0, [pc, #200]	; (80a02d4 <loop+0x148>)
 80a020c:	f001 f976 	bl	80a14fc <_ZN16Adafruit_SSD13067displayEv>
  Choosegame = false;
 80a0210:	2300      	movs	r3, #0
  delay(100);
 80a0212:	4628      	mov	r0, r5
  Choosegame = false;
 80a0214:	7033      	strb	r3, [r6, #0]
  delay(100);
 80a0216:	f001 fdad 	bl	80a1d74 <delay>
 if (display.pressedB())
 80a021a:	482e      	ldr	r0, [pc, #184]	; (80a02d4 <loop+0x148>)
 80a021c:	f000 fd12 	bl	80a0c44 <_ZN16OledWingAdafruit8pressedBEv>
 80a0220:	b338      	cbz	r0, 80a0272 <loop+0xe6>
   display.clearDisplay();
 80a0222:	482c      	ldr	r0, [pc, #176]	; (80a02d4 <loop+0x148>)
 80a0224:	f000 fefc 	bl	80a1020 <_ZN16Adafruit_SSD130612clearDisplayEv>
 	display.setTextSize(1);
 80a0228:	2101      	movs	r1, #1
 80a022a:	482a      	ldr	r0, [pc, #168]	; (80a02d4 <loop+0x148>)
 80a022c:	f000 fc6f 	bl	80a0b0e <_ZN12Adafruit_GFX11setTextSizeEh>
 80a0230:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   display.drawPixel(x,y,WHITE);
 80a0234:	4a2a      	ldr	r2, [pc, #168]	; (80a02e0 <loop+0x154>)
 80a0236:	492b      	ldr	r1, [pc, #172]	; (80a02e4 <loop+0x158>)
 80a0238:	f9b2 2000 	ldrsh.w	r2, [r2]
 80a023c:	f9b1 1000 	ldrsh.w	r1, [r1]
 80a0240:	4824      	ldr	r0, [pc, #144]	; (80a02d4 <loop+0x148>)
 80a0242:	6163      	str	r3, [r4, #20]
 80a0244:	2301      	movs	r3, #1
 80a0246:	f000 fd81 	bl	80a0d4c <_ZN16Adafruit_SSD13069drawPixelEsst>
   display.drawBitmap(10,0,bitmap_1og4o,100,30,WHITE);
 80a024a:	2564      	movs	r5, #100	; 0x64
 80a024c:	231e      	movs	r3, #30
 80a024e:	2101      	movs	r1, #1
 80a0250:	2200      	movs	r2, #0
 80a0252:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80a0256:	481f      	ldr	r0, [pc, #124]	; (80a02d4 <loop+0x148>)
 80a0258:	4b24      	ldr	r3, [pc, #144]	; (80a02ec <loop+0x160>)
 80a025a:	210a      	movs	r1, #10
 80a025c:	9500      	str	r5, [sp, #0]
 80a025e:	f000 fa27 	bl	80a06b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
 	display.display();
 80a0262:	481c      	ldr	r0, [pc, #112]	; (80a02d4 <loop+0x148>)
 80a0264:	f001 f94a 	bl	80a14fc <_ZN16Adafruit_SSD13067displayEv>
   Choosegame = false;
 80a0268:	2300      	movs	r3, #0
   delay(100);
 80a026a:	4628      	mov	r0, r5
   Choosegame = false;
 80a026c:	7033      	strb	r3, [r6, #0]
   delay(100);
 80a026e:	f001 fd81 	bl	80a1d74 <delay>
 if (display.pressedC())
 80a0272:	4818      	ldr	r0, [pc, #96]	; (80a02d4 <loop+0x148>)
 80a0274:	f000 fcf0 	bl	80a0c58 <_ZN16OledWingAdafruit8pressedCEv>
 80a0278:	b350      	cbz	r0, 80a02d0 <loop+0x144>
   display.clearDisplay();
 80a027a:	4816      	ldr	r0, [pc, #88]	; (80a02d4 <loop+0x148>)
 80a027c:	f000 fed0 	bl	80a1020 <_ZN16Adafruit_SSD130612clearDisplayEv>
 	display.setTextSize(1);
 80a0280:	2101      	movs	r1, #1
 80a0282:	4814      	ldr	r0, [pc, #80]	; (80a02d4 <loop+0x148>)
 80a0284:	f000 fc43 	bl	80a0b0e <_ZN12Adafruit_GFX11setTextSizeEh>
 80a0288:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   display.drawPixel(x,y,WHITE);
 80a028c:	4a14      	ldr	r2, [pc, #80]	; (80a02e0 <loop+0x154>)
 80a028e:	4915      	ldr	r1, [pc, #84]	; (80a02e4 <loop+0x158>)
 80a0290:	6163      	str	r3, [r4, #20]
 80a0292:	f9b2 2000 	ldrsh.w	r2, [r2]
 80a0296:	2301      	movs	r3, #1
 80a0298:	f9b1 1000 	ldrsh.w	r1, [r1]
 80a029c:	480d      	ldr	r0, [pc, #52]	; (80a02d4 <loop+0x148>)
 80a029e:	f000 fd55 	bl	80a0d4c <_ZN16Adafruit_SSD13069drawPixelEsst>
   display.drawBitmap(10,0,bitmap_4bnjwe,100,30,WHITE);
 80a02a2:	2464      	movs	r4, #100	; 0x64
 80a02a4:	231e      	movs	r3, #30
 80a02a6:	2201      	movs	r2, #1
 80a02a8:	210a      	movs	r1, #10
 80a02aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80a02ae:	4809      	ldr	r0, [pc, #36]	; (80a02d4 <loop+0x148>)
 80a02b0:	2200      	movs	r2, #0
 80a02b2:	4b0f      	ldr	r3, [pc, #60]	; (80a02f0 <loop+0x164>)
 80a02b4:	9400      	str	r4, [sp, #0]
 80a02b6:	f000 f9fb 	bl	80a06b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
 	display.display();
 80a02ba:	4806      	ldr	r0, [pc, #24]	; (80a02d4 <loop+0x148>)
 80a02bc:	f001 f91e 	bl	80a14fc <_ZN16Adafruit_SSD13067displayEv>
   Choosegame = false;
 80a02c0:	2300      	movs	r3, #0
   delay(100);
 80a02c2:	4620      	mov	r0, r4
   Choosegame = false;
 80a02c4:	7033      	strb	r3, [r6, #0]
}
 80a02c6:	b004      	add	sp, #16
 80a02c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   delay(100);
 80a02cc:	f001 bd52 	b.w	80a1d74 <delay>
}
 80a02d0:	b004      	add	sp, #16
 80a02d2:	bd70      	pop	{r4, r5, r6, pc}
 80a02d4:	20000084 	.word	0x20000084
 80a02d8:	20000000 	.word	0x20000000
 80a02dc:	080a2718 	.word	0x080a2718
 80a02e0:	20000008 	.word	0x20000008
 80a02e4:	20000004 	.word	0x20000004
 80a02e8:	080a2c33 	.word	0x080a2c33
 80a02ec:	080a2753 	.word	0x080a2753
 80a02f0:	080a28f3 	.word	0x080a28f3

080a02f4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 80a02f4:	4770      	bx	lr

080a02f6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 80a02f6:	b510      	push	{r4, lr}
 80a02f8:	4604      	mov	r4, r0
  }
 80a02fa:	2110      	movs	r1, #16
 80a02fc:	f002 f9ad 	bl	80a265a <_ZdlPvj>
 80a0300:	4620      	mov	r0, r4
 80a0302:	bd10      	pop	{r4, pc}

080a0304 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a0304:	b510      	push	{r4, lr}
 80a0306:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0308:	6880      	ldr	r0, [r0, #8]
 80a030a:	b108      	cbz	r0, 80a0310 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a030c:	f001 f9e0 	bl	80a16d0 <os_mutex_recursive_destroy>
 80a0310:	4620      	mov	r0, r4
 80a0312:	bd10      	pop	{r4, pc}

080a0314 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0314:	b40e      	push	{r1, r2, r3}
 80a0316:	b503      	push	{r0, r1, lr}
 80a0318:	ab03      	add	r3, sp, #12
 80a031a:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80a031e:	2100      	movs	r1, #0
        va_start(args, format);
 80a0320:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a0322:	f001 fcdd 	bl	80a1ce0 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a0326:	b002      	add	sp, #8
 80a0328:	f85d eb04 	ldr.w	lr, [sp], #4
 80a032c:	b003      	add	sp, #12
 80a032e:	4770      	bx	lr

080a0330 <_ZNK8particle11SPISettings7printToER5Print>:
  virtual size_t printTo(Print& p) const
 80a0330:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0332:	4604      	mov	r4, r0
    if (default_ && clock_ == 0)
 80a0334:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 80a0336:	4608      	mov	r0, r1
 80a0338:	68a3      	ldr	r3, [r4, #8]
    if (default_ && clock_ == 0)
 80a033a:	b132      	cbz	r2, 80a034a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 80a033c:	b9a3      	cbnz	r3, 80a0368 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 80a033e:	490b      	ldr	r1, [pc, #44]	; (80a036c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
  }
 80a0340:	b002      	add	sp, #8
 80a0342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 80a0346:	f001 bc91 	b.w	80a1c6c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a034a:	4a09      	ldr	r2, [pc, #36]	; (80a0370 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 80a034c:	7b26      	ldrb	r6, [r4, #12]
 80a034e:	4d09      	ldr	r5, [pc, #36]	; (80a0374 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 80a0350:	4909      	ldr	r1, [pc, #36]	; (80a0378 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 80a0352:	7b64      	ldrb	r4, [r4, #13]
 80a0354:	2e01      	cmp	r6, #1
 80a0356:	bf18      	it	ne
 80a0358:	4629      	movne	r1, r5
 80a035a:	e9cd 1400 	strd	r1, r4, [sp]
 80a035e:	4907      	ldr	r1, [pc, #28]	; (80a037c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 80a0360:	f7ff ffd8 	bl	80a0314 <_ZN5Print6printfEPKcz>
  }
 80a0364:	b002      	add	sp, #8
 80a0366:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 80a0368:	4a05      	ldr	r2, [pc, #20]	; (80a0380 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 80a036a:	e7ef      	b.n	80a034c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 80a036c:	080a2de4 	.word	0x080a2de4
 80a0370:	080a2ddb 	.word	0x080a2ddb
 80a0374:	080a2de0 	.word	0x080a2de0
 80a0378:	080a2ddc 	.word	0x080a2ddc
 80a037c:	080a2dfa 	.word	0x080a2dfa
 80a0380:	080a2dd3 	.word	0x080a2dd3

080a0384 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0388:	461f      	mov	r7, r3
 80a038a:	b085      	sub	sp, #20
 80a038c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a0390:	eba7 0a01 	sub.w	sl, r7, r1
 80a0394:	eba8 0902 	sub.w	r9, r8, r2
 80a0398:	f1b9 0f00 	cmp.w	r9, #0
 80a039c:	bfb8      	it	lt
 80a039e:	f1c9 0900 	rsblt	r9, r9, #0
 80a03a2:	f1ba 0f00 	cmp.w	sl, #0
 80a03a6:	bfb8      	it	lt
 80a03a8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
 80a03ac:	45d1      	cmp	r9, sl
        uint16_t color) {
 80a03ae:	4683      	mov	fp, r0
 80a03b0:	460c      	mov	r4, r1
 80a03b2:	4616      	mov	r6, r2
 80a03b4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (steep) {
 80a03b8:	dd04      	ble.n	80a03c4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 80a03ba:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
 80a03bc:	4634      	mov	r4, r6
        _swap_int16_t(x1, y1);
 80a03be:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
 80a03c0:	460e      	mov	r6, r1
        _swap_int16_t(x1, y1);
 80a03c2:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
 80a03c4:	42bc      	cmp	r4, r7
 80a03c6:	dd05      	ble.n	80a03d4 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 80a03c8:	4632      	mov	r2, r6
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 80a03ca:	4646      	mov	r6, r8
 80a03cc:	4690      	mov	r8, r2
    if (x0 > x1) {
 80a03ce:	4622      	mov	r2, r4
 80a03d0:	463c      	mov	r4, r7
 80a03d2:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80a03d4:	1b3a      	subs	r2, r7, r4
 80a03d6:	b291      	uxth	r1, r2
 80a03d8:	9100      	str	r1, [sp, #0]
    dy = abs(y1 - y0);
 80a03da:	eba8 0106 	sub.w	r1, r8, r6
 80a03de:	2900      	cmp	r1, #0
 80a03e0:	bfb8      	it	lt
 80a03e2:	4249      	neglt	r1, r1

    int16_t err = dx / 2;
 80a03e4:	f3c2 35c0 	ubfx	r5, r2, #15, #1
    dy = abs(y1 - y0);
 80a03e8:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
 80a03ea:	b211      	sxth	r1, r2
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 80a03ec:	4546      	cmp	r6, r8
 80a03ee:	bfb4      	ite	lt
 80a03f0:	2201      	movlt	r2, #1
 80a03f2:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
 80a03f6:	440d      	add	r5, r1
 80a03f8:	106d      	asrs	r5, r5, #1
        ystep = -1;
 80a03fa:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 80a03fc:	42bc      	cmp	r4, r7
 80a03fe:	dc1c      	bgt.n	80a043a <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
 80a0400:	f8db 2000 	ldr.w	r2, [fp]
 80a0404:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
 80a0406:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80a040a:	bfc7      	ittee	gt
 80a040c:	4631      	movgt	r1, r6
 80a040e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
 80a0410:	4632      	movle	r2, r6
 80a0412:	4621      	movle	r1, r4
            writePixel(y0, x0, color);
 80a0414:	9303      	str	r3, [sp, #12]
            writePixel(x0, y0, color);
 80a0416:	4658      	mov	r0, fp
 80a0418:	47c0      	blx	r8
        }
        err -= dy;
 80a041a:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
 80a041c:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
 80a041e:	1aad      	subs	r5, r5, r2
 80a0420:	b2a9      	uxth	r1, r5
 80a0422:	b22d      	sxth	r5, r5
        if (err < 0) {
 80a0424:	2d00      	cmp	r5, #0
 80a0426:	da05      	bge.n	80a0434 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
 80a0428:	9a02      	ldr	r2, [sp, #8]
 80a042a:	4416      	add	r6, r2
            err += dx;
 80a042c:	9a00      	ldr	r2, [sp, #0]
            y0 += ystep;
 80a042e:	b236      	sxth	r6, r6
            err += dx;
 80a0430:	1855      	adds	r5, r2, r1
 80a0432:	b22d      	sxth	r5, r5
    for (; x0<=x1; x0++) {
 80a0434:	3401      	adds	r4, #1
 80a0436:	b224      	sxth	r4, r4
 80a0438:	e7e0      	b.n	80a03fc <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
 80a043a:	b005      	add	sp, #20
 80a043c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0440 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
 80a0440:	4770      	bx	lr

080a0442 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 80a0442:	b410      	push	{r4}
    drawPixel(x, y, color);
 80a0444:	6804      	ldr	r4, [r0, #0]
 80a0446:	6924      	ldr	r4, [r4, #16]
 80a0448:	46a4      	mov	ip, r4
}
 80a044a:	bc10      	pop	{r4}
    drawPixel(x, y, color);
 80a044c:	4760      	bx	ip

080a044e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a044e:	b430      	push	{r4, r5}
 80a0450:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 80a0454:	6804      	ldr	r4, [r0, #0]
 80a0456:	9502      	str	r5, [sp, #8]
 80a0458:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80a045a:	46a4      	mov	ip, r4
}
 80a045c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
 80a045e:	4760      	bx	ip

080a0460 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a0460:	b430      	push	{r4, r5}
 80a0462:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 80a0466:	6804      	ldr	r4, [r0, #0]
 80a0468:	9502      	str	r5, [sp, #8]
 80a046a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80a046c:	46a4      	mov	ip, r4
}
 80a046e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
 80a0470:	4760      	bx	ip

080a0472 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0472:	b470      	push	{r4, r5, r6}
 80a0474:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80a0478:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 80a047c:	6804      	ldr	r4, [r0, #0]
 80a047e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80a0482:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80a0484:	46a4      	mov	ip, r4
}
 80a0486:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
 80a0488:	4760      	bx	ip

080a048a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a048a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a048e:	461c      	mov	r4, r3
 80a0490:	4616      	mov	r6, r2
 80a0492:	4605      	mov	r5, r0
 80a0494:	460f      	mov	r7, r1
    startWrite();
 80a0496:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 80a0498:	3c01      	subs	r4, #1
        int16_t h, uint16_t color) {
 80a049a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 80a049e:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 80a04a0:	4434      	add	r4, r6
    startWrite();
 80a04a2:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 80a04a4:	b224      	sxth	r4, r4
 80a04a6:	682b      	ldr	r3, [r5, #0]
 80a04a8:	f8cd 8004 	str.w	r8, [sp, #4]
 80a04ac:	9400      	str	r4, [sp, #0]
 80a04ae:	4628      	mov	r0, r5
 80a04b0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80a04b2:	4632      	mov	r2, r6
 80a04b4:	463b      	mov	r3, r7
 80a04b6:	4639      	mov	r1, r7
 80a04b8:	47a0      	blx	r4
    endWrite();
 80a04ba:	4628      	mov	r0, r5
 80a04bc:	682b      	ldr	r3, [r5, #0]
 80a04be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a04c0:	b002      	add	sp, #8
 80a04c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 80a04c6:	4718      	bx	r3

080a04c8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a04c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a04cc:	4617      	mov	r7, r2
 80a04ce:	4604      	mov	r4, r0
 80a04d0:	461d      	mov	r5, r3
 80a04d2:	460e      	mov	r6, r1
    startWrite();
 80a04d4:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
 80a04d6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 80a04da:	695b      	ldr	r3, [r3, #20]
 80a04dc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 80a04de:	e9cd 7800 	strd	r7, r8, [sp]
 80a04e2:	6822      	ldr	r2, [r4, #0]
 80a04e4:	1e6b      	subs	r3, r5, #1
 80a04e6:	4433      	add	r3, r6
 80a04e8:	4620      	mov	r0, r4
 80a04ea:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80a04ec:	4631      	mov	r1, r6
 80a04ee:	463a      	mov	r2, r7
 80a04f0:	b21b      	sxth	r3, r3
 80a04f2:	47a8      	blx	r5
    endWrite();
 80a04f4:	4620      	mov	r0, r4
 80a04f6:	6823      	ldr	r3, [r4, #0]
 80a04f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a04fa:	b002      	add	sp, #8
 80a04fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 80a0500:	4718      	bx	r3

080a0502 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0502:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0506:	461e      	mov	r6, r3
    startWrite();
 80a0508:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 80a050a:	460c      	mov	r4, r1
    startWrite();
 80a050c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 80a050e:	4605      	mov	r5, r0
 80a0510:	4617      	mov	r7, r2
 80a0512:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0516:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    startWrite();
 80a051a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 80a051c:	4426      	add	r6, r4
 80a051e:	42b4      	cmp	r4, r6
 80a0520:	682b      	ldr	r3, [r5, #0]
 80a0522:	da0b      	bge.n	80a053c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 80a0524:	f8cd 9000 	str.w	r9, [sp]
 80a0528:	4621      	mov	r1, r4
 80a052a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a052e:	463a      	mov	r2, r7
 80a0530:	4643      	mov	r3, r8
 80a0532:	4628      	mov	r0, r5
 80a0534:	3401      	adds	r4, #1
 80a0536:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
 80a0538:	b224      	sxth	r4, r4
 80a053a:	e7f0      	b.n	80a051e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
 80a053c:	4628      	mov	r0, r5
 80a053e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0540:	b002      	add	sp, #8
 80a0542:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 80a0546:	4718      	bx	r3

080a0548 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 80a0548:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 80a054a:	9101      	str	r1, [sp, #4]
 80a054c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80a0550:	6802      	ldr	r2, [r0, #0]
 80a0552:	9100      	str	r1, [sp, #0]
 80a0554:	6c14      	ldr	r4, [r2, #64]	; 0x40
 80a0556:	2200      	movs	r2, #0
 80a0558:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a055c:	4611      	mov	r1, r2
 80a055e:	47a0      	blx	r4
}
 80a0560:	b002      	add	sp, #8
 80a0562:	bd10      	pop	{r4, pc}

080a0564 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0564:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0568:	4604      	mov	r4, r0
 80a056a:	460f      	mov	r7, r1
 80a056c:	4616      	mov	r6, r2
 80a056e:	461d      	mov	r5, r3
    startWrite();
 80a0570:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 80a0572:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 80a0576:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 80a0578:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 80a057c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 80a057e:	6823      	ldr	r3, [r4, #0]
 80a0580:	f8cd 8000 	str.w	r8, [sp]
 80a0584:	4632      	mov	r2, r6
 80a0586:	4639      	mov	r1, r7
 80a0588:	4620      	mov	r0, r4
 80a058a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a058e:	462b      	mov	r3, r5
 80a0590:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 80a0592:	6823      	ldr	r3, [r4, #0]
 80a0594:	f109 32ff 	add.w	r2, r9, #4294967295
 80a0598:	f8cd 8000 	str.w	r8, [sp]
 80a059c:	4432      	add	r2, r6
 80a059e:	4639      	mov	r1, r7
 80a05a0:	4620      	mov	r0, r4
 80a05a2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a05a6:	b212      	sxth	r2, r2
 80a05a8:	462b      	mov	r3, r5
 80a05aa:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 80a05ac:	6823      	ldr	r3, [r4, #0]
 80a05ae:	f8cd 8000 	str.w	r8, [sp]
 80a05b2:	4632      	mov	r2, r6
 80a05b4:	4639      	mov	r1, r7
 80a05b6:	4620      	mov	r0, r4
 80a05b8:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a05bc:	464b      	mov	r3, r9
 80a05be:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 80a05c0:	3d01      	subs	r5, #1
 80a05c2:	6823      	ldr	r3, [r4, #0]
 80a05c4:	19e9      	adds	r1, r5, r7
 80a05c6:	f8cd 8000 	str.w	r8, [sp]
 80a05ca:	4620      	mov	r0, r4
 80a05cc:	6a1d      	ldr	r5, [r3, #32]
 80a05ce:	4632      	mov	r2, r6
 80a05d0:	464b      	mov	r3, r9
 80a05d2:	b209      	sxth	r1, r1
 80a05d4:	47a8      	blx	r5
    endWrite();
 80a05d6:	4620      	mov	r0, r4
 80a05d8:	6823      	ldr	r3, [r4, #0]
 80a05da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a05dc:	b002      	add	sp, #8
 80a05de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 80a05e2:	4718      	bx	r3

080a05e4 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
 80a05e4:	4770      	bx	lr

080a05e6 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
 80a05e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
 80a05ea:	4299      	cmp	r1, r3
        uint16_t color) {
 80a05ec:	4616      	mov	r6, r2
 80a05ee:	4680      	mov	r8, r0
 80a05f0:	460d      	mov	r5, r1
 80a05f2:	461c      	mov	r4, r3
 80a05f4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80a05f8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 80a05fc:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
 80a05fe:	d112      	bne.n	80a0626 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80a0600:	42be      	cmp	r6, r7
 80a0602:	bfc2      	ittt	gt
 80a0604:	4633      	movgt	r3, r6
 80a0606:	463e      	movgt	r6, r7
 80a0608:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80a060a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a060e:	1c7b      	adds	r3, r7, #1
 80a0610:	6b94      	ldr	r4, [r2, #56]	; 0x38
 80a0612:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a0614:	4632      	mov	r2, r6
 80a0616:	4629      	mov	r1, r5
 80a0618:	4640      	mov	r0, r8
 80a061a:	46a4      	mov	ip, r4
 80a061c:	b21b      	sxth	r3, r3
}
 80a061e:	b003      	add	sp, #12
 80a0620:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a0624:	4760      	bx	ip
    } else if(y0 == y1){
 80a0626:	42be      	cmp	r6, r7
 80a0628:	d10a      	bne.n	80a0640 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80a062a:	4299      	cmp	r1, r3
 80a062c:	bfc2      	ittt	gt
 80a062e:	460b      	movgt	r3, r1
 80a0630:	4625      	movgt	r5, r4
 80a0632:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a0634:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a0638:	1c63      	adds	r3, r4, #1
 80a063a:	1b5b      	subs	r3, r3, r5
 80a063c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a063e:	e7e9      	b.n	80a0614 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
        startWrite();
 80a0640:	6953      	ldr	r3, [r2, #20]
 80a0642:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 80a0644:	e9cd 7900 	strd	r7, r9, [sp]
 80a0648:	f8d8 3000 	ldr.w	r3, [r8]
 80a064c:	4640      	mov	r0, r8
 80a064e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a0650:	4632      	mov	r2, r6
 80a0652:	4623      	mov	r3, r4
 80a0654:	4629      	mov	r1, r5
 80a0656:	47b8      	blx	r7
        endWrite();
 80a0658:	4640      	mov	r0, r8
 80a065a:	f8d8 3000 	ldr.w	r3, [r8]
 80a065e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0660:	b003      	add	sp, #12
 80a0662:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 80a0666:	4718      	bx	r3

080a0668 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
 80a0668:	f001 0303 	and.w	r3, r1, #3
 80a066c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80a0670:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
 80a0672:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80a0676:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
 80a0678:	bf59      	ittee	pl
 80a067a:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
 80a067c:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
 80a067e:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
 80a0680:	81c3      	strhmi	r3, [r0, #14]
}
 80a0682:	4770      	bx	lr

080a0684 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a0684:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 80a0686:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 80a0688:	2400      	movs	r4, #0
    _width    = WIDTH;
 80a068a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
 80a068c:	f04f 31ff 	mov.w	r1, #4294967295
WIDTH(w), HEIGHT(h)
 80a0690:	4d05      	ldr	r5, [pc, #20]	; (80a06a8 <_ZN12Adafruit_GFXC1Ess+0x24>)
 80a0692:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
 80a0694:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
 80a0696:	4a05      	ldr	r2, [pc, #20]	; (80a06ac <_ZN12Adafruit_GFXC1Ess+0x28>)
 80a0698:	6044      	str	r4, [r0, #4]
 80a069a:	e9c0 1205 	strd	r1, r2, [r0, #20]
WIDTH(w), HEIGHT(h)
 80a069e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
 80a06a0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
 80a06a2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 80a06a4:	6204      	str	r4, [r0, #32]
}
 80a06a6:	bd30      	pop	{r4, r5, pc}
 80a06a8:	080a3320 	.word	0x080a3320
 80a06ac:	01000101 	.word	0x01000101

080a06b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a06b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startWrite();
 80a06b4:	2600      	movs	r6, #0
    uint8_t byte = 0;
 80a06b6:	4635      	mov	r5, r6
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a06b8:	b089      	sub	sp, #36	; 0x24
 80a06ba:	9304      	str	r3, [sp, #16]
 80a06bc:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80a06c0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 80a06c4:	9305      	str	r3, [sp, #20]
    startWrite();
 80a06c6:	6803      	ldr	r3, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a06c8:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
 80a06cc:	695b      	ldr	r3, [r3, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
 80a06ce:	4604      	mov	r4, r0
 80a06d0:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
    startWrite();
 80a06d4:	4798      	blx	r3
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80a06d6:	f118 0307 	adds.w	r3, r8, #7
 80a06da:	bf48      	it	mi
 80a06dc:	f108 030e 	addmi.w	r3, r8, #14
 80a06e0:	ea4f 0be3 	mov.w	fp, r3, asr #3
    startWrite();
 80a06e4:	9601      	str	r6, [sp, #4]
 80a06e6:	9b03      	ldr	r3, [sp, #12]
 80a06e8:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
 80a06ea:	9905      	ldr	r1, [sp, #20]
 80a06ec:	189a      	adds	r2, r3, r2
 80a06ee:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80a06f2:	b212      	sxth	r2, r2
 80a06f4:	4299      	cmp	r1, r3
 80a06f6:	dd27      	ble.n	80a0748 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 80a06f8:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a06fc:	9b04      	ldr	r3, [sp, #16]
 80a06fe:	4433      	add	r3, r6
 80a0700:	9306      	str	r3, [sp, #24]
 80a0702:	fa0f f389 	sxth.w	r3, r9
        for(int16_t i=0; i<w; i++) {
 80a0706:	4598      	cmp	r8, r3
 80a0708:	fa1f f189 	uxth.w	r1, r9
 80a070c:	dd17      	ble.n	80a073e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
            if(i & 7) byte <<= 1;
 80a070e:	0748      	lsls	r0, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a0710:	bf05      	ittet	eq
 80a0712:	9806      	ldreq	r0, [sp, #24]
 80a0714:	10db      	asreq	r3, r3, #3
            if(i & 7) byte <<= 1;
 80a0716:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 80a0718:	5cc5      	ldrbeq	r5, [r0, r3]
            if(i & 7) byte <<= 1;
 80a071a:	bf18      	it	ne
 80a071c:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
 80a071e:	062b      	lsls	r3, r5, #24
 80a0720:	d50a      	bpl.n	80a0738 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
 80a0722:	9b02      	ldr	r3, [sp, #8]
 80a0724:	9207      	str	r2, [sp, #28]
 80a0726:	4419      	add	r1, r3
 80a0728:	6823      	ldr	r3, [r4, #0]
 80a072a:	4620      	mov	r0, r4
 80a072c:	699b      	ldr	r3, [r3, #24]
 80a072e:	b209      	sxth	r1, r1
 80a0730:	461f      	mov	r7, r3
 80a0732:	4653      	mov	r3, sl
 80a0734:	47b8      	blx	r7
 80a0736:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
 80a0738:	f109 0901 	add.w	r9, r9, #1
 80a073c:	e7e1      	b.n	80a0702 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
    for(int16_t j=0; j<h; j++, y++) {
 80a073e:	9b01      	ldr	r3, [sp, #4]
 80a0740:	445e      	add	r6, fp
 80a0742:	3301      	adds	r3, #1
 80a0744:	9301      	str	r3, [sp, #4]
 80a0746:	e7ce      	b.n	80a06e6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
    endWrite();
 80a0748:	4620      	mov	r0, r4
 80a074a:	6823      	ldr	r3, [r4, #0]
 80a074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a074e:	b009      	add	sp, #36	; 0x24
 80a0750:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 80a0754:	4718      	bx	r3
	...

080a0758 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80a0758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a075c:	b091      	sub	sp, #68	; 0x44
 80a075e:	4617      	mov	r7, r2
 80a0760:	461e      	mov	r6, r3
    if(!gfxFont) { // 'Classic' built-in font
 80a0762:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80a0764:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80a0768:	4682      	mov	sl, r0
 80a076a:	f8bd 806c 	ldrh.w	r8, [sp, #108]	; 0x6c
 80a076e:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
 80a0772:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 80a0776:	9105      	str	r1, [sp, #20]
 80a0778:	9302      	str	r3, [sp, #8]
    if(!gfxFont) { // 'Classic' built-in font
 80a077a:	2a00      	cmp	r2, #0
 80a077c:	f040 80b9 	bne.w	80a08f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x19a>
        if((x >= _width)            || // Clip right
 80a0780:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a0784:	428b      	cmp	r3, r1
 80a0786:	f340 813c 	ble.w	80a0a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
 80a078a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80a078e:	42bb      	cmp	r3, r7
 80a0790:	f340 8137 	ble.w	80a0a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 80a0794:	2306      	movs	r3, #6
 80a0796:	fb03 1305 	mla	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
 80a079a:	2b00      	cmp	r3, #0
 80a079c:	f340 8131 	ble.w	80a0a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
           ((y + 8 * size_y - 1) < 0))   // Clip top
 80a07a0:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
 80a07a4:	2b00      	cmp	r3, #0
 80a07a6:	f340 812c 	ble.w	80a0a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2aa>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80a07aa:	7f03      	ldrb	r3, [r0, #28]
 80a07ac:	b91b      	cbnz	r3, 80a07b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x5e>
 80a07ae:	2eaf      	cmp	r6, #175	; 0xaf
 80a07b0:	bf84      	itt	hi
 80a07b2:	3601      	addhi	r6, #1
 80a07b4:	b2f6      	uxtbhi	r6, r6
        startWrite();
 80a07b6:	f8da 3000 	ldr.w	r3, [sl]
 80a07ba:	4650      	mov	r0, sl
 80a07bc:	695b      	ldr	r3, [r3, #20]
 80a07be:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a07c0:	2305      	movs	r3, #5
 80a07c2:	9309      	str	r3, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80a07c4:	2300      	movs	r3, #0
 80a07c6:	9304      	str	r3, [sp, #16]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a07c8:	4b8f      	ldr	r3, [pc, #572]	; (80a0a08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b0>)
 80a07ca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80a07ce:	4433      	add	r3, r6
 80a07d0:	930c      	str	r3, [sp, #48]	; 0x30
 80a07d2:	b2bb      	uxth	r3, r7
 80a07d4:	9306      	str	r3, [sp, #24]
 80a07d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a07d8:	9a04      	ldr	r2, [sp, #16]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a07da:	f8bd 6010 	ldrh.w	r6, [sp, #16]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a07de:	5c9b      	ldrb	r3, [r3, r2]
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80a07e0:	f04f 0900 	mov.w	r9, #0
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a07e4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a07e6:	b2ab      	uxth	r3, r5
 80a07e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80a07ea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a07ee:	9303      	str	r3, [sp, #12]
 80a07f0:	fb05 3306 	mla	r3, r5, r6, r3
 80a07f4:	b21b      	sxth	r3, r3
 80a07f6:	9308      	str	r3, [sp, #32]
 80a07f8:	2308      	movs	r3, #8
 80a07fa:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
 80a07fc:	9b03      	ldr	r3, [sp, #12]
 80a07fe:	441e      	add	r6, r3
 80a0800:	b236      	sxth	r6, r6
                if(line & 1) {
 80a0802:	9a07      	ldr	r2, [sp, #28]
 80a0804:	f8da 3000 	ldr.w	r3, [sl]
 80a0808:	07d2      	lsls	r2, r2, #31
 80a080a:	d54d      	bpl.n	80a08a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x150>
                    if(size_x == 1 && size_y == 1)
 80a080c:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 80a080e:	9906      	ldr	r1, [sp, #24]
 80a0810:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 80a0814:	d13b      	bne.n	80a088e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x136>
 80a0816:	2c01      	cmp	r4, #1
 80a0818:	d139      	bne.n	80a088e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x136>
                        writePixel(x+i, y+j, color);
 80a081a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a081e:	9b02      	ldr	r3, [sp, #8]
 80a0820:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
 80a0822:	4631      	mov	r1, r6
 80a0824:	4650      	mov	r0, sl
 80a0826:	b212      	sxth	r2, r2
 80a0828:	47d8      	blx	fp
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80a082a:	9b07      	ldr	r3, [sp, #28]
 80a082c:	f109 0901 	add.w	r9, r9, #1
 80a0830:	085b      	lsrs	r3, r3, #1
 80a0832:	9307      	str	r3, [sp, #28]
 80a0834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0836:	fa4f f989 	sxtb.w	r9, r9
 80a083a:	3b01      	subs	r3, #1
 80a083c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a0840:	930a      	str	r3, [sp, #40]	; 0x28
 80a0842:	d1de      	bne.n	80a0802 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xaa>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80a0844:	9b04      	ldr	r3, [sp, #16]
 80a0846:	3301      	adds	r3, #1
 80a0848:	b25b      	sxtb	r3, r3
 80a084a:	9304      	str	r3, [sp, #16]
 80a084c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a084e:	3b01      	subs	r3, #1
 80a0850:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a0854:	9309      	str	r3, [sp, #36]	; 0x24
 80a0856:	d1be      	bne.n	80a07d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x7e>
        if(bg != color) { // If opaque, draw vertical line for last column
 80a0858:	9b02      	ldr	r3, [sp, #8]
 80a085a:	4543      	cmp	r3, r8
 80a085c:	d00f      	beq.n	80a087e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 80a085e:	2d01      	cmp	r5, #1
 80a0860:	f8da 3000 	ldr.w	r3, [sl]
 80a0864:	d134      	bne.n	80a08d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x178>
 80a0866:	2c01      	cmp	r4, #1
 80a0868:	d132      	bne.n	80a08d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x178>
 80a086a:	9903      	ldr	r1, [sp, #12]
 80a086c:	f8cd 8000 	str.w	r8, [sp]
 80a0870:	3105      	adds	r1, #5
 80a0872:	6a1c      	ldr	r4, [r3, #32]
 80a0874:	463a      	mov	r2, r7
 80a0876:	2308      	movs	r3, #8
 80a0878:	4650      	mov	r0, sl
 80a087a:	b209      	sxth	r1, r1
 80a087c:	47a0      	blx	r4
        endWrite();
 80a087e:	4650      	mov	r0, sl
 80a0880:	f8da 3000 	ldr.w	r3, [sl]
 80a0884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0886:	b011      	add	sp, #68	; 0x44
 80a0888:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
 80a088c:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a088e:	fb04 1202 	mla	r2, r4, r2, r1
 80a0892:	9902      	ldr	r1, [sp, #8]
 80a0894:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a0896:	9400      	str	r4, [sp, #0]
 80a0898:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a089c:	4650      	mov	r0, sl
 80a089e:	462b      	mov	r3, r5
 80a08a0:	9908      	ldr	r1, [sp, #32]
 80a08a2:	b212      	sxth	r2, r2
 80a08a4:	47d8      	blx	fp
 80a08a6:	e7c0      	b.n	80a082a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd2>
                } else if(bg != color) {
 80a08a8:	9a02      	ldr	r2, [sp, #8]
 80a08aa:	4542      	cmp	r2, r8
 80a08ac:	d0bd      	beq.n	80a082a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd2>
                    if(size_x == 1 && size_y == 1)
 80a08ae:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, bg);
 80a08b0:	9906      	ldr	r1, [sp, #24]
 80a08b2:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 80a08b6:	d106      	bne.n	80a08c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
 80a08b8:	2c01      	cmp	r4, #1
 80a08ba:	d104      	bne.n	80a08c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
                        writePixel(x+i, y+j, bg);
 80a08bc:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a08c0:	440a      	add	r2, r1
 80a08c2:	4643      	mov	r3, r8
 80a08c4:	e7ad      	b.n	80a0822 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xca>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a08c6:	fb04 1202 	mla	r2, r4, r2, r1
 80a08ca:	f8cd 8004 	str.w	r8, [sp, #4]
 80a08ce:	e7e2      	b.n	80a0896 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x13e>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 80a08d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a08d2:	00e4      	lsls	r4, r4, #3
 80a08d4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80a08d8:	9a03      	ldr	r2, [sp, #12]
 80a08da:	f8cd 8004 	str.w	r8, [sp, #4]
 80a08de:	440a      	add	r2, r1
 80a08e0:	4611      	mov	r1, r2
 80a08e2:	9400      	str	r4, [sp, #0]
 80a08e4:	69dc      	ldr	r4, [r3, #28]
 80a08e6:	463a      	mov	r2, r7
 80a08e8:	462b      	mov	r3, r5
 80a08ea:	4650      	mov	r0, sl
 80a08ec:	b209      	sxth	r1, r1
 80a08ee:	47a0      	blx	r4
        endWrite();
 80a08f0:	e7c5      	b.n	80a087e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80a08f2:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
 80a08f4:	6851      	ldr	r1, [r2, #4]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80a08f6:	1af6      	subs	r6, r6, r3
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80a08f8:	6812      	ldr	r2, [r2, #0]
    return gfxFont->glyph + c;
 80a08fa:	b2f6      	uxtb	r6, r6
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80a08fc:	920e      	str	r2, [sp, #56]	; 0x38
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a08fe:	f831 2036 	ldrh.w	r2, [r1, r6, lsl #3]
    return gfxFont->glyph + c;
 80a0902:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a0906:	9204      	str	r2, [sp, #16]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80a0908:	789a      	ldrb	r2, [r3, #2]
        if(size_x > 1 || size_y > 1) {
 80a090a:	2d01      	cmp	r5, #1
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80a090c:	9208      	str	r2, [sp, #32]
                 h  = pgm_read_byte(&glyph->height);
 80a090e:	78da      	ldrb	r2, [r3, #3]
                 yo = pgm_read_byte(&glyph->yOffset);
 80a0910:	f993 b006 	ldrsb.w	fp, [r3, #6]
                 h  = pgm_read_byte(&glyph->height);
 80a0914:	920c      	str	r2, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80a0916:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80a091a:	9209      	str	r2, [sp, #36]	; 0x24
        if(size_x > 1 || size_y > 1) {
 80a091c:	d801      	bhi.n	80a0922 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ca>
 80a091e:	2c01      	cmp	r4, #1
 80a0920:	d953      	bls.n	80a09ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x272>
            xo16 = xo;
 80a0922:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80a0926:	9307      	str	r3, [sp, #28]
            yo16 = yo;
 80a0928:	fa0f f38b 	sxth.w	r3, fp
 80a092c:	9306      	str	r3, [sp, #24]
        uint8_t  xx, yy, bits = 0, bit = 0;
 80a092e:	f04f 0800 	mov.w	r8, #0
 80a0932:	46c1      	mov	r9, r8
        startWrite();
 80a0934:	f8da 3000 	ldr.w	r3, [sl]
 80a0938:	4650      	mov	r0, sl
 80a093a:	695b      	ldr	r3, [r3, #20]
 80a093c:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a093e:	b2bb      	uxth	r3, r7
 80a0940:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a0942:	445b      	add	r3, fp
        for(yy=0; yy<h; yy++) {
 80a0944:	f8cd 800c 	str.w	r8, [sp, #12]
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a0948:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
 80a094a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a094c:	9a03      	ldr	r2, [sp, #12]
 80a094e:	429a      	cmp	r2, r3
 80a0950:	d295      	bcs.n	80a087e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x126>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a0952:	9b06      	ldr	r3, [sp, #24]
            for(xx=0; xx<w; xx++) {
 80a0954:	2700      	movs	r7, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a0956:	4413      	add	r3, r2
 80a0958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a095a:	9903      	ldr	r1, [sp, #12]
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a095c:	fb03 2304 	mla	r3, r3, r4, r2
 80a0960:	b21b      	sxth	r3, r3
 80a0962:	930b      	str	r3, [sp, #44]	; 0x2c
 80a0964:	4643      	mov	r3, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a0966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a0968:	eb02 0b01 	add.w	fp, r2, r1
 80a096c:	fa0f fb8b 	sxth.w	fp, fp
            for(xx=0; xx<w; xx++) {
 80a0970:	9a08      	ldr	r2, [sp, #32]
 80a0972:	4297      	cmp	r7, r2
 80a0974:	d23c      	bcs.n	80a09f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x298>
                if(!(bit++ & 7)) {
 80a0976:	1c5a      	adds	r2, r3, #1
 80a0978:	b2d2      	uxtb	r2, r2
 80a097a:	075b      	lsls	r3, r3, #29
 80a097c:	920d      	str	r2, [sp, #52]	; 0x34
 80a097e:	d107      	bne.n	80a0990 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x238>
                    bits = pgm_read_byte(&bitmap[bo++]);
 80a0980:	9b04      	ldr	r3, [sp, #16]
 80a0982:	9904      	ldr	r1, [sp, #16]
 80a0984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a0986:	3301      	adds	r3, #1
 80a0988:	b29b      	uxth	r3, r3
 80a098a:	f812 9001 	ldrb.w	r9, [r2, r1]
 80a098e:	9304      	str	r3, [sp, #16]
                if(bits & 0x80) {
 80a0990:	f019 0f80 	tst.w	r9, #128	; 0x80
 80a0994:	d011      	beq.n	80a09ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x262>
                    if(size_x == 1 && size_y == 1) {
 80a0996:	2d01      	cmp	r5, #1
 80a0998:	f8da 3000 	ldr.w	r3, [sl]
 80a099c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80a09a0:	d117      	bne.n	80a09d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27a>
 80a09a2:	2c01      	cmp	r4, #1
 80a09a4:	d115      	bne.n	80a09d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27a>
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a09a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a09a8:	699b      	ldr	r3, [r3, #24]
 80a09aa:	4411      	add	r1, r2
 80a09ac:	4439      	add	r1, r7
 80a09ae:	461e      	mov	r6, r3
 80a09b0:	465a      	mov	r2, fp
 80a09b2:	4650      	mov	r0, sl
 80a09b4:	9b02      	ldr	r3, [sp, #8]
 80a09b6:	b209      	sxth	r1, r1
 80a09b8:	47b0      	blx	r6
                bits <<= 1;
 80a09ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
 80a09be:	3701      	adds	r7, #1
                if(!(bit++ & 7)) {
 80a09c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                bits <<= 1;
 80a09c2:	fa5f f989 	uxtb.w	r9, r9
            for(xx=0; xx<w; xx++) {
 80a09c6:	b2ff      	uxtb	r7, r7
 80a09c8:	e7d2      	b.n	80a0970 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x218>
        int16_t  xo16 = 0, yo16 = 0;
 80a09ca:	2300      	movs	r3, #0
 80a09cc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80a09d0:	e7ad      	b.n	80a092e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1d6>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a09d2:	9a07      	ldr	r2, [sp, #28]
 80a09d4:	4650      	mov	r0, sl
 80a09d6:	443a      	add	r2, r7
 80a09d8:	fb02 1105 	mla	r1, r2, r5, r1
 80a09dc:	9a02      	ldr	r2, [sp, #8]
 80a09de:	b209      	sxth	r1, r1
 80a09e0:	e9cd 4200 	strd	r4, r2, [sp]
 80a09e4:	69db      	ldr	r3, [r3, #28]
 80a09e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a09e8:	461e      	mov	r6, r3
 80a09ea:	462b      	mov	r3, r5
 80a09ec:	47b0      	blx	r6
 80a09ee:	e7e4      	b.n	80a09ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x262>
        for(yy=0; yy<h; yy++) {
 80a09f0:	9e03      	ldr	r6, [sp, #12]
 80a09f2:	9b08      	ldr	r3, [sp, #32]
 80a09f4:	3601      	adds	r6, #1
 80a09f6:	4498      	add	r8, r3
 80a09f8:	b2f3      	uxtb	r3, r6
 80a09fa:	fa5f f888 	uxtb.w	r8, r8
 80a09fe:	9303      	str	r3, [sp, #12]
 80a0a00:	e7a3      	b.n	80a094a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
}
 80a0a02:	b011      	add	sp, #68	; 0x44
 80a0a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0a08:	080a2e17 	.word	0x080a2e17

080a0a0c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 80a0a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 80a0a0e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 80a0a10:	4604      	mov	r4, r0
 80a0a12:	460b      	mov	r3, r1
 80a0a14:	b085      	sub	sp, #20
    if(!gfxFont) { // 'Classic' built-in font
 80a0a16:	2a00      	cmp	r2, #0
 80a0a18:	d134      	bne.n	80a0a84 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
 80a0a1a:	290a      	cmp	r1, #10
 80a0a1c:	d108      	bne.n	80a0a30 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
 80a0a1e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
 80a0a20:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 80a0a22:	7e42      	ldrb	r2, [r0, #25]
 80a0a24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
 80a0a28:	8263      	strh	r3, [r4, #18]
}
 80a0a2a:	2001      	movs	r0, #1
 80a0a2c:	b005      	add	sp, #20
 80a0a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
 80a0a30:	290d      	cmp	r1, #13
 80a0a32:	d0fa      	beq.n	80a0a2a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80a0a34:	7ee1      	ldrb	r1, [r4, #27]
 80a0a36:	7e00      	ldrb	r0, [r0, #24]
 80a0a38:	7e65      	ldrb	r5, [r4, #25]
 80a0a3a:	b171      	cbz	r1, 80a0a5a <_ZN12Adafruit_GFX5writeEh+0x4e>
 80a0a3c:	2106      	movs	r1, #6
 80a0a3e:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 80a0a42:	fb01 6100 	mla	r1, r1, r0, r6
 80a0a46:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80a0a4a:	42b1      	cmp	r1, r6
 80a0a4c:	bfc1      	itttt	gt
 80a0a4e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
 80a0a52:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 80a0a54:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 80a0a58:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80a0a5a:	8ae2      	ldrh	r2, [r4, #22]
 80a0a5c:	e9cd 0502 	strd	r0, r5, [sp, #8]
 80a0a60:	9201      	str	r2, [sp, #4]
 80a0a62:	8aa2      	ldrh	r2, [r4, #20]
 80a0a64:	4620      	mov	r0, r4
 80a0a66:	9200      	str	r2, [sp, #0]
 80a0a68:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a0a6c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a0a70:	f7ff fe72 	bl	80a0758 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 80a0a74:	7e23      	ldrb	r3, [r4, #24]
 80a0a76:	8a22      	ldrh	r2, [r4, #16]
 80a0a78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a0a7c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80a0a80:	8223      	strh	r3, [r4, #16]
 80a0a82:	e7d2      	b.n	80a0a2a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
 80a0a84:	290a      	cmp	r1, #10
 80a0a86:	d107      	bne.n	80a0a98 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
 80a0a88:	2300      	movs	r3, #0
 80a0a8a:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a0a8c:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
 80a0a8e:	7e41      	ldrb	r1, [r0, #25]
 80a0a90:	8a42      	ldrh	r2, [r0, #18]
 80a0a92:	fb01 2303 	mla	r3, r1, r3, r2
 80a0a96:	e7c7      	b.n	80a0a28 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
 80a0a98:	290d      	cmp	r1, #13
 80a0a9a:	d0c6      	beq.n	80a0a2a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80a0a9c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80a0a9e:	42a9      	cmp	r1, r5
 80a0aa0:	d3c3      	bcc.n	80a0a2a <_ZN12Adafruit_GFX5writeEh+0x1e>
 80a0aa2:	7a51      	ldrb	r1, [r2, #9]
 80a0aa4:	4299      	cmp	r1, r3
 80a0aa6:	d3c0      	bcc.n	80a0a2a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
 80a0aa8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
 80a0aaa:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
 80a0aac:	b2ed      	uxtb	r5, r5
 80a0aae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
 80a0ab2:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80a0ab4:	b32f      	cbz	r7, 80a0b02 <_ZN12Adafruit_GFX5writeEh+0xf6>
 80a0ab6:	78e9      	ldrb	r1, [r5, #3]
 80a0ab8:	b319      	cbz	r1, 80a0b02 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80a0aba:	7ee1      	ldrb	r1, [r4, #27]
 80a0abc:	7e00      	ldrb	r0, [r0, #24]
 80a0abe:	7e66      	ldrb	r6, [r4, #25]
 80a0ac0:	b191      	cbz	r1, 80a0ae8 <_ZN12Adafruit_GFX5writeEh+0xdc>
 80a0ac2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 80a0ac6:	4439      	add	r1, r7
 80a0ac8:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
 80a0acc:	fb00 7101 	mla	r1, r0, r1, r7
 80a0ad0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80a0ad4:	42b9      	cmp	r1, r7
 80a0ad6:	dd07      	ble.n	80a0ae8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
 80a0ad8:	2700      	movs	r7, #0
 80a0ada:	8227      	strh	r7, [r4, #16]
 80a0adc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a0ae0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
 80a0ae2:	fb02 1206 	mla	r2, r2, r6, r1
 80a0ae6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80a0ae8:	8ae2      	ldrh	r2, [r4, #22]
 80a0aea:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80a0aee:	9201      	str	r2, [sp, #4]
 80a0af0:	8aa2      	ldrh	r2, [r4, #20]
 80a0af2:	4620      	mov	r0, r4
 80a0af4:	9200      	str	r2, [sp, #0]
 80a0af6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a0afa:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a0afe:	f7ff fe2b 	bl	80a0758 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80a0b02:	7929      	ldrb	r1, [r5, #4]
 80a0b04:	7e23      	ldrb	r3, [r4, #24]
 80a0b06:	8a22      	ldrh	r2, [r4, #16]
 80a0b08:	fb01 2303 	mla	r3, r1, r3, r2
 80a0b0c:	e7b8      	b.n	80a0a80 <_ZN12Adafruit_GFX5writeEh+0x74>

080a0b0e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
 80a0b0e:	2901      	cmp	r1, #1
 80a0b10:	bf38      	it	cc
 80a0b12:	2101      	movcc	r1, #1
 80a0b14:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 80a0b16:	7641      	strb	r1, [r0, #25]
}
 80a0b18:	4770      	bx	lr
	...

080a0b1c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
 80a0b1c:	b510      	push	{r4, lr}
 80a0b1e:	4b06      	ldr	r3, [pc, #24]	; (80a0b38 <_ZN16OledWingAdafruitD1Ev+0x1c>)
 80a0b20:	4604      	mov	r4, r0
 80a0b22:	6003      	str	r3, [r0, #0]
	if (mutex) {
 80a0b24:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80a0b26:	b108      	cbz	r0, 80a0b2c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
 80a0b28:	f000 fdc2 	bl	80a16b0 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
 80a0b2c:	4620      	mov	r0, r4
 80a0b2e:	f000 f8f7 	bl	80a0d20 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
 80a0b32:	4620      	mov	r0, r4
 80a0b34:	bd10      	pop	{r4, pc}
 80a0b36:	bf00      	nop
 80a0b38:	080a3378 	.word	0x080a3378

080a0b3c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
 80a0b3c:	b510      	push	{r4, lr}
 80a0b3e:	4604      	mov	r4, r0
}
 80a0b40:	f7ff ffec 	bl	80a0b1c <_ZN16OledWingAdafruitD1Ev>
 80a0b44:	4620      	mov	r0, r4
 80a0b46:	2170      	movs	r1, #112	; 0x70
 80a0b48:	f001 fd87 	bl	80a265a <_ZdlPvj>
 80a0b4c:	4620      	mov	r0, r4
 80a0b4e:	bd10      	pop	{r4, pc}

080a0b50 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
 80a0b50:	b530      	push	{r4, r5, lr}
 80a0b52:	b085      	sub	sp, #20
 80a0b54:	4604      	mov	r4, r0
 80a0b56:	460d      	mov	r5, r1
 80a0b58:	f001 fd52 	bl	80a2600 <_Z19__fetch_global_Wirev>
 80a0b5c:	4a10      	ldr	r2, [pc, #64]	; (80a0ba0 <_ZN16OledWingAdafruitC1Ei+0x50>)
 80a0b5e:	4911      	ldr	r1, [pc, #68]	; (80a0ba4 <_ZN16OledWingAdafruitC1Ei+0x54>)
 80a0b60:	4603      	mov	r3, r0
 80a0b62:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80a0b66:	f04f 32ff 	mov.w	r2, #4294967295
 80a0b6a:	2180      	movs	r1, #128	; 0x80
 80a0b6c:	9200      	str	r2, [sp, #0]
 80a0b6e:	4620      	mov	r0, r4
 80a0b70:	2220      	movs	r2, #32
 80a0b72:	f000 f963 	bl	80a0e3c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
 80a0b76:	4b0c      	ldr	r3, [pc, #48]	; (80a0ba8 <_ZN16OledWingAdafruitC1Ei+0x58>)
 80a0b78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80a0b7c:	6023      	str	r3, [r4, #0]
 80a0b7e:	2300      	movs	r3, #0
 80a0b80:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
 80a0b84:	f000 f872 	bl	80a0c6c <_ZN8DebounceC1Ev>
 80a0b88:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80a0b8c:	f000 f86e 	bl	80a0c6c <_ZN8DebounceC1Ev>
 80a0b90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80a0b94:	f000 f86a 	bl	80a0c6c <_ZN8DebounceC1Ev>
}
 80a0b98:	4620      	mov	r0, r4
 80a0b9a:	b005      	add	sp, #20
 80a0b9c:	bd30      	pop	{r4, r5, pc}
 80a0b9e:	bf00      	nop
 80a0ba0:	00061a80 	.word	0x00061a80
 80a0ba4:	000186a0 	.word	0x000186a0
 80a0ba8:	080a3378 	.word	0x080a3378

080a0bac <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
 80a0bac:	b513      	push	{r0, r1, r4, lr}
 80a0bae:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
 80a0bb0:	3050      	adds	r0, #80	; 0x50
 80a0bb2:	f000 fd75 	bl	80a16a0 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
 80a0bb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a0bb8:	07d9      	lsls	r1, r3, #31
 80a0bba:	d505      	bpl.n	80a0bc8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
 80a0bbc:	2202      	movs	r2, #2
 80a0bbe:	2104      	movs	r1, #4
 80a0bc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80a0bc4:	f000 f866 	bl	80a0c94 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
 80a0bc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a0bca:	079a      	lsls	r2, r3, #30
 80a0bcc:	d505      	bpl.n	80a0bda <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
 80a0bce:	2200      	movs	r2, #0
 80a0bd0:	2103      	movs	r1, #3
 80a0bd2:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80a0bd6:	f000 f85d 	bl	80a0c94 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
 80a0bda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a0bdc:	075b      	lsls	r3, r3, #29
 80a0bde:	d505      	bpl.n	80a0bec <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
 80a0be0:	2202      	movs	r2, #2
 80a0be2:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80a0be6:	4611      	mov	r1, r2
 80a0be8:	f000 f854 	bl	80a0c94 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
 80a0bec:	2301      	movs	r3, #1
 80a0bee:	223c      	movs	r2, #60	; 0x3c
 80a0bf0:	2102      	movs	r1, #2
 80a0bf2:	4620      	mov	r0, r4
 80a0bf4:	9300      	str	r3, [sp, #0]
 80a0bf6:	f000 fa21 	bl	80a103c <_ZN16Adafruit_SSD13065beginEhhbb>
}
 80a0bfa:	b002      	add	sp, #8
 80a0bfc:	bd10      	pop	{r4, pc}

080a0bfe <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
 80a0bfe:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
 80a0c00:	6d43      	ldr	r3, [r0, #84]	; 0x54
void OledWingAdafruit::loop() {
 80a0c02:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
 80a0c04:	07d9      	lsls	r1, r3, #31
 80a0c06:	d502      	bpl.n	80a0c0e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
 80a0c08:	3058      	adds	r0, #88	; 0x58
 80a0c0a:	f000 f850 	bl	80a0cae <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
 80a0c0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a0c10:	079a      	lsls	r2, r3, #30
 80a0c12:	d503      	bpl.n	80a0c1c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
 80a0c14:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80a0c18:	f000 f849 	bl	80a0cae <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
 80a0c1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a0c1e:	075b      	lsls	r3, r3, #29
 80a0c20:	d505      	bpl.n	80a0c2e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
 80a0c22:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
 80a0c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
 80a0c2a:	f000 b840 	b.w	80a0cae <_ZN8Debounce6updateEv>
}
 80a0c2e:	bd10      	pop	{r4, pc}

080a0c30 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
 80a0c30:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
 80a0c32:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
 80a0c34:	f013 0001 	ands.w	r0, r3, #1
 80a0c38:	d003      	beq.n	80a0c42 <_ZN16OledWingAdafruit8pressedAEv+0x12>
 80a0c3a:	f102 0058 	add.w	r0, r2, #88	; 0x58
 80a0c3e:	f000 b866 	b.w	80a0d0e <_ZN8Debounce4fellEv>
}
 80a0c42:	4770      	bx	lr

080a0c44 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
 80a0c44:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
 80a0c46:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
 80a0c48:	f013 0002 	ands.w	r0, r3, #2
 80a0c4c:	d003      	beq.n	80a0c56 <_ZN16OledWingAdafruit8pressedBEv+0x12>
 80a0c4e:	f102 0060 	add.w	r0, r2, #96	; 0x60
 80a0c52:	f000 b85c 	b.w	80a0d0e <_ZN8Debounce4fellEv>
}
 80a0c56:	4770      	bx	lr

080a0c58 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
 80a0c58:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
 80a0c5a:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
 80a0c5c:	f013 0004 	ands.w	r0, r3, #4
 80a0c60:	d003      	beq.n	80a0c6a <_ZN16OledWingAdafruit8pressedCEv+0x12>
 80a0c62:	f102 0068 	add.w	r0, r2, #104	; 0x68
 80a0c66:	f000 b852 	b.w	80a0d0e <_ZN8Debounce4fellEv>
}
 80a0c6a:	4770      	bx	lr

080a0c6c <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
 80a0c6c:	2100      	movs	r1, #0
 80a0c6e:	220a      	movs	r2, #10
 80a0c70:	e9c0 1200 	strd	r1, r2, [r0]
{}
 80a0c74:	4770      	bx	lr

080a0c76 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
 80a0c76:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
 80a0c78:	b510      	push	{r4, lr}
 80a0c7a:	4604      	mov	r4, r0
    this->pin = pin;
 80a0c7c:	71c1      	strb	r1, [r0, #7]
    state = 0;
 80a0c7e:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
 80a0c80:	b288      	uxth	r0, r1
 80a0c82:	f001 fc79 	bl	80a2578 <digitalRead>
 80a0c86:	b108      	cbz	r0, 80a0c8c <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
 80a0c88:	2303      	movs	r3, #3
 80a0c8a:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0c8c:	f000 fd00 	bl	80a1690 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
 80a0c90:	6020      	str	r0, [r4, #0]
#endif
}
 80a0c92:	bd10      	pop	{r4, pc}

080a0c94 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
 80a0c94:	b538      	push	{r3, r4, r5, lr}
 80a0c96:	460c      	mov	r4, r1
 80a0c98:	4605      	mov	r5, r0
  pinMode(pin, mode);
 80a0c9a:	4611      	mov	r1, r2
 80a0c9c:	b2a0      	uxth	r0, r4
 80a0c9e:	f001 fc41 	bl	80a2524 <pinMode>
  
  this->attach(pin);
 80a0ca2:	4621      	mov	r1, r4
 80a0ca4:	4628      	mov	r0, r5
}
 80a0ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
 80a0caa:	f7ff bfe4 	b.w	80a0c76 <_ZN8Debounce6attachEi>

080a0cae <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
 80a0cae:	b538      	push	{r3, r4, r5, lr}
 80a0cb0:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
 80a0cb2:	79c0      	ldrb	r0, [r0, #7]
 80a0cb4:	f001 fc60 	bl	80a2578 <digitalRead>
 80a0cb8:	3800      	subs	r0, #0
 80a0cba:	bf18      	it	ne
 80a0cbc:	2001      	movne	r0, #1
    state &= ~_BV(STATE_CHANGED);
 80a0cbe:	79a5      	ldrb	r5, [r4, #6]
 80a0cc0:	f025 0308 	bic.w	r3, r5, #8

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
 80a0cc4:	f3c5 0540 	ubfx	r5, r5, #1, #1
 80a0cc8:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
 80a0cca:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
 80a0ccc:	d00a      	beq.n	80a0ce4 <_ZN8Debounce6updateEv+0x36>
 80a0cce:	f000 fcdf 	bl	80a1690 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
 80a0cd2:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
 80a0cd4:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
 80a0cd6:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
 80a0cda:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
 80a0cdc:	79a0      	ldrb	r0, [r4, #6]
#endif
}
 80a0cde:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80a0ce2:	bd38      	pop	{r3, r4, r5, pc}
 80a0ce4:	f000 fcd4 	bl	80a1690 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
 80a0ce8:	6823      	ldr	r3, [r4, #0]
 80a0cea:	1ac0      	subs	r0, r0, r3
 80a0cec:	88a3      	ldrh	r3, [r4, #4]
 80a0cee:	4298      	cmp	r0, r3
 80a0cf0:	d3f4      	bcc.n	80a0cdc <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
 80a0cf2:	79a3      	ldrb	r3, [r4, #6]
 80a0cf4:	f003 0301 	and.w	r3, r3, #1
 80a0cf8:	42ab      	cmp	r3, r5
 80a0cfa:	d0ef      	beq.n	80a0cdc <_ZN8Debounce6updateEv+0x2e>
 80a0cfc:	f000 fcc8 	bl	80a1690 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
 80a0d00:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
 80a0d02:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
 80a0d04:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
 80a0d08:	f043 0308 	orr.w	r3, r3, #8
 80a0d0c:	e7e5      	b.n	80a0cda <_ZN8Debounce6updateEv+0x2c>

080a0d0e <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
 80a0d0e:	7980      	ldrb	r0, [r0, #6]
 80a0d10:	f000 0009 	and.w	r0, r0, #9
 80a0d14:	f1a0 0308 	sub.w	r3, r0, #8
 80a0d18:	4258      	negs	r0, r3
 80a0d1a:	4158      	adcs	r0, r3
 80a0d1c:	4770      	bx	lr
	...

080a0d20 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 80a0d20:	b510      	push	{r4, lr}
 80a0d22:	4b04      	ldr	r3, [pc, #16]	; (80a0d34 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
 80a0d24:	4604      	mov	r4, r0
 80a0d26:	6003      	str	r3, [r0, #0]
  if(buffer) {
 80a0d28:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0d2a:	b108      	cbz	r0, 80a0d30 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
 80a0d2c:	f000 fe96 	bl	80a1a5c <free>
    buffer = NULL;
  }
}
 80a0d30:	4620      	mov	r0, r4
 80a0d32:	bd10      	pop	{r4, pc}
 80a0d34:	080a3884 	.word	0x080a3884

080a0d38 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 80a0d38:	b510      	push	{r4, lr}
 80a0d3a:	4604      	mov	r4, r0
}
 80a0d3c:	f7ff fff0 	bl	80a0d20 <_ZN16Adafruit_SSD1306D1Ev>
 80a0d40:	4620      	mov	r0, r4
 80a0d42:	2150      	movs	r1, #80	; 0x50
 80a0d44:	f001 fc89 	bl	80a265a <_ZdlPvj>
 80a0d48:	4620      	mov	r0, r4
 80a0d4a:	bd10      	pop	{r4, pc}

080a0d4c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a0d4c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0d4e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a0d50:	db50      	blt.n	80a0df4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
 80a0d52:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 80a0d56:	428c      	cmp	r4, r1
 80a0d58:	dd4c      	ble.n	80a0df4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
 80a0d5a:	2a00      	cmp	r2, #0
 80a0d5c:	db4a      	blt.n	80a0df4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
 80a0d5e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 80a0d62:	4294      	cmp	r4, r2
 80a0d64:	dd46      	ble.n	80a0df4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
 80a0d66:	7e84      	ldrb	r4, [r0, #26]
 80a0d68:	2c02      	cmp	r4, #2
 80a0d6a:	d022      	beq.n	80a0db2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x66>
 80a0d6c:	2c03      	cmp	r4, #3
 80a0d6e:	d029      	beq.n	80a0dc4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x78>
 80a0d70:	2c01      	cmp	r4, #1
 80a0d72:	d104      	bne.n	80a0d7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
 80a0d74:	43d2      	mvns	r2, r2
 80a0d76:	8904      	ldrh	r4, [r0, #8]
 80a0d78:	4414      	add	r4, r2
      break;
 80a0d7a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 80a0d7c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
 80a0d7e:	2b01      	cmp	r3, #1
 80a0d80:	d026      	beq.n	80a0dd0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x84>
 80a0d82:	2b02      	cmp	r3, #2
 80a0d84:	d037      	beq.n	80a0df6 <_ZN16Adafruit_SSD13069drawPixelEsst+0xaa>
 80a0d86:	2b00      	cmp	r3, #0
 80a0d88:	d134      	bne.n	80a0df4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
 80a0d8a:	4613      	mov	r3, r2
 80a0d8c:	2a00      	cmp	r2, #0
 80a0d8e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0d92:	bfb8      	it	lt
 80a0d94:	1dd3      	addlt	r3, r2, #7
 80a0d96:	f343 03cf 	sbfx	r3, r3, #3, #16
 80a0d9a:	fb04 1103 	mla	r1, r4, r3, r1
 80a0d9e:	2301      	movs	r3, #1
 80a0da0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0da2:	f002 0207 	and.w	r2, r2, #7
 80a0da6:	4093      	lsls	r3, r2
 80a0da8:	5c42      	ldrb	r2, [r0, r1]
 80a0daa:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
 80a0dae:	5442      	strb	r2, [r0, r1]
    }
  }
}
 80a0db0:	e020      	b.n	80a0df4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa8>
      x = WIDTH  - x - 1;
 80a0db2:	43c9      	mvns	r1, r1
      y = HEIGHT - y - 1;
 80a0db4:	43d2      	mvns	r2, r2
      x = WIDTH  - x - 1;
 80a0db6:	8904      	ldrh	r4, [r0, #8]
 80a0db8:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
 80a0dba:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH  - x - 1;
 80a0dbc:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 80a0dbe:	4422      	add	r2, r4
 80a0dc0:	b212      	sxth	r2, r2
      break;
 80a0dc2:	e7dc      	b.n	80a0d7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 80a0dc4:	43c9      	mvns	r1, r1
 80a0dc6:	8944      	ldrh	r4, [r0, #10]
 80a0dc8:	440c      	add	r4, r1
      break;
 80a0dca:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 80a0dcc:	b222      	sxth	r2, r4
      break;
 80a0dce:	e7d6      	b.n	80a0d7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
 80a0dd0:	4613      	mov	r3, r2
 80a0dd2:	2a00      	cmp	r2, #0
 80a0dd4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0dd8:	bfb8      	it	lt
 80a0dda:	1dd3      	addlt	r3, r2, #7
 80a0ddc:	f343 03cf 	sbfx	r3, r3, #3, #16
 80a0de0:	fb04 1103 	mla	r1, r4, r3, r1
 80a0de4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80a0de6:	f002 0007 	and.w	r0, r2, #7
 80a0dea:	2201      	movs	r2, #1
 80a0dec:	4082      	lsls	r2, r0
 80a0dee:	5c58      	ldrb	r0, [r3, r1]
 80a0df0:	4302      	orrs	r2, r0
 80a0df2:	545a      	strb	r2, [r3, r1]
}
 80a0df4:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
 80a0df6:	4613      	mov	r3, r2
 80a0df8:	2a00      	cmp	r2, #0
 80a0dfa:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0dfe:	bfb8      	it	lt
 80a0e00:	1dd3      	addlt	r3, r2, #7
 80a0e02:	f343 03cf 	sbfx	r3, r3, #3, #16
 80a0e06:	fb04 1103 	mla	r1, r4, r3, r1
 80a0e0a:	2301      	movs	r3, #1
 80a0e0c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0e0e:	f002 0207 	and.w	r2, r2, #7
 80a0e12:	fa03 f202 	lsl.w	r2, r3, r2
 80a0e16:	5c43      	ldrb	r3, [r0, r1]
 80a0e18:	405a      	eors	r2, r3
 80a0e1a:	e7c8      	b.n	80a0dae <_ZN16Adafruit_SSD13069drawPixelEsst+0x62>

080a0e1c <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a0e1c:	b510      	push	{r4, lr}
 80a0e1e:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
 80a0e20:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
 80a0e24:	2101      	movs	r1, #1
 80a0e26:	b280      	uxth	r0, r0
 80a0e28:	f001 fb8d 	bl	80a2546 <digitalWrite>
 80a0e2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0e2e:	b118      	cbz	r0, 80a0e38 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
 80a0e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
 80a0e34:	f000 be4a 	b.w	80a1acc <_ZN8SPIClass14endTransactionEv>
}
 80a0e38:	bd10      	pop	{r4, pc}
	...

080a0e3c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
 80a0e3c:	b570      	push	{r4, r5, r6, lr}
 80a0e3e:	4604      	mov	r4, r0
 80a0e40:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
 80a0e42:	2600      	movs	r6, #0
 80a0e44:	f7ff fc1e 	bl	80a0684 <_ZN12Adafruit_GFXC1Ess>
 80a0e48:	4b11      	ldr	r3, [pc, #68]	; (80a0e90 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
 80a0e4a:	6266      	str	r6, [r4, #36]	; 0x24
 80a0e4c:	6023      	str	r3, [r4, #0]
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
 80a0e4e:	b915      	cbnz	r5, 80a0e56 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
 80a0e50:	f001 fbd6 	bl	80a2600 <_Z19__fetch_global_Wirev>
 80a0e54:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
 80a0e56:	23ff      	movs	r3, #255	; 0xff
 80a0e58:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 80a0e5c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a0e60:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80a0e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0e68:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
 80a0e6c:	4b09      	ldr	r3, [pc, #36]	; (80a0e94 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
}
 80a0e6e:	4620      	mov	r0, r4
 80a0e70:	63a3      	str	r3, [r4, #56]	; 0x38
 80a0e72:	2301      	movs	r3, #1
 80a0e74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  wireClk(clkDuring), restoreClk(clkAfter) {
 80a0e78:	9b05      	ldr	r3, [sp, #20]
 80a0e7a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
 80a0e7e:	64a3      	str	r3, [r4, #72]	; 0x48
 80a0e80:	9b06      	ldr	r3, [sp, #24]
 80a0e82:	86a2      	strh	r2, [r4, #52]	; 0x34
 80a0e84:	6426      	str	r6, [r4, #64]	; 0x40
 80a0e86:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
 80a0e8a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80a0e8c:	bd70      	pop	{r4, r5, r6, pc}
 80a0e8e:	bf00      	nop
 80a0e90:	080a3884 	.word	0x080a3884
 80a0e94:	080a33d0 	.word	0x080a33d0

080a0e98 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 80a0e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e9a:	4604      	mov	r4, r0
  if(wire) { // I2C
 80a0e9c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 80a0e9e:	460d      	mov	r5, r1
  if(wire) { // I2C
 80a0ea0:	b190      	cbz	r0, 80a0ec8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
 80a0ea2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a0ea6:	f001 fa25 	bl	80a22f4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0eaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0eac:	2100      	movs	r1, #0
 80a0eae:	6803      	ldr	r3, [r0, #0]
 80a0eb0:	689b      	ldr	r3, [r3, #8]
 80a0eb2:	4798      	blx	r3
    WIRE_WRITE(c);
 80a0eb4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0eb6:	4629      	mov	r1, r5
 80a0eb8:	6803      	ldr	r3, [r0, #0]
 80a0eba:	689b      	ldr	r3, [r3, #8]
 80a0ebc:	4798      	blx	r3
    wire->endTransmission();
 80a0ebe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 80a0ec0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
 80a0ec4:	f001 ba1d 	b.w	80a2302 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 80a0ec8:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 80a0ecc:	4601      	mov	r1, r0
 80a0ece:	b298      	uxth	r0, r3
 80a0ed0:	f001 fb39 	bl	80a2546 <digitalWrite>
  if(spi) {
 80a0ed4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0ed6:	b120      	cbz	r0, 80a0ee2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
 80a0ed8:	4629      	mov	r1, r5
}
 80a0eda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
 80a0ede:	f000 be7b 	b.w	80a1bd8 <_ZN8SPIClass8transferEh>
 80a0ee2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a0ee4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
 80a0ee6:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a0eea:	ea05 0107 	and.w	r1, r5, r7
 80a0eee:	b280      	uxth	r0, r0
 80a0ef0:	f001 fb29 	bl	80a2546 <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a0ef4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0ef8:	2101      	movs	r1, #1
 80a0efa:	b280      	uxth	r0, r0
 80a0efc:	f001 fb23 	bl	80a2546 <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a0f00:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0f04:	2100      	movs	r1, #0
 80a0f06:	b280      	uxth	r0, r0
 80a0f08:	f001 fb1d 	bl	80a2546 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a0f0c:	3e01      	subs	r6, #1
 80a0f0e:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80a0f12:	d1e8      	bne.n	80a0ee6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
 80a0f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f16 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a0f16:	b538      	push	{r3, r4, r5, lr}
 80a0f18:	4604      	mov	r4, r0
  TRANSACTION_START
 80a0f1a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a0f1c:	460d      	mov	r5, r1
  TRANSACTION_START
 80a0f1e:	b180      	cbz	r0, 80a0f42 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a0f20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0f22:	f001 f9d9 	bl	80a22d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 80a0f26:	2d00      	cmp	r5, #0
 80a0f28:	4620      	mov	r0, r4
 80a0f2a:	bf14      	ite	ne
 80a0f2c:	21a7      	movne	r1, #167	; 0xa7
 80a0f2e:	21a6      	moveq	r1, #166	; 0xa6
 80a0f30:	f7ff ffb2 	bl	80a0e98 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 80a0f34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0f36:	b188      	cbz	r0, 80a0f5c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
 80a0f38:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
 80a0f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0f3e:	f001 b9cb 	b.w	80a22d8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 80a0f42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0f44:	b118      	cbz	r0, 80a0f4e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
 80a0f46:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a0f4a:	f000 fdd9 	bl	80a1b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 80a0f4e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a0f52:	2100      	movs	r1, #0
 80a0f54:	b280      	uxth	r0, r0
 80a0f56:	f001 faf6 	bl	80a2546 <digitalWrite>
 80a0f5a:	e7e4      	b.n	80a0f26 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
 80a0f5c:	4620      	mov	r0, r4
}
 80a0f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0f62:	f7ff bf5b 	b.w	80a0e1c <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

080a0f66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 80a0f66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0f6a:	4604      	mov	r4, r0
  if(wire) { // I2C
 80a0f6c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 80a0f6e:	460d      	mov	r5, r1
  if(wire) { // I2C
 80a0f70:	188f      	adds	r7, r1, r2
 80a0f72:	b340      	cbz	r0, 80a0fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
 80a0f74:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a0f78:	f001 f9bc 	bl	80a22f4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0f7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0f7e:	2100      	movs	r1, #0
 80a0f80:	6803      	ldr	r3, [r0, #0]
    uint8_t bytesOut = 1;
 80a0f82:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0f84:	689b      	ldr	r3, [r3, #8]
 80a0f86:	4798      	blx	r3
    while(n--) {
 80a0f88:	42bd      	cmp	r5, r7
 80a0f8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0f8c:	d017      	beq.n	80a0fbe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
 80a0f8e:	2e1f      	cmp	r6, #31
 80a0f90:	d90c      	bls.n	80a0fac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
 80a0f92:	f001 f9b6 	bl	80a2302 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 80a0f96:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a0f9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0f9c:	f001 f9aa 	bl	80a22f4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0fa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0fa2:	2100      	movs	r1, #0
 80a0fa4:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 80a0fa6:	2601      	movs	r6, #1
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0fa8:	689b      	ldr	r3, [r3, #8]
 80a0faa:	4798      	blx	r3
      WIRE_WRITE(pgm_read_byte(c++));
 80a0fac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0fae:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0fb2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 80a0fb4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
 80a0fb6:	689b      	ldr	r3, [r3, #8]
 80a0fb8:	4798      	blx	r3
      bytesOut++;
 80a0fba:	b2f6      	uxtb	r6, r6
    while(n--) {
 80a0fbc:	e7e4      	b.n	80a0f88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
 80a0fbe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
 80a0fc2:	f001 b99e 	b.w	80a2302 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 80a0fc6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 80a0fca:	4601      	mov	r1, r0
 80a0fcc:	b298      	uxth	r0, r3
 80a0fce:	f001 faba 	bl	80a2546 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
 80a0fd2:	42af      	cmp	r7, r5
 80a0fd4:	d022      	beq.n	80a101c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
 80a0fd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
 80a0fd8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
 80a0fdc:	b118      	cbz	r0, 80a0fe6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
 80a0fde:	4649      	mov	r1, r9
 80a0fe0:	f000 fdfa 	bl	80a1bd8 <_ZN8SPIClass8transferEh>
 80a0fe4:	e7f5      	b.n	80a0fd2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
 80a0fe6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a0fe8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
 80a0fec:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a0ff0:	ea09 0108 	and.w	r1, r9, r8
 80a0ff4:	b280      	uxth	r0, r0
 80a0ff6:	f001 faa6 	bl	80a2546 <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a0ffa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0ffe:	2101      	movs	r1, #1
 80a1000:	b280      	uxth	r0, r0
 80a1002:	f001 faa0 	bl	80a2546 <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a1006:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a100a:	2100      	movs	r1, #0
 80a100c:	b280      	uxth	r0, r0
 80a100e:	f001 fa9a 	bl	80a2546 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a1012:	3e01      	subs	r6, #1
 80a1014:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80a1018:	d1e8      	bne.n	80a0fec <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
 80a101a:	e7da      	b.n	80a0fd2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
 80a101c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a1020 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
 80a1020:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80a1024:	2100      	movs	r1, #0
 80a1026:	1dda      	adds	r2, r3, #7
 80a1028:	bf48      	it	mi
 80a102a:	f103 020e 	addmi.w	r2, r3, #14
 80a102e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80a1032:	10d2      	asrs	r2, r2, #3
 80a1034:	435a      	muls	r2, r3
 80a1036:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a1038:	f001 bb30 	b.w	80a269c <memset>

080a103c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
 80a103c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a1040:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a1042:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
 80a1044:	4604      	mov	r4, r0
 80a1046:	460f      	mov	r7, r1
 80a1048:	4615      	mov	r5, r2
 80a104a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a104e:	b1b3      	cbz	r3, 80a107e <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
 80a1050:	4620      	mov	r0, r4
 80a1052:	f7ff ffe5 	bl	80a1020 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
 80a1056:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 80a105a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80a105e:	2820      	cmp	r0, #32
 80a1060:	dc1f      	bgt.n	80a10a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 80a1062:	2320      	movs	r3, #32
 80a1064:	2201      	movs	r2, #1
 80a1066:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80a106a:	2373      	movs	r3, #115	; 0x73
 80a106c:	3820      	subs	r0, #32
 80a106e:	3973      	subs	r1, #115	; 0x73
 80a1070:	9300      	str	r3, [sp, #0]
 80a1072:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a1076:	4b89      	ldr	r3, [pc, #548]	; (80a129c <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
 80a1078:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80a107c:	e01f      	b.n	80a10be <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a107e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80a1082:	1dd8      	adds	r0, r3, #7
 80a1084:	bf48      	it	mi
 80a1086:	f103 000e 	addmi.w	r0, r3, #14
 80a108a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80a108e:	10c0      	asrs	r0, r0, #3
 80a1090:	4358      	muls	r0, r3
 80a1092:	f000 fcdb 	bl	80a1a4c <malloc>
 80a1096:	62e0      	str	r0, [r4, #44]	; 0x2c
 80a1098:	2800      	cmp	r0, #0
 80a109a:	d1d9      	bne.n	80a1050 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
 80a109c:	b004      	add	sp, #16
 80a109e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
 80a10a2:	2340      	movs	r3, #64	; 0x40
 80a10a4:	f04f 0c01 	mov.w	ip, #1
 80a10a8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80a10ac:	2352      	movs	r3, #82	; 0x52
 80a10ae:	3840      	subs	r0, #64	; 0x40
 80a10b0:	3952      	subs	r1, #82	; 0x52
 80a10b2:	9300      	str	r3, [sp, #0]
 80a10b4:	4b7a      	ldr	r3, [pc, #488]	; (80a12a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
 80a10b6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a10ba:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 80a10be:	f340 024f 	sbfx	r2, r0, #1, #16
 80a10c2:	f341 014f 	sbfx	r1, r1, #1, #16
 80a10c6:	4620      	mov	r0, r4
 80a10c8:	f7ff faf2 	bl	80a06b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
 80a10cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
 80a10ce:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
 80a10d2:	2800      	cmp	r0, #0
 80a10d4:	d078      	beq.n	80a11c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 80a10d6:	2d00      	cmp	r5, #0
 80a10d8:	d174      	bne.n	80a11c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
 80a10da:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80a10de:	2b20      	cmp	r3, #32
 80a10e0:	bf0c      	ite	eq
 80a10e2:	253c      	moveq	r5, #60	; 0x3c
 80a10e4:	253d      	movne	r5, #61	; 0x3d
 80a10e6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
 80a10ea:	f1b8 0f00 	cmp.w	r8, #0
 80a10ee:	d001      	beq.n	80a10f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
 80a10f0:	f001 f8f6 	bl	80a22e0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
 80a10f4:	b1fe      	cbz	r6, 80a1136 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
 80a10f6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a10fa:	2800      	cmp	r0, #0
 80a10fc:	db1b      	blt.n	80a1136 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
 80a10fe:	2101      	movs	r1, #1
 80a1100:	b280      	uxth	r0, r0
 80a1102:	f001 fa0f 	bl	80a2524 <pinMode>
    digitalWrite(rstPin, HIGH);
 80a1106:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a110a:	2101      	movs	r1, #1
 80a110c:	b280      	uxth	r0, r0
 80a110e:	f001 fa1a 	bl	80a2546 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
 80a1112:	2001      	movs	r0, #1
 80a1114:	f000 fe2e 	bl	80a1d74 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 80a1118:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a111c:	2100      	movs	r1, #0
 80a111e:	b280      	uxth	r0, r0
 80a1120:	f001 fa11 	bl	80a2546 <digitalWrite>
    delay(10);                  // Wait 10 ms
 80a1124:	200a      	movs	r0, #10
 80a1126:	f000 fe25 	bl	80a1d74 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 80a112a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a112e:	2101      	movs	r1, #1
 80a1130:	b280      	uxth	r0, r0
 80a1132:	f001 fa08 	bl	80a2546 <digitalWrite>
  TRANSACTION_START
 80a1136:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1138:	2800      	cmp	r0, #0
 80a113a:	d074      	beq.n	80a1226 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
 80a113c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a113e:	f001 f8cb 	bl	80a22d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
 80a1142:	2204      	movs	r2, #4
 80a1144:	4620      	mov	r0, r4
 80a1146:	4957      	ldr	r1, [pc, #348]	; (80a12a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
 80a1148:	f7ff ff0d 	bl	80a0f66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
 80a114c:	7aa1      	ldrb	r1, [r4, #10]
 80a114e:	4620      	mov	r0, r4
 80a1150:	3901      	subs	r1, #1
 80a1152:	b2c9      	uxtb	r1, r1
 80a1154:	f7ff fea0 	bl	80a0e98 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
 80a1158:	4953      	ldr	r1, [pc, #332]	; (80a12a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
 80a115a:	2204      	movs	r2, #4
 80a115c:	4620      	mov	r0, r4
 80a115e:	f7ff ff02 	bl	80a0f66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80a1162:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a1166:	4620      	mov	r0, r4
 80a1168:	2b01      	cmp	r3, #1
 80a116a:	bf0c      	ite	eq
 80a116c:	2110      	moveq	r1, #16
 80a116e:	2114      	movne	r1, #20
 80a1170:	f7ff fe92 	bl	80a0e98 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
 80a1174:	2204      	movs	r2, #4
 80a1176:	4620      	mov	r0, r4
 80a1178:	494c      	ldr	r1, [pc, #304]	; (80a12ac <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
 80a117a:	f7ff fef4 	bl	80a0f66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
 80a117e:	68a3      	ldr	r3, [r4, #8]
 80a1180:	4a4b      	ldr	r2, [pc, #300]	; (80a12b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
 80a1182:	4293      	cmp	r3, r2
 80a1184:	d15c      	bne.n	80a1240 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
 80a1186:	2204      	movs	r2, #4
 80a1188:	4620      	mov	r0, r4
 80a118a:	494a      	ldr	r1, [pc, #296]	; (80a12b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
 80a118c:	f7ff feeb 	bl	80a0f66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
 80a1190:	21d9      	movs	r1, #217	; 0xd9
 80a1192:	4620      	mov	r0, r4
 80a1194:	f7ff fe80 	bl	80a0e98 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 80a1198:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a119c:	4620      	mov	r0, r4
 80a119e:	2b01      	cmp	r3, #1
 80a11a0:	bf0c      	ite	eq
 80a11a2:	2122      	moveq	r1, #34	; 0x22
 80a11a4:	21f1      	movne	r1, #241	; 0xf1
 80a11a6:	f7ff fe77 	bl	80a0e98 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
 80a11aa:	4620      	mov	r0, r4
 80a11ac:	2206      	movs	r2, #6
 80a11ae:	4942      	ldr	r1, [pc, #264]	; (80a12b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
 80a11b0:	f7ff fed9 	bl	80a0f66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
 80a11b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a11b6:	2800      	cmp	r0, #0
 80a11b8:	d063      	beq.n	80a1282 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
 80a11ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80a11bc:	f001 f88c 	bl	80a22d8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
 80a11c0:	2001      	movs	r0, #1
 80a11c2:	e76b      	b.n	80a109c <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 80a11c4:	b26d      	sxtb	r5, r5
 80a11c6:	e78e      	b.n	80a10e6 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 80a11c8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 80a11cc:	2101      	movs	r1, #1
 80a11ce:	b280      	uxth	r0, r0
 80a11d0:	f001 f9a8 	bl	80a2524 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
 80a11d4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a11d8:	2101      	movs	r1, #1
 80a11da:	b280      	uxth	r0, r0
 80a11dc:	f001 f9a2 	bl	80a2524 <pinMode>
    SSD1306_DESELECT
 80a11e0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a11e4:	2101      	movs	r1, #1
 80a11e6:	b280      	uxth	r0, r0
 80a11e8:	f001 f9ad 	bl	80a2546 <digitalWrite>
    if(spi) { // Hardware SPI
 80a11ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a11ee:	b13d      	cbz	r5, 80a1200 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
 80a11f0:	f1b8 0f00 	cmp.w	r8, #0
 80a11f4:	f43f af7e 	beq.w	80a10f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
 80a11f8:	4628      	mov	r0, r5
 80a11fa:	f000 fc59 	bl	80a1ab0 <_ZN8SPIClass5beginEv>
 80a11fe:	e779      	b.n	80a10f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
 80a1200:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a1204:	2101      	movs	r1, #1
 80a1206:	b280      	uxth	r0, r0
 80a1208:	f001 f98c 	bl	80a2524 <pinMode>
      pinMode(clkPin , OUTPUT);
 80a120c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a1210:	2101      	movs	r1, #1
 80a1212:	b280      	uxth	r0, r0
 80a1214:	f001 f986 	bl	80a2524 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
 80a1218:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a121c:	4629      	mov	r1, r5
 80a121e:	b280      	uxth	r0, r0
 80a1220:	f001 f991 	bl	80a2546 <digitalWrite>
 80a1224:	e766      	b.n	80a10f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
 80a1226:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1228:	b118      	cbz	r0, 80a1232 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
 80a122a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a122e:	f000 fc67 	bl	80a1b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 80a1232:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a1236:	2100      	movs	r1, #0
 80a1238:	b280      	uxth	r0, r0
 80a123a:	f001 f984 	bl	80a2546 <digitalWrite>
 80a123e:	e780      	b.n	80a1142 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
 80a1240:	4a1e      	ldr	r2, [pc, #120]	; (80a12bc <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
 80a1242:	4293      	cmp	r3, r2
 80a1244:	d10e      	bne.n	80a1264 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
 80a1246:	491e      	ldr	r1, [pc, #120]	; (80a12c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
 80a1248:	2203      	movs	r2, #3
 80a124a:	4620      	mov	r0, r4
 80a124c:	f7ff fe8b 	bl	80a0f66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
 80a1250:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a1254:	2b01      	cmp	r3, #1
 80a1256:	bf0c      	ite	eq
 80a1258:	219f      	moveq	r1, #159	; 0x9f
 80a125a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
 80a125c:	4620      	mov	r0, r4
 80a125e:	f7ff fe1b 	bl	80a0e98 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
 80a1262:	e795      	b.n	80a1190 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
 80a1264:	4a17      	ldr	r2, [pc, #92]	; (80a12c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
 80a1266:	4293      	cmp	r3, r2
 80a1268:	d192      	bne.n	80a1190 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
 80a126a:	4917      	ldr	r1, [pc, #92]	; (80a12c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
 80a126c:	2203      	movs	r2, #3
 80a126e:	4620      	mov	r0, r4
 80a1270:	f7ff fe79 	bl	80a0f66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
 80a1274:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a1278:	2b01      	cmp	r3, #1
 80a127a:	bf0c      	ite	eq
 80a127c:	2110      	moveq	r1, #16
 80a127e:	21af      	movne	r1, #175	; 0xaf
 80a1280:	e7ec      	b.n	80a125c <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
 80a1282:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a1286:	2101      	movs	r1, #1
 80a1288:	b280      	uxth	r0, r0
 80a128a:	f001 f95c 	bl	80a2546 <digitalWrite>
 80a128e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1290:	2800      	cmp	r0, #0
 80a1292:	d095      	beq.n	80a11c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
 80a1294:	f000 fc1a 	bl	80a1acc <_ZN8SPIClass14endTransactionEv>
 80a1298:	e792      	b.n	80a11c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
 80a129a:	bf00      	nop
 80a129c:	080a369c 	.word	0x080a369c
 80a12a0:	080a33dc 	.word	0x080a33dc
 80a12a4:	080a38e4 	.word	0x080a38e4
 80a12a8:	080a38e8 	.word	0x080a38e8
 80a12ac:	080a38ec 	.word	0x080a38ec
 80a12b0:	00200080 	.word	0x00200080
 80a12b4:	080a38f6 	.word	0x080a38f6
 80a12b8:	080a38f0 	.word	0x080a38f0
 80a12bc:	00400080 	.word	0x00400080
 80a12c0:	080a38fa 	.word	0x080a38fa
 80a12c4:	00100060 	.word	0x00100060
 80a12c8:	080a38fd 	.word	0x080a38fd

080a12cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a12cc:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 80a12ce:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a12d0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 80a12d4:	db3f      	blt.n	80a1356 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a12d6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80a12da:	4295      	cmp	r5, r2
 80a12dc:	dd3b      	ble.n	80a1356 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
    if(x < 0) { // Clip left
 80a12de:	2900      	cmp	r1, #0
      w += x;
 80a12e0:	bfbe      	ittt	lt
 80a12e2:	185b      	addlt	r3, r3, r1
      x  = 0;
 80a12e4:	2100      	movlt	r1, #0
      w += x;
 80a12e6:	b21b      	sxthlt	r3, r3
    if((x + w) > WIDTH) { // Clip right
 80a12e8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80a12ec:	185d      	adds	r5, r3, r1
 80a12ee:	42b5      	cmp	r5, r6
      w = (WIDTH - x);
 80a12f0:	bfc4      	itt	gt
 80a12f2:	1a73      	subgt	r3, r6, r1
 80a12f4:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
 80a12f6:	2b00      	cmp	r3, #0
 80a12f8:	dd2d      	ble.n	80a1356 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
 80a12fa:	10d5      	asrs	r5, r2, #3
 80a12fc:	fb06 1105 	mla	r1, r6, r5, r1
 80a1300:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      switch(color) {
 80a1302:	2c01      	cmp	r4, #1
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
 80a1304:	4401      	add	r1, r0
               mask = 1 << (y & 7);
 80a1306:	f002 0007 	and.w	r0, r2, #7
 80a130a:	f04f 0201 	mov.w	r2, #1
 80a130e:	fa02 f200 	lsl.w	r2, r2, r0
 80a1312:	b2d2      	uxtb	r2, r2
      switch(color) {
 80a1314:	d016      	beq.n	80a1344 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x78>
 80a1316:	2c02      	cmp	r4, #2
 80a1318:	d00b      	beq.n	80a1332 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x66>
 80a131a:	b9e4      	cbnz	r4, 80a1356 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
 80a131c:	43d2      	mvns	r2, r2
 80a131e:	440b      	add	r3, r1
 80a1320:	b2d2      	uxtb	r2, r2
 80a1322:	4299      	cmp	r1, r3
 80a1324:	d017      	beq.n	80a1356 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a1326:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a132a:	4010      	ands	r0, r2
 80a132c:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a1330:	e7f7      	b.n	80a1322 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x56>
 80a1332:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
 80a1334:	4299      	cmp	r1, r3
 80a1336:	d00e      	beq.n	80a1356 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a1338:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a133c:	4050      	eors	r0, r2
 80a133e:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a1342:	e7f7      	b.n	80a1334 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x68>
 80a1344:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
 80a1346:	4299      	cmp	r1, r3
 80a1348:	d005      	beq.n	80a1356 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 80a134a:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a134e:	4310      	orrs	r0, r2
 80a1350:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a1354:	e7f7      	b.n	80a1346 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x7a>
}
 80a1356:	bd70      	pop	{r4, r5, r6, pc}

080a1358 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
 80a1358:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 80a135a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
 80a135c:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 80a1360:	db76      	blt.n	80a1450 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
 80a1362:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a1366:	42a9      	cmp	r1, r5
 80a1368:	da72      	bge.n	80a1450 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
 80a136a:	2a00      	cmp	r2, #0
      __h += __y;
 80a136c:	bfbe      	ittt	lt
 80a136e:	18d2      	addlt	r2, r2, r3
 80a1370:	b213      	sxthlt	r3, r2
      __y = 0;
 80a1372:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
 80a1374:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a1378:	18d7      	adds	r7, r2, r3
 80a137a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
 80a137c:	bfc4      	itt	gt
 80a137e:	1aa3      	subgt	r3, r4, r2
 80a1380:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
 80a1382:	2b00      	cmp	r3, #0
 80a1384:	dd64      	ble.n	80a1450 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 80a1386:	f3c2 04c4 	ubfx	r4, r2, #3, #5
 80a138a:	fb05 1104 	mla	r1, r5, r4, r1
 80a138e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
      if(mod) {
 80a1390:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
 80a1394:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 80a1396:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
 80a139a:	d024      	beq.n	80a13e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
 80a139c:	f1c2 0208 	rsb	r2, r2, #8
 80a13a0:	b2d2      	uxtb	r2, r2
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a13a2:	4293      	cmp	r3, r2
 80a13a4:	bf38      	it	cc
 80a13a6:	f04f 0cff 	movcc.w	ip, #255	; 0xff
        uint8_t mask = pgm_read_byte(&premask[mod]);
 80a13aa:	4d2b      	ldr	r5, [pc, #172]	; (80a1458 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a13ac:	bf38      	it	cc
 80a13ae:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
 80a13b2:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a13b4:	bf3c      	itt	cc
 80a13b6:	fa4c fc0e 	asrcc.w	ip, ip, lr
 80a13ba:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
 80a13be:	2e01      	cmp	r6, #1
 80a13c0:	d007      	beq.n	80a13d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
 80a13c2:	2e02      	cmp	r6, #2
 80a13c4:	d02e      	beq.n	80a1424 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
 80a13c6:	b94e      	cbnz	r6, 80a13dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
 80a13c8:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a13cc:	ea2c 0505 	bic.w	r5, ip, r5
 80a13d0:	e003      	b.n	80a13da <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
 80a13d2:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a13d6:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
 80a13da:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
 80a13dc:	4293      	cmp	r3, r2
 80a13de:	d337      	bcc.n	80a1450 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
 80a13e0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80a13e4:	440c      	add	r4, r1
        h -= mod;
 80a13e6:	1a9a      	subs	r2, r3, r2
 80a13e8:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
 80a13ea:	2a07      	cmp	r2, #7
 80a13ec:	d90e      	bls.n	80a140c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
 80a13ee:	2e02      	cmp	r6, #2
 80a13f0:	d11d      	bne.n	80a142e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
 80a13f2:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
 80a13f4:	7821      	ldrb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
 80a13f6:	3b08      	subs	r3, #8
              *pBuf ^= 0xFF;  // Invert byte
 80a13f8:	43c9      	mvns	r1, r1
 80a13fa:	7021      	strb	r1, [r4, #0]
              pBuf  += WIDTH; // Advance pointer 8 rows
 80a13fc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
 80a1400:	b2db      	uxtb	r3, r3
            } while(h >= 8);
 80a1402:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
 80a1404:	440c      	add	r4, r1
            } while(h >= 8);
 80a1406:	d8f5      	bhi.n	80a13f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
 80a1408:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
 80a140c:	b302      	cbz	r2, 80a1450 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a140e:	4b13      	ldr	r3, [pc, #76]	; (80a145c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
 80a1410:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a1412:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
 80a1414:	d019      	beq.n	80a144a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
 80a1416:	2e02      	cmp	r6, #2
 80a1418:	d01b      	beq.n	80a1452 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
 80a141a:	b9ce      	cbnz	r6, 80a1450 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
 80a141c:	7822      	ldrb	r2, [r4, #0]
 80a141e:	ea22 0303 	bic.w	r3, r2, r3
 80a1422:	e014      	b.n	80a144e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
 80a1424:	f817 c001 	ldrb.w	ip, [r7, r1]
 80a1428:	ea85 050c 	eor.w	r5, r5, ip
 80a142c:	e7d5      	b.n	80a13da <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
 80a142e:	2e00      	cmp	r6, #0
 80a1430:	bf14      	ite	ne
 80a1432:	25ff      	movne	r5, #255	; 0xff
 80a1434:	2500      	moveq	r5, #0
 80a1436:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
 80a1438:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
 80a143a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
 80a143c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
 80a1440:	b2db      	uxtb	r3, r3
            } while(h >= 8);
 80a1442:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
 80a1444:	440c      	add	r4, r1
            } while(h >= 8);
 80a1446:	d8f7      	bhi.n	80a1438 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
 80a1448:	e7de      	b.n	80a1408 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
 80a144a:	7822      	ldrb	r2, [r4, #0]
 80a144c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
 80a144e:	7023      	strb	r3, [r4, #0]
}
 80a1450:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
 80a1452:	7822      	ldrb	r2, [r4, #0]
 80a1454:	4053      	eors	r3, r2
 80a1456:	e7fa      	b.n	80a144e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
 80a1458:	080a38d4 	.word	0x080a38d4
 80a145c:	080a38dc 	.word	0x080a38dc

080a1460 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a1460:	b430      	push	{r4, r5}
 80a1462:	4614      	mov	r4, r2
  switch(rotation) {
 80a1464:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a1466:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
 80a146a:	2a02      	cmp	r2, #2
 80a146c:	d00d      	beq.n	80a148a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
 80a146e:	2a03      	cmp	r2, #3
 80a1470:	d018      	beq.n	80a14a4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
 80a1472:	2a01      	cmp	r2, #1
 80a1474:	d111      	bne.n	80a149a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
 80a1476:	43e4      	mvns	r4, r4
 80a1478:	8902      	ldrh	r2, [r0, #8]
 80a147a:	4414      	add	r4, r2
 80a147c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
 80a147e:	460a      	mov	r2, r1
 80a1480:	9502      	str	r5, [sp, #8]
 80a1482:	4621      	mov	r1, r4
}
 80a1484:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
 80a1486:	f7ff bf67 	b.w	80a1358 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
 80a148a:	43e4      	mvns	r4, r4
 80a148c:	8942      	ldrh	r2, [r0, #10]
 80a148e:	4414      	add	r4, r2
    x -= (w-1);
 80a1490:	18ca      	adds	r2, r1, r3
 80a1492:	8901      	ldrh	r1, [r0, #8]
    y  = HEIGHT - y - 1;
 80a1494:	b224      	sxth	r4, r4
    x -= (w-1);
 80a1496:	1a89      	subs	r1, r1, r2
 80a1498:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
 80a149a:	4622      	mov	r2, r4
 80a149c:	9502      	str	r5, [sp, #8]
}
 80a149e:	bc30      	pop	{r4, r5}
  else      drawFastHLineInternal(x, y, w, color);
 80a14a0:	f7ff bf14 	b.w	80a12cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
 80a14a4:	18ca      	adds	r2, r1, r3
 80a14a6:	8941      	ldrh	r1, [r0, #10]
 80a14a8:	1a89      	subs	r1, r1, r2
 80a14aa:	b209      	sxth	r1, r1
    break;
 80a14ac:	e7e7      	b.n	80a147e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

080a14ae <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a14ae:	b430      	push	{r4, r5}
 80a14b0:	4614      	mov	r4, r2
  switch(rotation) {
 80a14b2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a14b4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
 80a14b8:	2a02      	cmp	r2, #2
 80a14ba:	d00d      	beq.n	80a14d8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
 80a14bc:	2a03      	cmp	r2, #3
 80a14be:	d018      	beq.n	80a14f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
 80a14c0:	2a01      	cmp	r2, #1
 80a14c2:	d111      	bne.n	80a14e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
 80a14c4:	18e2      	adds	r2, r4, r3
 80a14c6:	8904      	ldrh	r4, [r0, #8]
 80a14c8:	1aa4      	subs	r4, r4, r2
 80a14ca:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
 80a14cc:	460a      	mov	r2, r1
 80a14ce:	9502      	str	r5, [sp, #8]
 80a14d0:	4621      	mov	r1, r4
}
 80a14d2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
 80a14d4:	f7ff befa 	b.w	80a12cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
 80a14d8:	43c9      	mvns	r1, r1
 80a14da:	8902      	ldrh	r2, [r0, #8]
 80a14dc:	4411      	add	r1, r2
    y -= (h-1);
 80a14de:	18e2      	adds	r2, r4, r3
 80a14e0:	8944      	ldrh	r4, [r0, #10]
    x = WIDTH  - x - 1;
 80a14e2:	b209      	sxth	r1, r1
    y -= (h-1);
 80a14e4:	1aa4      	subs	r4, r4, r2
 80a14e6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
 80a14e8:	4622      	mov	r2, r4
 80a14ea:	9502      	str	r5, [sp, #8]
}
 80a14ec:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
 80a14ee:	f7ff bf33 	b.w	80a1358 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 80a14f2:	43c9      	mvns	r1, r1
 80a14f4:	8942      	ldrh	r2, [r0, #10]
 80a14f6:	4411      	add	r1, r2
 80a14f8:	b209      	sxth	r1, r1
    break;
 80a14fa:	e7e7      	b.n	80a14cc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

080a14fc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
 80a14fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1500:	4604      	mov	r4, r0
  TRANSACTION_START
 80a1502:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80a1504:	2800      	cmp	r0, #0
 80a1506:	d041      	beq.n	80a158c <_ZN16Adafruit_SSD13067displayEv+0x90>
 80a1508:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a150a:	f000 fee5 	bl	80a22d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
 80a150e:	2205      	movs	r2, #5
 80a1510:	4620      	mov	r0, r4
 80a1512:	4946      	ldr	r1, [pc, #280]	; (80a162c <_ZN16Adafruit_SSD13067displayEv+0x130>)
 80a1514:	f7ff fd27 	bl	80a0f66 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
 80a1518:	7a21      	ldrb	r1, [r4, #8]
 80a151a:	4620      	mov	r0, r4
 80a151c:	3901      	subs	r1, #1
 80a151e:	b2c9      	uxtb	r1, r1
 80a1520:	f7ff fcba 	bl	80a0e98 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  if(wire) { // I2C
 80a1524:	e9d4 060a 	ldrd	r0, r6, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a1528:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80a152c:	1ddd      	adds	r5, r3, #7
 80a152e:	bf48      	it	mi
 80a1530:	f103 050e 	addmi.w	r5, r3, #14
 80a1534:	8923      	ldrh	r3, [r4, #8]
 80a1536:	10ed      	asrs	r5, r5, #3
 80a1538:	435d      	muls	r5, r3
 80a153a:	b2ad      	uxth	r5, r5
  uint8_t *ptr   = buffer;
 80a153c:	4435      	add	r5, r6
  if(wire) { // I2C
 80a153e:	2800      	cmp	r0, #0
 80a1540:	d03a      	beq.n	80a15b8 <_ZN16Adafruit_SSD13067displayEv+0xbc>
    wire->beginTransmission(i2caddr);
 80a1542:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a1546:	f000 fed5 	bl	80a22f4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
 80a154a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a154c:	2140      	movs	r1, #64	; 0x40
 80a154e:	6803      	ldr	r3, [r0, #0]
    uint8_t bytesOut = 1;
 80a1550:	2701      	movs	r7, #1
    WIRE_WRITE((uint8_t)0x40);
 80a1552:	689b      	ldr	r3, [r3, #8]
 80a1554:	4798      	blx	r3
    while(count--) {
 80a1556:	42ae      	cmp	r6, r5
 80a1558:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a155a:	d024      	beq.n	80a15a6 <_ZN16Adafruit_SSD13067displayEv+0xaa>
      if(bytesOut >= WIRE_MAX) {
 80a155c:	2f1f      	cmp	r7, #31
 80a155e:	d90c      	bls.n	80a157a <_ZN16Adafruit_SSD13067displayEv+0x7e>
        wire->endTransmission();
 80a1560:	f000 fecf 	bl	80a2302 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 80a1564:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a1568:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a156a:	f000 fec3 	bl	80a22f4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
 80a156e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1570:	2140      	movs	r1, #64	; 0x40
 80a1572:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 80a1574:	2701      	movs	r7, #1
        WIRE_WRITE((uint8_t)0x40);
 80a1576:	689b      	ldr	r3, [r3, #8]
 80a1578:	4798      	blx	r3
      WIRE_WRITE(*ptr++);
 80a157a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a157c:	f816 1b01 	ldrb.w	r1, [r6], #1
 80a1580:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 80a1582:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
 80a1584:	689b      	ldr	r3, [r3, #8]
 80a1586:	4798      	blx	r3
      bytesOut++;
 80a1588:	b2ff      	uxtb	r7, r7
    while(count--) {
 80a158a:	e7e4      	b.n	80a1556 <_ZN16Adafruit_SSD13067displayEv+0x5a>
  TRANSACTION_START
 80a158c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a158e:	b118      	cbz	r0, 80a1598 <_ZN16Adafruit_SSD13067displayEv+0x9c>
 80a1590:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a1594:	f000 fab4 	bl	80a1b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 80a1598:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a159c:	2100      	movs	r1, #0
 80a159e:	b280      	uxth	r0, r0
 80a15a0:	f000 ffd1 	bl	80a2546 <digitalWrite>
 80a15a4:	e7b3      	b.n	80a150e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
 80a15a6:	f000 feac 	bl	80a2302 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
 80a15aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a15ac:	b378      	cbz	r0, 80a160e <_ZN16Adafruit_SSD13067displayEv+0x112>
 80a15ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
 80a15b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a15b4:	f000 be90 	b.w	80a22d8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
 80a15b8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 80a15bc:	2101      	movs	r1, #1
 80a15be:	b280      	uxth	r0, r0
 80a15c0:	f000 ffc1 	bl	80a2546 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
 80a15c4:	42ae      	cmp	r6, r5
 80a15c6:	d0f0      	beq.n	80a15aa <_ZN16Adafruit_SSD13067displayEv+0xae>
  if(spi) {
 80a15c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
 80a15ca:	f816 9b01 	ldrb.w	r9, [r6], #1
  if(spi) {
 80a15ce:	b118      	cbz	r0, 80a15d8 <_ZN16Adafruit_SSD13067displayEv+0xdc>
    (void)spi->transfer(d);
 80a15d0:	4649      	mov	r1, r9
 80a15d2:	f000 fb01 	bl	80a1bd8 <_ZN8SPIClass8transferEh>
 80a15d6:	e7f5      	b.n	80a15c4 <_ZN16Adafruit_SSD13067displayEv+0xc8>
 80a15d8:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a15da:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
 80a15de:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a15e2:	ea09 0108 	and.w	r1, r9, r8
 80a15e6:	b280      	uxth	r0, r0
 80a15e8:	f000 ffad 	bl	80a2546 <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a15ec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a15f0:	2101      	movs	r1, #1
 80a15f2:	b280      	uxth	r0, r0
 80a15f4:	f000 ffa7 	bl	80a2546 <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a15f8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a15fc:	2100      	movs	r1, #0
 80a15fe:	b280      	uxth	r0, r0
 80a1600:	f000 ffa1 	bl	80a2546 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a1604:	3f01      	subs	r7, #1
 80a1606:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80a160a:	d1e8      	bne.n	80a15de <_ZN16Adafruit_SSD13067displayEv+0xe2>
 80a160c:	e7da      	b.n	80a15c4 <_ZN16Adafruit_SSD13067displayEv+0xc8>
  TRANSACTION_END
 80a160e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a1612:	2101      	movs	r1, #1
 80a1614:	b280      	uxth	r0, r0
 80a1616:	f000 ff96 	bl	80a2546 <digitalWrite>
 80a161a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a161c:	b118      	cbz	r0, 80a1626 <_ZN16Adafruit_SSD13067displayEv+0x12a>
}
 80a161e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
 80a1622:	f000 ba53 	b.w	80a1acc <_ZN8SPIClass14endTransactionEv>
}
 80a1626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a162a:	bf00      	nop
 80a162c:	080a3900 	.word	0x080a3900

080a1630 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1630:	b508      	push	{r3, lr}
 80a1632:	4b02      	ldr	r3, [pc, #8]	; (80a163c <HAL_Pin_Mode+0xc>)
 80a1634:	681b      	ldr	r3, [r3, #0]
 80a1636:	689b      	ldr	r3, [r3, #8]
 80a1638:	9301      	str	r3, [sp, #4]
 80a163a:	bd08      	pop	{r3, pc}
 80a163c:	080601b0 	.word	0x080601b0

080a1640 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1640:	b508      	push	{r3, lr}
 80a1642:	4b02      	ldr	r3, [pc, #8]	; (80a164c <HAL_Get_Pin_Mode+0xc>)
 80a1644:	681b      	ldr	r3, [r3, #0]
 80a1646:	68db      	ldr	r3, [r3, #12]
 80a1648:	9301      	str	r3, [sp, #4]
 80a164a:	bd08      	pop	{r3, pc}
 80a164c:	080601b0 	.word	0x080601b0

080a1650 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1650:	b508      	push	{r3, lr}
 80a1652:	4b02      	ldr	r3, [pc, #8]	; (80a165c <HAL_GPIO_Write+0xc>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	691b      	ldr	r3, [r3, #16]
 80a1658:	9301      	str	r3, [sp, #4]
 80a165a:	bd08      	pop	{r3, pc}
 80a165c:	080601b0 	.word	0x080601b0

080a1660 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1660:	b508      	push	{r3, lr}
 80a1662:	4b02      	ldr	r3, [pc, #8]	; (80a166c <HAL_GPIO_Read+0xc>)
 80a1664:	681b      	ldr	r3, [r3, #0]
 80a1666:	695b      	ldr	r3, [r3, #20]
 80a1668:	9301      	str	r3, [sp, #4]
 80a166a:	bd08      	pop	{r3, pc}
 80a166c:	080601b0 	.word	0x080601b0

080a1670 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1670:	b508      	push	{r3, lr}
 80a1672:	4b02      	ldr	r3, [pc, #8]	; (80a167c <HAL_RNG_GetRandomNumber+0xc>)
 80a1674:	681b      	ldr	r3, [r3, #0]
 80a1676:	685b      	ldr	r3, [r3, #4]
 80a1678:	9301      	str	r3, [sp, #4]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	0806019c 	.word	0x0806019c

080a1680 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <HAL_Delay_Microseconds+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	68db      	ldr	r3, [r3, #12]
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	0806019c 	.word	0x0806019c

080a1690 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	695b      	ldr	r3, [r3, #20]
 80a1698:	9301      	str	r3, [sp, #4]
 80a169a:	bd08      	pop	{r3, pc}
 80a169c:	0806019c 	.word	0x0806019c

080a16a0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a16a0:	b508      	push	{r3, lr}
 80a16a2:	4b02      	ldr	r3, [pc, #8]	; (80a16ac <os_mutex_create+0xc>)
 80a16a4:	681b      	ldr	r3, [r3, #0]
 80a16a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16a8:	9301      	str	r3, [sp, #4]
 80a16aa:	bd08      	pop	{r3, pc}
 80a16ac:	080601d0 	.word	0x080601d0

080a16b0 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
 80a16b0:	b508      	push	{r3, lr}
 80a16b2:	4b02      	ldr	r3, [pc, #8]	; (80a16bc <os_mutex_destroy+0xc>)
 80a16b4:	681b      	ldr	r3, [r3, #0]
 80a16b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a16b8:	9301      	str	r3, [sp, #4]
 80a16ba:	bd08      	pop	{r3, pc}
 80a16bc:	080601d0 	.word	0x080601d0

080a16c0 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a16c0:	b508      	push	{r3, lr}
 80a16c2:	4b02      	ldr	r3, [pc, #8]	; (80a16cc <os_mutex_recursive_create+0xc>)
 80a16c4:	681b      	ldr	r3, [r3, #0]
 80a16c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a16c8:	9301      	str	r3, [sp, #4]
 80a16ca:	bd08      	pop	{r3, pc}
 80a16cc:	080601d0 	.word	0x080601d0

080a16d0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a16d0:	b508      	push	{r3, lr}
 80a16d2:	4b02      	ldr	r3, [pc, #8]	; (80a16dc <os_mutex_recursive_destroy+0xc>)
 80a16d4:	681b      	ldr	r3, [r3, #0]
 80a16d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a16d8:	9301      	str	r3, [sp, #4]
 80a16da:	bd08      	pop	{r3, pc}
 80a16dc:	080601d0 	.word	0x080601d0

080a16e0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a16e0:	b508      	push	{r3, lr}
 80a16e2:	4b02      	ldr	r3, [pc, #8]	; (80a16ec <os_mutex_recursive_lock+0xc>)
 80a16e4:	681b      	ldr	r3, [r3, #0]
 80a16e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a16e8:	9301      	str	r3, [sp, #4]
 80a16ea:	bd08      	pop	{r3, pc}
 80a16ec:	080601d0 	.word	0x080601d0

080a16f0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a16f0:	b508      	push	{r3, lr}
 80a16f2:	4b02      	ldr	r3, [pc, #8]	; (80a16fc <os_mutex_recursive_unlock+0xc>)
 80a16f4:	681b      	ldr	r3, [r3, #0]
 80a16f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a16f8:	9301      	str	r3, [sp, #4]
 80a16fa:	bd08      	pop	{r3, pc}
 80a16fc:	080601d0 	.word	0x080601d0

080a1700 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a1700:	b508      	push	{r3, lr}
 80a1702:	4b02      	ldr	r3, [pc, #8]	; (80a170c <hal_usart_init+0xc>)
 80a1704:	681b      	ldr	r3, [r3, #0]
 80a1706:	699b      	ldr	r3, [r3, #24]
 80a1708:	9301      	str	r3, [sp, #4]
 80a170a:	bd08      	pop	{r3, pc}
 80a170c:	080601c4 	.word	0x080601c4

080a1710 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1710:	b508      	push	{r3, lr}
 80a1712:	4b02      	ldr	r3, [pc, #8]	; (80a171c <hal_usart_write+0xc>)
 80a1714:	681b      	ldr	r3, [r3, #0]
 80a1716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1718:	9301      	str	r3, [sp, #4]
 80a171a:	bd08      	pop	{r3, pc}
 80a171c:	080601c4 	.word	0x080601c4

080a1720 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b02      	ldr	r3, [pc, #8]	; (80a172c <hal_usart_available+0xc>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	bd08      	pop	{r3, pc}
 80a172c:	080601c4 	.word	0x080601c4

080a1730 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <hal_usart_read+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601c4 	.word	0x080601c4

080a1740 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <hal_usart_peek+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601c4 	.word	0x080601c4

080a1750 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <hal_usart_flush+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601c4 	.word	0x080601c4

080a1760 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <hal_usart_is_enabled+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601c4 	.word	0x080601c4

080a1770 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <hal_usart_available_data_for_write+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	080601c4 	.word	0x080601c4

080a1780 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <hal_i2c_set_speed+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601ac 	.word	0x080601ac

080a1790 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <hal_i2c_begin+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601ac 	.word	0x080601ac

080a17a0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <hal_i2c_begin_transmission+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601ac 	.word	0x080601ac

080a17b0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <hal_i2c_end_transmission+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601ac 	.word	0x080601ac

080a17c0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <hal_i2c_write+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601ac 	.word	0x080601ac

080a17d0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <hal_i2c_available+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601ac 	.word	0x080601ac

080a17e0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <hal_i2c_read+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601ac 	.word	0x080601ac

080a17f0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <hal_i2c_peek+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601ac 	.word	0x080601ac

080a1800 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <hal_i2c_flush+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601ac 	.word	0x080601ac

080a1810 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <hal_i2c_is_enabled+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601ac 	.word	0x080601ac

080a1820 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b03      	ldr	r3, [pc, #12]	; (80a1830 <hal_i2c_init+0x10>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a182a:	9301      	str	r3, [sp, #4]
 80a182c:	bd08      	pop	{r3, pc}
 80a182e:	0000      	.short	0x0000
 80a1830:	080601ac 	.word	0x080601ac

080a1834 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a1834:	b508      	push	{r3, lr}
 80a1836:	4b02      	ldr	r3, [pc, #8]	; (80a1840 <hal_spi_begin+0xc>)
 80a1838:	681b      	ldr	r3, [r3, #0]
 80a183a:	681b      	ldr	r3, [r3, #0]
 80a183c:	9301      	str	r3, [sp, #4]
 80a183e:	bd08      	pop	{r3, pc}
 80a1840:	080601b4 	.word	0x080601b4

080a1844 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a1844:	b508      	push	{r3, lr}
 80a1846:	4b02      	ldr	r3, [pc, #8]	; (80a1850 <hal_spi_transfer+0xc>)
 80a1848:	681b      	ldr	r3, [r3, #0]
 80a184a:	695b      	ldr	r3, [r3, #20]
 80a184c:	9301      	str	r3, [sp, #4]
 80a184e:	bd08      	pop	{r3, pc}
 80a1850:	080601b4 	.word	0x080601b4

080a1854 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1854:	b508      	push	{r3, lr}
 80a1856:	4b02      	ldr	r3, [pc, #8]	; (80a1860 <hal_spi_init+0xc>)
 80a1858:	681b      	ldr	r3, [r3, #0]
 80a185a:	69db      	ldr	r3, [r3, #28]
 80a185c:	9301      	str	r3, [sp, #4]
 80a185e:	bd08      	pop	{r3, pc}
 80a1860:	080601b4 	.word	0x080601b4

080a1864 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1864:	b508      	push	{r3, lr}
 80a1866:	4b02      	ldr	r3, [pc, #8]	; (80a1870 <hal_spi_is_enabled+0xc>)
 80a1868:	681b      	ldr	r3, [r3, #0]
 80a186a:	6a1b      	ldr	r3, [r3, #32]
 80a186c:	9301      	str	r3, [sp, #4]
 80a186e:	bd08      	pop	{r3, pc}
 80a1870:	080601b4 	.word	0x080601b4

080a1874 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a1874:	b508      	push	{r3, lr}
 80a1876:	4b02      	ldr	r3, [pc, #8]	; (80a1880 <hal_spi_info+0xc>)
 80a1878:	681b      	ldr	r3, [r3, #0]
 80a187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a187c:	9301      	str	r3, [sp, #4]
 80a187e:	bd08      	pop	{r3, pc}
 80a1880:	080601b4 	.word	0x080601b4

080a1884 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a1884:	b508      	push	{r3, lr}
 80a1886:	4b02      	ldr	r3, [pc, #8]	; (80a1890 <hal_spi_set_settings+0xc>)
 80a1888:	681b      	ldr	r3, [r3, #0]
 80a188a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a188c:	9301      	str	r3, [sp, #4]
 80a188e:	bd08      	pop	{r3, pc}
 80a1890:	080601b4 	.word	0x080601b4

080a1894 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1894:	b508      	push	{r3, lr}
 80a1896:	4b02      	ldr	r3, [pc, #8]	; (80a18a0 <HAL_USB_USART_Init+0xc>)
 80a1898:	681b      	ldr	r3, [r3, #0]
 80a189a:	681b      	ldr	r3, [r3, #0]
 80a189c:	9301      	str	r3, [sp, #4]
 80a189e:	bd08      	pop	{r3, pc}
 80a18a0:	080601d8 	.word	0x080601d8

080a18a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a18a4:	b508      	push	{r3, lr}
 80a18a6:	4b02      	ldr	r3, [pc, #8]	; (80a18b0 <HAL_USB_USART_Begin+0xc>)
 80a18a8:	681b      	ldr	r3, [r3, #0]
 80a18aa:	685b      	ldr	r3, [r3, #4]
 80a18ac:	9301      	str	r3, [sp, #4]
 80a18ae:	bd08      	pop	{r3, pc}
 80a18b0:	080601d8 	.word	0x080601d8

080a18b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a18b4:	b508      	push	{r3, lr}
 80a18b6:	4b02      	ldr	r3, [pc, #8]	; (80a18c0 <HAL_USB_USART_Available_Data+0xc>)
 80a18b8:	681b      	ldr	r3, [r3, #0]
 80a18ba:	691b      	ldr	r3, [r3, #16]
 80a18bc:	9301      	str	r3, [sp, #4]
 80a18be:	bd08      	pop	{r3, pc}
 80a18c0:	080601d8 	.word	0x080601d8

080a18c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a18c4:	b508      	push	{r3, lr}
 80a18c6:	4b02      	ldr	r3, [pc, #8]	; (80a18d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a18c8:	681b      	ldr	r3, [r3, #0]
 80a18ca:	695b      	ldr	r3, [r3, #20]
 80a18cc:	9301      	str	r3, [sp, #4]
 80a18ce:	bd08      	pop	{r3, pc}
 80a18d0:	080601d8 	.word	0x080601d8

080a18d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a18d4:	b508      	push	{r3, lr}
 80a18d6:	4b02      	ldr	r3, [pc, #8]	; (80a18e0 <HAL_USB_USART_Receive_Data+0xc>)
 80a18d8:	681b      	ldr	r3, [r3, #0]
 80a18da:	699b      	ldr	r3, [r3, #24]
 80a18dc:	9301      	str	r3, [sp, #4]
 80a18de:	bd08      	pop	{r3, pc}
 80a18e0:	080601d8 	.word	0x080601d8

080a18e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a18e4:	b508      	push	{r3, lr}
 80a18e6:	4b02      	ldr	r3, [pc, #8]	; (80a18f0 <HAL_USB_USART_Send_Data+0xc>)
 80a18e8:	681b      	ldr	r3, [r3, #0]
 80a18ea:	69db      	ldr	r3, [r3, #28]
 80a18ec:	9301      	str	r3, [sp, #4]
 80a18ee:	bd08      	pop	{r3, pc}
 80a18f0:	080601d8 	.word	0x080601d8

080a18f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a18f4:	b508      	push	{r3, lr}
 80a18f6:	4b02      	ldr	r3, [pc, #8]	; (80a1900 <HAL_USB_USART_Flush_Data+0xc>)
 80a18f8:	681b      	ldr	r3, [r3, #0]
 80a18fa:	6a1b      	ldr	r3, [r3, #32]
 80a18fc:	9301      	str	r3, [sp, #4]
 80a18fe:	bd08      	pop	{r3, pc}
 80a1900:	080601d8 	.word	0x080601d8

080a1904 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1904:	b508      	push	{r3, lr}
 80a1906:	4b02      	ldr	r3, [pc, #8]	; (80a1910 <inet_gethostbyname+0xc>)
 80a1908:	681b      	ldr	r3, [r3, #0]
 80a190a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a190c:	9301      	str	r3, [sp, #4]
 80a190e:	bd08      	pop	{r3, pc}
 80a1910:	080601c0 	.word	0x080601c0

080a1914 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a1914:	b508      	push	{r3, lr}
 80a1916:	4b02      	ldr	r3, [pc, #8]	; (80a1920 <panic_+0xc>)
 80a1918:	681b      	ldr	r3, [r3, #0]
 80a191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a191c:	9301      	str	r3, [sp, #4]
 80a191e:	bd08      	pop	{r3, pc}
 80a1920:	080201a8 	.word	0x080201a8

080a1924 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1924:	b508      	push	{r3, lr}
 80a1926:	4b02      	ldr	r3, [pc, #8]	; (80a1930 <set_system_mode+0xc>)
 80a1928:	681b      	ldr	r3, [r3, #0]
 80a192a:	685b      	ldr	r3, [r3, #4]
 80a192c:	9301      	str	r3, [sp, #4]
 80a192e:	bd08      	pop	{r3, pc}
 80a1930:	080601a4 	.word	0x080601a4

080a1934 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1934:	b508      	push	{r3, lr}
 80a1936:	4b02      	ldr	r3, [pc, #8]	; (80a1940 <system_delay_ms+0xc>)
 80a1938:	681b      	ldr	r3, [r3, #0]
 80a193a:	695b      	ldr	r3, [r3, #20]
 80a193c:	9301      	str	r3, [sp, #4]
 80a193e:	bd08      	pop	{r3, pc}
 80a1940:	080601a4 	.word	0x080601a4

080a1944 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1944:	b508      	push	{r3, lr}
 80a1946:	4b02      	ldr	r3, [pc, #8]	; (80a1950 <system_thread_set_state+0xc>)
 80a1948:	681b      	ldr	r3, [r3, #0]
 80a194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a194c:	9301      	str	r3, [sp, #4]
 80a194e:	bd08      	pop	{r3, pc}
 80a1950:	080601a4 	.word	0x080601a4

080a1954 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1954:	b508      	push	{r3, lr}
 80a1956:	4b03      	ldr	r3, [pc, #12]	; (80a1964 <system_ctrl_set_app_request_handler+0x10>)
 80a1958:	681b      	ldr	r3, [r3, #0]
 80a195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a195e:	9301      	str	r3, [sp, #4]
 80a1960:	bd08      	pop	{r3, pc}
 80a1962:	0000      	.short	0x0000
 80a1964:	080601a4 	.word	0x080601a4

080a1968 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1968:	b508      	push	{r3, lr}
 80a196a:	4b03      	ldr	r3, [pc, #12]	; (80a1978 <system_ctrl_set_result+0x10>)
 80a196c:	681b      	ldr	r3, [r3, #0]
 80a196e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1972:	9301      	str	r3, [sp, #4]
 80a1974:	bd08      	pop	{r3, pc}
 80a1976:	0000      	.short	0x0000
 80a1978:	080601a4 	.word	0x080601a4

080a197c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a197c:	b508      	push	{r3, lr}
 80a197e:	4b02      	ldr	r3, [pc, #8]	; (80a1988 <network_connect+0xc>)
 80a1980:	681b      	ldr	r3, [r3, #0]
 80a1982:	685b      	ldr	r3, [r3, #4]
 80a1984:	9301      	str	r3, [sp, #4]
 80a1986:	bd08      	pop	{r3, pc}
 80a1988:	080601c8 	.word	0x080601c8

080a198c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a198c:	b508      	push	{r3, lr}
 80a198e:	4b02      	ldr	r3, [pc, #8]	; (80a1998 <network_connecting+0xc>)
 80a1990:	681b      	ldr	r3, [r3, #0]
 80a1992:	689b      	ldr	r3, [r3, #8]
 80a1994:	9301      	str	r3, [sp, #4]
 80a1996:	bd08      	pop	{r3, pc}
 80a1998:	080601c8 	.word	0x080601c8

080a199c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a199c:	b508      	push	{r3, lr}
 80a199e:	4b02      	ldr	r3, [pc, #8]	; (80a19a8 <network_disconnect+0xc>)
 80a19a0:	681b      	ldr	r3, [r3, #0]
 80a19a2:	68db      	ldr	r3, [r3, #12]
 80a19a4:	9301      	str	r3, [sp, #4]
 80a19a6:	bd08      	pop	{r3, pc}
 80a19a8:	080601c8 	.word	0x080601c8

080a19ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a19ac:	b508      	push	{r3, lr}
 80a19ae:	4b02      	ldr	r3, [pc, #8]	; (80a19b8 <network_ready+0xc>)
 80a19b0:	681b      	ldr	r3, [r3, #0]
 80a19b2:	691b      	ldr	r3, [r3, #16]
 80a19b4:	9301      	str	r3, [sp, #4]
 80a19b6:	bd08      	pop	{r3, pc}
 80a19b8:	080601c8 	.word	0x080601c8

080a19bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a19bc:	b508      	push	{r3, lr}
 80a19be:	4b02      	ldr	r3, [pc, #8]	; (80a19c8 <network_on+0xc>)
 80a19c0:	681b      	ldr	r3, [r3, #0]
 80a19c2:	695b      	ldr	r3, [r3, #20]
 80a19c4:	9301      	str	r3, [sp, #4]
 80a19c6:	bd08      	pop	{r3, pc}
 80a19c8:	080601c8 	.word	0x080601c8

080a19cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a19cc:	b508      	push	{r3, lr}
 80a19ce:	4b02      	ldr	r3, [pc, #8]	; (80a19d8 <network_off+0xc>)
 80a19d0:	681b      	ldr	r3, [r3, #0]
 80a19d2:	699b      	ldr	r3, [r3, #24]
 80a19d4:	9301      	str	r3, [sp, #4]
 80a19d6:	bd08      	pop	{r3, pc}
 80a19d8:	080601c8 	.word	0x080601c8

080a19dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a19dc:	b508      	push	{r3, lr}
 80a19de:	4b02      	ldr	r3, [pc, #8]	; (80a19e8 <network_listen+0xc>)
 80a19e0:	681b      	ldr	r3, [r3, #0]
 80a19e2:	69db      	ldr	r3, [r3, #28]
 80a19e4:	9301      	str	r3, [sp, #4]
 80a19e6:	bd08      	pop	{r3, pc}
 80a19e8:	080601c8 	.word	0x080601c8

080a19ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a19ec:	b508      	push	{r3, lr}
 80a19ee:	4b02      	ldr	r3, [pc, #8]	; (80a19f8 <network_listening+0xc>)
 80a19f0:	681b      	ldr	r3, [r3, #0]
 80a19f2:	6a1b      	ldr	r3, [r3, #32]
 80a19f4:	9301      	str	r3, [sp, #4]
 80a19f6:	bd08      	pop	{r3, pc}
 80a19f8:	080601c8 	.word	0x080601c8

080a19fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a19fc:	b508      	push	{r3, lr}
 80a19fe:	4b02      	ldr	r3, [pc, #8]	; (80a1a08 <network_set_listen_timeout+0xc>)
 80a1a00:	681b      	ldr	r3, [r3, #0]
 80a1a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1a04:	9301      	str	r3, [sp, #4]
 80a1a06:	bd08      	pop	{r3, pc}
 80a1a08:	080601c8 	.word	0x080601c8

080a1a0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1a0c:	b508      	push	{r3, lr}
 80a1a0e:	4b02      	ldr	r3, [pc, #8]	; (80a1a18 <network_get_listen_timeout+0xc>)
 80a1a10:	681b      	ldr	r3, [r3, #0]
 80a1a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1a14:	9301      	str	r3, [sp, #4]
 80a1a16:	bd08      	pop	{r3, pc}
 80a1a18:	080601c8 	.word	0x080601c8

080a1a1c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1a1c:	b508      	push	{r3, lr}
 80a1a1e:	4b02      	ldr	r3, [pc, #8]	; (80a1a28 <network_is_on+0xc>)
 80a1a20:	681b      	ldr	r3, [r3, #0]
 80a1a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1a24:	9301      	str	r3, [sp, #4]
 80a1a26:	bd08      	pop	{r3, pc}
 80a1a28:	080601c8 	.word	0x080601c8

080a1a2c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1a2c:	b508      	push	{r3, lr}
 80a1a2e:	4b02      	ldr	r3, [pc, #8]	; (80a1a38 <network_is_off+0xc>)
 80a1a30:	681b      	ldr	r3, [r3, #0]
 80a1a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1a34:	9301      	str	r3, [sp, #4]
 80a1a36:	bd08      	pop	{r3, pc}
 80a1a38:	080601c8 	.word	0x080601c8

080a1a3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1a3c:	b508      	push	{r3, lr}
 80a1a3e:	4b02      	ldr	r3, [pc, #8]	; (80a1a48 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1a40:	681b      	ldr	r3, [r3, #0]
 80a1a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1a44:	9301      	str	r3, [sp, #4]
 80a1a46:	bd08      	pop	{r3, pc}
 80a1a48:	080601cc 	.word	0x080601cc

080a1a4c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1a4c:	b508      	push	{r3, lr}
 80a1a4e:	4b02      	ldr	r3, [pc, #8]	; (80a1a58 <malloc+0xc>)
 80a1a50:	681b      	ldr	r3, [r3, #0]
 80a1a52:	681b      	ldr	r3, [r3, #0]
 80a1a54:	9301      	str	r3, [sp, #4]
 80a1a56:	bd08      	pop	{r3, pc}
 80a1a58:	080601a0 	.word	0x080601a0

080a1a5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1a5c:	b508      	push	{r3, lr}
 80a1a5e:	4b02      	ldr	r3, [pc, #8]	; (80a1a68 <free+0xc>)
 80a1a60:	681b      	ldr	r3, [r3, #0]
 80a1a62:	685b      	ldr	r3, [r3, #4]
 80a1a64:	9301      	str	r3, [sp, #4]
 80a1a66:	bd08      	pop	{r3, pc}
 80a1a68:	080601a0 	.word	0x080601a0

080a1a6c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1a6c:	b508      	push	{r3, lr}
 80a1a6e:	4b02      	ldr	r3, [pc, #8]	; (80a1a78 <vsnprintf+0xc>)
 80a1a70:	681b      	ldr	r3, [r3, #0]
 80a1a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1a74:	9301      	str	r3, [sp, #4]
 80a1a76:	bd08      	pop	{r3, pc}
 80a1a78:	080601a0 	.word	0x080601a0

080a1a7c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1a7c:	b508      	push	{r3, lr}
 80a1a7e:	4b02      	ldr	r3, [pc, #8]	; (80a1a88 <newlib_impure_ptr_callback+0xc>)
 80a1a80:	681b      	ldr	r3, [r3, #0]
 80a1a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1a84:	9301      	str	r3, [sp, #4]
 80a1a86:	bd08      	pop	{r3, pc}
 80a1a88:	080601a0 	.word	0x080601a0

080a1a8c <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a1a8c:	6880      	ldr	r0, [r0, #8]
 80a1a8e:	f7ff be2f 	b.w	80a16f0 <os_mutex_recursive_unlock>

080a1a92 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1a92:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a1a94:	2600      	movs	r6, #0
 80a1a96:	4604      	mov	r4, r0
 80a1a98:	460d      	mov	r5, r1
 80a1a9a:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a1a9e:	f7ff fe0f 	bl	80a16c0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1aa2:	4628      	mov	r0, r5
    _spi = spi;
 80a1aa4:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1aa6:	f7ff fed5 	bl	80a1854 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1aaa:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1aac:	6066      	str	r6, [r4, #4]
}
 80a1aae:	bd70      	pop	{r4, r5, r6, pc}

080a1ab0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a1ab0:	b510      	push	{r4, lr}
 80a1ab2:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 80a1ab4:	6880      	ldr	r0, [r0, #8]
 80a1ab6:	f7ff fe13 	bl	80a16e0 <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a1aba:	7820      	ldrb	r0, [r4, #0]
 80a1abc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1ac0:	f7ff feb8 	bl	80a1834 <hal_spi_begin>
        unlock();
 80a1ac4:	4620      	mov	r0, r4
 80a1ac6:	f7ff ffe1 	bl	80a1a8c <_ZN8SPIClass6unlockEv>
    }
}
 80a1aca:	bd10      	pop	{r4, pc}

080a1acc <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 80a1acc:	b508      	push	{r3, lr}
    // Release peripheral
    unlock();
 80a1ace:	f7ff ffdd 	bl	80a1a8c <_ZN8SPIClass6unlockEv>
}
 80a1ad2:	bd08      	pop	{r3, pc}

080a1ad4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a1ad4:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a1ad6:	2400      	movs	r4, #0
 80a1ad8:	0840      	lsrs	r0, r0, #1
 80a1ada:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1adc:	6818      	ldr	r0, [r3, #0]
 80a1ade:	b2e5      	uxtb	r5, r4
 80a1ae0:	4288      	cmp	r0, r1
 80a1ae2:	d906      	bls.n	80a1af2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1ae4:	3401      	adds	r4, #1
 80a1ae6:	2c08      	cmp	r4, #8
 80a1ae8:	d002      	beq.n	80a1af0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a1aea:	0840      	lsrs	r0, r0, #1
 80a1aec:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1aee:	e7f5      	b.n	80a1adc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1af0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a1af2:	4b02      	ldr	r3, [pc, #8]	; (80a1afc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1af4:	5d5b      	ldrb	r3, [r3, r5]
 80a1af6:	7013      	strb	r3, [r2, #0]
}
 80a1af8:	bd30      	pop	{r4, r5, pc}
 80a1afa:	bf00      	nop
 80a1afc:	080a3905 	.word	0x080a3905

080a1b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 80a1b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1b04:	4606      	mov	r6, r0
 80a1b06:	b08f      	sub	sp, #60	; 0x3c
 80a1b08:	6880      	ldr	r0, [r0, #8]
 80a1b0a:	460c      	mov	r4, r1
 80a1b0c:	f7ff fde8 	bl	80a16e0 <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1b10:	2214      	movs	r2, #20
 80a1b12:	2100      	movs	r1, #0
 80a1b14:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 80a1b16:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1b18:	f000 fdc0 	bl	80a269c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1b1c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a1b1e:	2200      	movs	r2, #0
 80a1b20:	4628      	mov	r0, r5
 80a1b22:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1b24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80a1b28:	f7ff fea4 	bl	80a1874 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80a1b2c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80a1b30:	b113      	cbz	r3, 80a1b38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80a1b32:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a1b36:	b155      	cbz	r5, 80a1b4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  SPISettings()
  {
 80a1b38:	2700      	movs	r7, #0
 80a1b3a:	2501      	movs	r5, #1
 80a1b3c:	46b9      	mov	r9, r7
 80a1b3e:	46b8      	mov	r8, r7
  virtual ~SPISettings() {
  }

  bool operator==(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1b40:	7923      	ldrb	r3, [r4, #4]
 80a1b42:	b15d      	cbz	r5, 80a1b5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80a1b44:	b1c3      	cbz	r3, 80a1b78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80a1b46:	2000      	movs	r0, #0
 80a1b48:	b00f      	add	sp, #60	; 0x3c
 80a1b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80a1b4e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a1b52:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a1b56:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 80a1b5a:	e7f1      	b.n	80a1b40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
      return true;

    if (default_ == other.default_ &&
 80a1b5c:	2b00      	cmp	r3, #0
 80a1b5e:	d135      	bne.n	80a1bcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 80a1b60:	68a3      	ldr	r3, [r4, #8]
 80a1b62:	4543      	cmp	r3, r8
 80a1b64:	d108      	bne.n	80a1b78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a1b66:	f88d 9020 	strb.w	r9, [sp, #32]
 80a1b6a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a1b6e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a1b72:	89a3      	ldrh	r3, [r4, #12]
 80a1b74:	429a      	cmp	r2, r3
 80a1b76:	d0e6      	beq.n	80a1b46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 80a1b78:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a1b7a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 80a1b7c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80a1b80:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a1b82:	ab04      	add	r3, sp, #16
 80a1b84:	f10d 020f 	add.w	r2, sp, #15
 80a1b88:	f7ff ffa4 	bl	80a1ad4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    return false;
  }

  bool operator<=(const SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1b8c:	7921      	ldrb	r1, [r4, #4]
 80a1b8e:	b985      	cbnz	r5, 80a1bb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
      return true;

    if (default_ == other.default_ &&
 80a1b90:	b989      	cbnz	r1, 80a1bb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a1b92:	68a3      	ldr	r3, [r4, #8]
 80a1b94:	4543      	cmp	r3, r8
 80a1b96:	d30e      	bcc.n	80a1bb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a1b98:	f88d 9020 	strb.w	r9, [sp, #32]
 80a1b9c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80a1ba0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a1ba4:	89a3      	ldrh	r3, [r4, #12]
 80a1ba6:	429a      	cmp	r2, r3
 80a1ba8:	d105      	bne.n	80a1bb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80a1baa:	9b04      	ldr	r3, [sp, #16]
 80a1bac:	4543      	cmp	r3, r8
 80a1bae:	d102      	bne.n	80a1bb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 80a1bb0:	e7c9      	b.n	80a1b46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 80a1bb2:	2900      	cmp	r1, #0
 80a1bb4:	d1f9      	bne.n	80a1baa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 80a1bb6:	2300      	movs	r3, #0
 80a1bb8:	9301      	str	r3, [sp, #4]
 80a1bba:	7b63      	ldrb	r3, [r4, #13]
 80a1bbc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a1bc0:	9300      	str	r3, [sp, #0]
 80a1bc2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a1bc4:	7830      	ldrb	r0, [r6, #0]
 80a1bc6:	f7ff fe5d 	bl	80a1884 <hal_spi_set_settings>
    return 0;
 80a1bca:	e7bc      	b.n	80a1b46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a1bcc:	462b      	mov	r3, r5
 80a1bce:	462a      	mov	r2, r5
 80a1bd0:	2101      	movs	r1, #1
 80a1bd2:	e9cd 5500 	strd	r5, r5, [sp]
 80a1bd6:	e7f5      	b.n	80a1bc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

080a1bd8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1bd8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a1bda:	7800      	ldrb	r0, [r0, #0]
 80a1bdc:	f7ff fe32 	bl	80a1844 <hal_spi_transfer>
}
 80a1be0:	b2c0      	uxtb	r0, r0
 80a1be2:	bd08      	pop	{r3, pc}

080a1be4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1be4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1be6:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1be8:	b510      	push	{r4, lr}
 80a1bea:	4b08      	ldr	r3, [pc, #32]	; (80a1c0c <_GLOBAL__sub_I_System+0x28>)
 80a1bec:	4c08      	ldr	r4, [pc, #32]	; (80a1c10 <_GLOBAL__sub_I_System+0x2c>)
 80a1bee:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a1bf0:	4b08      	ldr	r3, [pc, #32]	; (80a1c14 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a1bf2:	6020      	str	r0, [r4, #0]
 80a1bf4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a1bf6:	71a0      	strb	r0, [r4, #6]
 80a1bf8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1bfa:	f7ff fe93 	bl	80a1924 <set_system_mode>
SystemClass System;
 80a1bfe:	4620      	mov	r0, r4
 80a1c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a1c04:	4a04      	ldr	r2, [pc, #16]	; (80a1c18 <_GLOBAL__sub_I_System+0x34>)
 80a1c06:	4905      	ldr	r1, [pc, #20]	; (80a1c1c <_GLOBAL__sub_I_System+0x38>)
 80a1c08:	f000 bd22 	b.w	80a2650 <__aeabi_atexit>
 80a1c0c:	20000110 	.word	0x20000110
 80a1c10:	20000104 	.word	0x20000104
 80a1c14:	ffff0000 	.word	0xffff0000
 80a1c18:	20000074 	.word	0x20000074
 80a1c1c:	080a00c5 	.word	0x080a00c5

080a1c20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c22:	4606      	mov	r6, r0
 80a1c24:	460d      	mov	r5, r1
  size_t n = 0;
 80a1c26:	2400      	movs	r4, #0
 80a1c28:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1c2a:	42bd      	cmp	r5, r7
 80a1c2c:	d00c      	beq.n	80a1c48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1c2e:	6833      	ldr	r3, [r6, #0]
 80a1c30:	4630      	mov	r0, r6
 80a1c32:	689b      	ldr	r3, [r3, #8]
 80a1c34:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1c38:	4798      	blx	r3
     if (chunk>=0)
 80a1c3a:	1e03      	subs	r3, r0, #0
 80a1c3c:	db01      	blt.n	80a1c42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1c3e:	441c      	add	r4, r3
  while (size--) {
 80a1c40:	e7f3      	b.n	80a1c2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1c42:	2c00      	cmp	r4, #0
 80a1c44:	bf08      	it	eq
 80a1c46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1c48:	4620      	mov	r0, r4
 80a1c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1c4c:	b570      	push	{r4, r5, r6, lr}
 80a1c4e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1c50:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1c52:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1c54:	b149      	cbz	r1, 80a1c6a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1c56:	f000 fd4d 	bl	80a26f4 <strlen>
 80a1c5a:	682b      	ldr	r3, [r5, #0]
 80a1c5c:	4602      	mov	r2, r0
 80a1c5e:	4621      	mov	r1, r4
 80a1c60:	4628      	mov	r0, r5
    }
 80a1c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1c66:	68db      	ldr	r3, [r3, #12]
 80a1c68:	4718      	bx	r3
    }
 80a1c6a:	bd70      	pop	{r4, r5, r6, pc}

080a1c6c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a1c6c:	b508      	push	{r3, lr}
  return write(str);
 80a1c6e:	f7ff ffed 	bl	80a1c4c <_ZN5Print5writeEPKc>
}
 80a1c72:	bd08      	pop	{r3, pc}

080a1c74 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a1c74:	6803      	ldr	r3, [r0, #0]
 80a1c76:	689b      	ldr	r3, [r3, #8]
 80a1c78:	4718      	bx	r3

080a1c7a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c7a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1c7c:	210d      	movs	r1, #13
{
 80a1c7e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1c80:	f7ff fff8 	bl	80a1c74 <_ZN5Print5printEc>
  n += print('\n');
 80a1c84:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1c86:	4604      	mov	r4, r0
  n += print('\n');
 80a1c88:	4628      	mov	r0, r5
 80a1c8a:	f7ff fff3 	bl	80a1c74 <_ZN5Print5printEc>
  return n;
}
 80a1c8e:	4420      	add	r0, r4
 80a1c90:	bd38      	pop	{r3, r4, r5, pc}

080a1c92 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1c92:	b538      	push	{r3, r4, r5, lr}
 80a1c94:	4605      	mov	r5, r0
  return write(str);
 80a1c96:	f7ff ffd9 	bl	80a1c4c <_ZN5Print5writeEPKc>
 80a1c9a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a1c9c:	4628      	mov	r0, r5
 80a1c9e:	f7ff ffec 	bl	80a1c7a <_ZN5Print7printlnEv>
  return n;
}
 80a1ca2:	4420      	add	r0, r4
 80a1ca4:	bd38      	pop	{r3, r4, r5, pc}

080a1ca6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1ca6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1ca8:	2a01      	cmp	r2, #1
 80a1caa:	bf98      	it	ls
 80a1cac:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1cae:	b530      	push	{r4, r5, lr}
 80a1cb0:	b08b      	sub	sp, #44	; 0x2c
 80a1cb2:	460c      	mov	r4, r1
  *str = '\0';
 80a1cb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1cb8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1cba:	4625      	mov	r5, r4
 80a1cbc:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1cc0:	fb04 5312 	mls	r3, r4, r2, r5
 80a1cc4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1cc6:	2b09      	cmp	r3, #9
 80a1cc8:	bf94      	ite	ls
 80a1cca:	3330      	addls	r3, #48	; 0x30
 80a1ccc:	3337      	addhi	r3, #55	; 0x37
 80a1cce:	b2db      	uxtb	r3, r3
  } while(n);
 80a1cd0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1cd2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1cd6:	d9f0      	bls.n	80a1cba <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1cd8:	f7ff ffb8 	bl	80a1c4c <_ZN5Print5writeEPKc>
}
 80a1cdc:	b00b      	add	sp, #44	; 0x2c
 80a1cde:	bd30      	pop	{r4, r5, pc}

080a1ce0 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a1ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1ce4:	b086      	sub	sp, #24
 80a1ce6:	af00      	add	r7, sp, #0
 80a1ce8:	4605      	mov	r5, r0
 80a1cea:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a1cec:	1d38      	adds	r0, r7, #4
 80a1cee:	2114      	movs	r1, #20
{
 80a1cf0:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a1cf2:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a1cf4:	f7ff feba 	bl	80a1a6c <vsnprintf>

    if (n<bufsize)
 80a1cf8:	2813      	cmp	r0, #19
 80a1cfa:	d80e      	bhi.n	80a1d1a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a1cfc:	4628      	mov	r0, r5
 80a1cfe:	1d39      	adds	r1, r7, #4
 80a1d00:	f7ff ffa4 	bl	80a1c4c <_ZN5Print5writeEPKc>
 80a1d04:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a1d06:	b11e      	cbz	r6, 80a1d10 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a1d08:	4628      	mov	r0, r5
 80a1d0a:	f7ff ffb6 	bl	80a1c7a <_ZN5Print7printlnEv>
 80a1d0e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a1d10:	4620      	mov	r0, r4
 80a1d12:	3718      	adds	r7, #24
 80a1d14:	46bd      	mov	sp, r7
 80a1d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a1d1a:	f100 0308 	add.w	r3, r0, #8
 80a1d1e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a1d22:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a1d24:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a1d28:	4622      	mov	r2, r4
 80a1d2a:	1c41      	adds	r1, r0, #1
 80a1d2c:	683b      	ldr	r3, [r7, #0]
 80a1d2e:	4668      	mov	r0, sp
 80a1d30:	f7ff fe9c 	bl	80a1a6c <vsnprintf>
  return write(str);
 80a1d34:	4669      	mov	r1, sp
 80a1d36:	4628      	mov	r0, r5
 80a1d38:	f7ff ff88 	bl	80a1c4c <_ZN5Print5writeEPKc>
 80a1d3c:	4604      	mov	r4, r0
 80a1d3e:	46c5      	mov	sp, r8
 80a1d40:	e7e1      	b.n	80a1d06 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a1d42 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1d42:	2300      	movs	r3, #0
 80a1d44:	6840      	ldr	r0, [r0, #4]
 80a1d46:	461a      	mov	r2, r3
 80a1d48:	4619      	mov	r1, r3
 80a1d4a:	f7ff be37 	b.w	80a19bc <network_on>
	...

080a1d50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1d50:	4b01      	ldr	r3, [pc, #4]	; (80a1d58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1d52:	4a02      	ldr	r2, [pc, #8]	; (80a1d5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1d54:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1d56:	4770      	bx	lr
 80a1d58:	20000114 	.word	0x20000114
 80a1d5c:	080a390d 	.word	0x080a390d

080a1d60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1d60:	4b02      	ldr	r3, [pc, #8]	; (80a1d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1d62:	681a      	ldr	r2, [r3, #0]
 80a1d64:	4b02      	ldr	r3, [pc, #8]	; (80a1d70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1d66:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1d68:	4770      	bx	lr
 80a1d6a:	bf00      	nop
 80a1d6c:	2000000c 	.word	0x2000000c
 80a1d70:	20000118 	.word	0x20000118

080a1d74 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1d74:	2100      	movs	r1, #0
 80a1d76:	f7ff bddd 	b.w	80a1934 <system_delay_ms>

080a1d7a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1d7a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1d7c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a1d7e:	4604      	mov	r4, r0
      if (_M_manager)
 80a1d80:	b113      	cbz	r3, 80a1d88 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1d82:	2203      	movs	r2, #3
 80a1d84:	4601      	mov	r1, r0
 80a1d86:	4798      	blx	r3
    }
 80a1d88:	4620      	mov	r0, r4
 80a1d8a:	bd10      	pop	{r4, pc}

080a1d8c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1d8c:	b510      	push	{r4, lr}
 80a1d8e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1d90:	f7ff fff3 	bl	80a1d7a <_ZNSt14_Function_baseD1Ev>
 80a1d94:	4620      	mov	r0, r4
 80a1d96:	bd10      	pop	{r4, pc}

080a1d98 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1d98:	2300      	movs	r3, #0
 80a1d9a:	4803      	ldr	r0, [pc, #12]	; (80a1da8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1d9c:	4a03      	ldr	r2, [pc, #12]	; (80a1dac <_GLOBAL__sub_I_RGB+0x14>)
 80a1d9e:	4904      	ldr	r1, [pc, #16]	; (80a1db0 <_GLOBAL__sub_I_RGB+0x18>)
 80a1da0:	6083      	str	r3, [r0, #8]
 80a1da2:	f000 bc55 	b.w	80a2650 <__aeabi_atexit>
 80a1da6:	bf00      	nop
 80a1da8:	2000011c 	.word	0x2000011c
 80a1dac:	20000074 	.word	0x20000074
 80a1db0:	080a1d8d 	.word	0x080a1d8d

080a1db4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1db4:	4b01      	ldr	r3, [pc, #4]	; (80a1dbc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1db6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1db8:	4770      	bx	lr
 80a1dba:	bf00      	nop
 80a1dbc:	20000010 	.word	0x20000010

080a1dc0 <serialEventRun>:
{
 80a1dc0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1dc2:	4b13      	ldr	r3, [pc, #76]	; (80a1e10 <serialEventRun+0x50>)
 80a1dc4:	b143      	cbz	r3, 80a1dd8 <serialEventRun+0x18>
 80a1dc6:	f000 f969 	bl	80a209c <_Z16_fetch_usbserialv>
 80a1dca:	6803      	ldr	r3, [r0, #0]
 80a1dcc:	691b      	ldr	r3, [r3, #16]
 80a1dce:	4798      	blx	r3
 80a1dd0:	2800      	cmp	r0, #0
 80a1dd2:	dd01      	ble.n	80a1dd8 <serialEventRun+0x18>
        serialEvent();
 80a1dd4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1dd8:	4b0e      	ldr	r3, [pc, #56]	; (80a1e14 <serialEventRun+0x54>)
 80a1dda:	b143      	cbz	r3, 80a1dee <serialEventRun+0x2e>
 80a1ddc:	f000 fa16 	bl	80a220c <_Z22__fetch_global_Serial1v>
 80a1de0:	6803      	ldr	r3, [r0, #0]
 80a1de2:	691b      	ldr	r3, [r3, #16]
 80a1de4:	4798      	blx	r3
 80a1de6:	2800      	cmp	r0, #0
 80a1de8:	dd01      	ble.n	80a1dee <serialEventRun+0x2e>
        serialEvent1();
 80a1dea:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1dee:	4b0a      	ldr	r3, [pc, #40]	; (80a1e18 <serialEventRun+0x58>)
 80a1df0:	b10b      	cbz	r3, 80a1df6 <serialEventRun+0x36>
 80a1df2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1df6:	4b09      	ldr	r3, [pc, #36]	; (80a1e1c <serialEventRun+0x5c>)
 80a1df8:	b143      	cbz	r3, 80a1e0c <serialEventRun+0x4c>
 80a1dfa:	f000 f98d 	bl	80a2118 <_Z17_fetch_usbserial1v>
 80a1dfe:	6803      	ldr	r3, [r0, #0]
 80a1e00:	691b      	ldr	r3, [r3, #16]
 80a1e02:	4798      	blx	r3
 80a1e04:	2800      	cmp	r0, #0
 80a1e06:	dd01      	ble.n	80a1e0c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1e08:	f3af 8000 	nop.w
}
 80a1e0c:	bd08      	pop	{r3, pc}
 80a1e0e:	bf00      	nop
	...

080a1e20 <_post_loop>:
{
 80a1e20:	b508      	push	{r3, lr}
	serialEventRun();
 80a1e22:	f7ff ffcd 	bl	80a1dc0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1e26:	f7ff fc33 	bl	80a1690 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1e2a:	4b01      	ldr	r3, [pc, #4]	; (80a1e30 <_post_loop+0x10>)
 80a1e2c:	6018      	str	r0, [r3, #0]
}
 80a1e2e:	bd08      	pop	{r3, pc}
 80a1e30:	20000598 	.word	0x20000598

080a1e34 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1e34:	4802      	ldr	r0, [pc, #8]	; (80a1e40 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1e36:	4a03      	ldr	r2, [pc, #12]	; (80a1e44 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1e38:	4903      	ldr	r1, [pc, #12]	; (80a1e48 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1e3a:	1a12      	subs	r2, r2, r0
 80a1e3c:	f000 bc20 	b.w	80a2680 <memcpy>
 80a1e40:	40024000 	.word	0x40024000
 80a1e44:	40024004 	.word	0x40024004
 80a1e48:	080a3a70 	.word	0x080a3a70

080a1e4c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e4c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1e4e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e50:	461a      	mov	r2, r3
 80a1e52:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e56:	9300      	str	r3, [sp, #0]
 80a1e58:	f7ff fd86 	bl	80a1968 <system_ctrl_set_result>
}
 80a1e5c:	b003      	add	sp, #12
 80a1e5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1e64 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1e64:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1e66:	8843      	ldrh	r3, [r0, #2]
 80a1e68:	2b0a      	cmp	r3, #10
 80a1e6a:	d008      	beq.n	80a1e7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1e6c:	2b50      	cmp	r3, #80	; 0x50
 80a1e6e:	d10b      	bne.n	80a1e88 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1e70:	4b09      	ldr	r3, [pc, #36]	; (80a1e98 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1e72:	681b      	ldr	r3, [r3, #0]
 80a1e74:	b14b      	cbz	r3, 80a1e8a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1e76:	b003      	add	sp, #12
 80a1e78:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1e7c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1e7e:	f7ff ffe5 	bl	80a1e4c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1e82:	b003      	add	sp, #12
 80a1e84:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e88:	2300      	movs	r3, #0
 80a1e8a:	461a      	mov	r2, r3
 80a1e8c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e90:	9300      	str	r3, [sp, #0]
 80a1e92:	f7ff fd69 	bl	80a1968 <system_ctrl_set_result>
}
 80a1e96:	e7f4      	b.n	80a1e82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1e98:	20000130 	.word	0x20000130

080a1e9c <module_user_init_hook>:
{
 80a1e9c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1e9e:	4c12      	ldr	r4, [pc, #72]	; (80a1ee8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1ea0:	2100      	movs	r1, #0
 80a1ea2:	4812      	ldr	r0, [pc, #72]	; (80a1eec <module_user_init_hook+0x50>)
 80a1ea4:	f7ff fdea 	bl	80a1a7c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1ea8:	4d11      	ldr	r5, [pc, #68]	; (80a1ef0 <module_user_init_hook+0x54>)
 80a1eaa:	6823      	ldr	r3, [r4, #0]
 80a1eac:	42ab      	cmp	r3, r5
 80a1eae:	bf0c      	ite	eq
 80a1eb0:	2201      	moveq	r2, #1
 80a1eb2:	2200      	movne	r2, #0
 80a1eb4:	4b0f      	ldr	r3, [pc, #60]	; (80a1ef4 <module_user_init_hook+0x58>)
 80a1eb6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1eb8:	d002      	beq.n	80a1ec0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a1eba:	f7ff ffbb 	bl	80a1e34 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1ebe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1ec0:	f7ff fbd6 	bl	80a1670 <HAL_RNG_GetRandomNumber>
 80a1ec4:	4604      	mov	r4, r0
    srand(seed);
 80a1ec6:	f000 fbf1 	bl	80a26ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1eca:	4b0b      	ldr	r3, [pc, #44]	; (80a1ef8 <module_user_init_hook+0x5c>)
 80a1ecc:	b113      	cbz	r3, 80a1ed4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a1ece:	4620      	mov	r0, r4
 80a1ed0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1ed4:	2100      	movs	r1, #0
 80a1ed6:	4808      	ldr	r0, [pc, #32]	; (80a1ef8 <module_user_init_hook+0x5c>)
 80a1ed8:	f7ff fdb0 	bl	80a1a3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1ee0:	2100      	movs	r1, #0
 80a1ee2:	4806      	ldr	r0, [pc, #24]	; (80a1efc <module_user_init_hook+0x60>)
 80a1ee4:	f7ff bd36 	b.w	80a1954 <system_ctrl_set_app_request_handler>
 80a1ee8:	40024000 	.word	0x40024000
 80a1eec:	080a1db5 	.word	0x080a1db5
 80a1ef0:	9a271c1e 	.word	0x9a271c1e
 80a1ef4:	2000012c 	.word	0x2000012c
 80a1ef8:	00000000 	.word	0x00000000
 80a1efc:	080a1e65 	.word	0x080a1e65

080a1f00 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1f00:	4770      	bx	lr

080a1f02 <_ZN9IPAddressD0Ev>:
 80a1f02:	b510      	push	{r4, lr}
 80a1f04:	4604      	mov	r4, r0
 80a1f06:	2118      	movs	r1, #24
 80a1f08:	f000 fba7 	bl	80a265a <_ZdlPvj>
 80a1f0c:	4620      	mov	r0, r4
 80a1f0e:	bd10      	pop	{r4, pc}

080a1f10 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f12:	460e      	mov	r6, r1
 80a1f14:	2400      	movs	r4, #0
 80a1f16:	f100 0708 	add.w	r7, r0, #8
 80a1f1a:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1f1c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1f20:	220a      	movs	r2, #10
 80a1f22:	4630      	mov	r0, r6
 80a1f24:	f7ff febf 	bl	80a1ca6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1f28:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1f2a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1f2c:	d101      	bne.n	80a1f32 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1f2e:	4620      	mov	r0, r4
 80a1f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1f32:	2c00      	cmp	r4, #0
 80a1f34:	d0f2      	beq.n	80a1f1c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1f36:	212e      	movs	r1, #46	; 0x2e
 80a1f38:	4630      	mov	r0, r6
 80a1f3a:	f7ff fe9b 	bl	80a1c74 <_ZN5Print5printEc>
 80a1f3e:	4404      	add	r4, r0
 80a1f40:	e7ec      	b.n	80a1f1c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1f44 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1f44:	b510      	push	{r4, lr}
 80a1f46:	4604      	mov	r4, r0
 80a1f48:	4b04      	ldr	r3, [pc, #16]	; (80a1f5c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1f4a:	2211      	movs	r2, #17
 80a1f4c:	2100      	movs	r1, #0
 80a1f4e:	f840 3b04 	str.w	r3, [r0], #4
 80a1f52:	f000 fba3 	bl	80a269c <memset>
}
 80a1f56:	4620      	mov	r0, r4
 80a1f58:	bd10      	pop	{r4, pc}
 80a1f5a:	bf00      	nop
 80a1f5c:	080a3938 	.word	0x080a3938

080a1f60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1f60:	4603      	mov	r3, r0
 80a1f62:	4a07      	ldr	r2, [pc, #28]	; (80a1f80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1f64:	b510      	push	{r4, lr}
 80a1f66:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1f6a:	f101 0210 	add.w	r2, r1, #16
 80a1f6e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1f72:	4291      	cmp	r1, r2
 80a1f74:	f843 4b04 	str.w	r4, [r3], #4
 80a1f78:	d1f9      	bne.n	80a1f6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1f7a:	780a      	ldrb	r2, [r1, #0]
 80a1f7c:	701a      	strb	r2, [r3, #0]
}
 80a1f7e:	bd10      	pop	{r4, pc}
 80a1f80:	080a3938 	.word	0x080a3938

080a1f84 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1f84:	4a02      	ldr	r2, [pc, #8]	; (80a1f90 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1f86:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1f8a:	2204      	movs	r2, #4
 80a1f8c:	7502      	strb	r2, [r0, #20]
}
 80a1f8e:	4770      	bx	lr
 80a1f90:	080a3938 	.word	0x080a3938

080a1f94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1f94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1f96:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1f9a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1f9e:	2304      	movs	r3, #4
 80a1fa0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1fa4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1fa8:	6044      	str	r4, [r0, #4]
 80a1faa:	7503      	strb	r3, [r0, #20]
}
 80a1fac:	bd10      	pop	{r4, pc}
	...

080a1fb0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1fb2:	4d04      	ldr	r5, [pc, #16]	; (80a1fc4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1fb4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1fb6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1fba:	9500      	str	r5, [sp, #0]
 80a1fbc:	f7ff ffea 	bl	80a1f94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1fc0:	b003      	add	sp, #12
 80a1fc2:	bd30      	pop	{r4, r5, pc}
 80a1fc4:	080a3938 	.word	0x080a3938

080a1fc8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1fc8:	7441      	strb	r1, [r0, #17]
}
 80a1fca:	4770      	bx	lr

080a1fcc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1fcc:	4770      	bx	lr

080a1fce <_ZN9USBSerial4readEv>:
{
 80a1fce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1fd0:	2100      	movs	r1, #0
 80a1fd2:	7c00      	ldrb	r0, [r0, #16]
 80a1fd4:	f7ff fc7e 	bl	80a18d4 <HAL_USB_USART_Receive_Data>
}
 80a1fd8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1fdc:	bd08      	pop	{r3, pc}

080a1fde <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a1fde:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1fe0:	2101      	movs	r1, #1
 80a1fe2:	7c00      	ldrb	r0, [r0, #16]
 80a1fe4:	f7ff fc76 	bl	80a18d4 <HAL_USB_USART_Receive_Data>
}
 80a1fe8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1fec:	bd08      	pop	{r3, pc}

080a1fee <_ZN9USBSerial17availableForWriteEv>:
{
 80a1fee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1ff0:	7c00      	ldrb	r0, [r0, #16]
 80a1ff2:	f7ff fc67 	bl	80a18c4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1ff6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ffa:	bd08      	pop	{r3, pc}

080a1ffc <_ZN9USBSerial9availableEv>:
{
 80a1ffc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1ffe:	7c00      	ldrb	r0, [r0, #16]
 80a2000:	f7ff fc58 	bl	80a18b4 <HAL_USB_USART_Available_Data>
}
 80a2004:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2008:	bd08      	pop	{r3, pc}

080a200a <_ZN9USBSerial5writeEh>:
{
 80a200a:	b538      	push	{r3, r4, r5, lr}
 80a200c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a200e:	7c00      	ldrb	r0, [r0, #16]
{
 80a2010:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2012:	f7ff fc57 	bl	80a18c4 <HAL_USB_USART_Available_Data_For_Write>
 80a2016:	2800      	cmp	r0, #0
 80a2018:	dc01      	bgt.n	80a201e <_ZN9USBSerial5writeEh+0x14>
 80a201a:	7c60      	ldrb	r0, [r4, #17]
 80a201c:	b128      	cbz	r0, 80a202a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a201e:	4629      	mov	r1, r5
 80a2020:	7c20      	ldrb	r0, [r4, #16]
 80a2022:	f7ff fc5f 	bl	80a18e4 <HAL_USB_USART_Send_Data>
 80a2026:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a202a:	bd38      	pop	{r3, r4, r5, pc}

080a202c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a202c:	7c00      	ldrb	r0, [r0, #16]
 80a202e:	f7ff bc61 	b.w	80a18f4 <HAL_USB_USART_Flush_Data>

080a2032 <_ZN9USBSerialD0Ev>:
 80a2032:	b510      	push	{r4, lr}
 80a2034:	4604      	mov	r4, r0
 80a2036:	2114      	movs	r1, #20
 80a2038:	f000 fb0f 	bl	80a265a <_ZdlPvj>
 80a203c:	4620      	mov	r0, r4
 80a203e:	bd10      	pop	{r4, pc}

080a2040 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2040:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2046:	4604      	mov	r4, r0
 80a2048:	4608      	mov	r0, r1
 80a204a:	2100      	movs	r1, #0
 80a204c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2050:	4b04      	ldr	r3, [pc, #16]	; (80a2064 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2052:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2054:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2056:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2058:	4611      	mov	r1, r2
  _blocking = true;
 80a205a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a205c:	f7ff fc1a 	bl	80a1894 <HAL_USB_USART_Init>
}
 80a2060:	4620      	mov	r0, r4
 80a2062:	bd10      	pop	{r4, pc}
 80a2064:	080a394c 	.word	0x080a394c

080a2068 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2068:	2200      	movs	r2, #0
 80a206a:	7c00      	ldrb	r0, [r0, #16]
 80a206c:	f7ff bc1a 	b.w	80a18a4 <HAL_USB_USART_Begin>

080a2070 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2070:	b510      	push	{r4, lr}
 80a2072:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2074:	2214      	movs	r2, #20
 80a2076:	2100      	movs	r1, #0
 80a2078:	f000 fb10 	bl	80a269c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a207c:	4b05      	ldr	r3, [pc, #20]	; (80a2094 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a207e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2080:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2082:	4b05      	ldr	r3, [pc, #20]	; (80a2098 <_Z19acquireSerialBufferv+0x28>)
 80a2084:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2086:	f240 1301 	movw	r3, #257	; 0x101
 80a208a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a208c:	2381      	movs	r3, #129	; 0x81
 80a208e:	8223      	strh	r3, [r4, #16]
}
 80a2090:	bd10      	pop	{r4, pc}
 80a2092:	bf00      	nop
 80a2094:	20000164 	.word	0x20000164
 80a2098:	20000265 	.word	0x20000265

080a209c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a209c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a209e:	4d0f      	ldr	r5, [pc, #60]	; (80a20dc <_Z16_fetch_usbserialv+0x40>)
{
 80a20a0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a20a2:	a801      	add	r0, sp, #4
 80a20a4:	f7ff ffe4 	bl	80a2070 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a20a8:	7829      	ldrb	r1, [r5, #0]
 80a20aa:	f3bf 8f5b 	dmb	ish
 80a20ae:	f011 0401 	ands.w	r4, r1, #1
 80a20b2:	d110      	bne.n	80a20d6 <_Z16_fetch_usbserialv+0x3a>
 80a20b4:	4628      	mov	r0, r5
 80a20b6:	f7fd fffd 	bl	80a00b4 <__cxa_guard_acquire>
 80a20ba:	b160      	cbz	r0, 80a20d6 <_Z16_fetch_usbserialv+0x3a>
 80a20bc:	4621      	mov	r1, r4
 80a20be:	aa01      	add	r2, sp, #4
 80a20c0:	4807      	ldr	r0, [pc, #28]	; (80a20e0 <_Z16_fetch_usbserialv+0x44>)
 80a20c2:	f7ff ffbd 	bl	80a2040 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a20c6:	4628      	mov	r0, r5
 80a20c8:	f7fd fff9 	bl	80a00be <__cxa_guard_release>
 80a20cc:	4a05      	ldr	r2, [pc, #20]	; (80a20e4 <_Z16_fetch_usbserialv+0x48>)
 80a20ce:	4906      	ldr	r1, [pc, #24]	; (80a20e8 <_Z16_fetch_usbserialv+0x4c>)
 80a20d0:	4803      	ldr	r0, [pc, #12]	; (80a20e0 <_Z16_fetch_usbserialv+0x44>)
 80a20d2:	f000 fabd 	bl	80a2650 <__aeabi_atexit>
	return _usbserial;
}
 80a20d6:	4802      	ldr	r0, [pc, #8]	; (80a20e0 <_Z16_fetch_usbserialv+0x44>)
 80a20d8:	b007      	add	sp, #28
 80a20da:	bd30      	pop	{r4, r5, pc}
 80a20dc:	20000134 	.word	0x20000134
 80a20e0:	2000013c 	.word	0x2000013c
 80a20e4:	20000074 	.word	0x20000074
 80a20e8:	080a1fcd 	.word	0x080a1fcd

080a20ec <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a20ec:	b510      	push	{r4, lr}
 80a20ee:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a20f0:	2214      	movs	r2, #20
 80a20f2:	2100      	movs	r1, #0
 80a20f4:	f000 fad2 	bl	80a269c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a20f8:	4b05      	ldr	r3, [pc, #20]	; (80a2110 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a20fa:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a20fc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a20fe:	4b05      	ldr	r3, [pc, #20]	; (80a2114 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2100:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2102:	f240 1301 	movw	r3, #257	; 0x101
 80a2106:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2108:	2381      	movs	r3, #129	; 0x81
 80a210a:	8223      	strh	r3, [r4, #16]
}
 80a210c:	bd10      	pop	{r4, pc}
 80a210e:	bf00      	nop
 80a2110:	200002e6 	.word	0x200002e6
 80a2114:	200003e7 	.word	0x200003e7

080a2118 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2118:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a211a:	4c0f      	ldr	r4, [pc, #60]	; (80a2158 <_Z17_fetch_usbserial1v+0x40>)
{
 80a211c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a211e:	a801      	add	r0, sp, #4
 80a2120:	f7ff ffe4 	bl	80a20ec <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2124:	7823      	ldrb	r3, [r4, #0]
 80a2126:	f3bf 8f5b 	dmb	ish
 80a212a:	07db      	lsls	r3, r3, #31
 80a212c:	d410      	bmi.n	80a2150 <_Z17_fetch_usbserial1v+0x38>
 80a212e:	4620      	mov	r0, r4
 80a2130:	f7fd ffc0 	bl	80a00b4 <__cxa_guard_acquire>
 80a2134:	b160      	cbz	r0, 80a2150 <_Z17_fetch_usbserial1v+0x38>
 80a2136:	2101      	movs	r1, #1
 80a2138:	aa01      	add	r2, sp, #4
 80a213a:	4808      	ldr	r0, [pc, #32]	; (80a215c <_Z17_fetch_usbserial1v+0x44>)
 80a213c:	f7ff ff80 	bl	80a2040 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2140:	4620      	mov	r0, r4
 80a2142:	f7fd ffbc 	bl	80a00be <__cxa_guard_release>
 80a2146:	4a06      	ldr	r2, [pc, #24]	; (80a2160 <_Z17_fetch_usbserial1v+0x48>)
 80a2148:	4906      	ldr	r1, [pc, #24]	; (80a2164 <_Z17_fetch_usbserial1v+0x4c>)
 80a214a:	4804      	ldr	r0, [pc, #16]	; (80a215c <_Z17_fetch_usbserial1v+0x44>)
 80a214c:	f000 fa80 	bl	80a2650 <__aeabi_atexit>
  return _usbserial1;
}
 80a2150:	4802      	ldr	r0, [pc, #8]	; (80a215c <_Z17_fetch_usbserial1v+0x44>)
 80a2152:	b006      	add	sp, #24
 80a2154:	bd10      	pop	{r4, pc}
 80a2156:	bf00      	nop
 80a2158:	20000138 	.word	0x20000138
 80a215c:	20000150 	.word	0x20000150
 80a2160:	20000074 	.word	0x20000074
 80a2164:	080a1fcd 	.word	0x080a1fcd

080a2168 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a2168:	4770      	bx	lr

080a216a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a216a:	7441      	strb	r1, [r0, #17]
}
 80a216c:	4770      	bx	lr

080a216e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a216e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2170:	7c00      	ldrb	r0, [r0, #16]
 80a2172:	f7ff fafd 	bl	80a1770 <hal_usart_available_data_for_write>
}
 80a2176:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a217a:	bd08      	pop	{r3, pc}

080a217c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a217c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a217e:	7c00      	ldrb	r0, [r0, #16]
 80a2180:	f7ff face 	bl	80a1720 <hal_usart_available>
}
 80a2184:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2188:	bd08      	pop	{r3, pc}

080a218a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a218a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a218c:	7c00      	ldrb	r0, [r0, #16]
 80a218e:	f7ff fad7 	bl	80a1740 <hal_usart_peek>
}
 80a2192:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2196:	bd08      	pop	{r3, pc}

080a2198 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2198:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a219a:	7c00      	ldrb	r0, [r0, #16]
 80a219c:	f7ff fac8 	bl	80a1730 <hal_usart_read>
}
 80a21a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a21a4:	bd08      	pop	{r3, pc}

080a21a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a21a6:	7c00      	ldrb	r0, [r0, #16]
 80a21a8:	f7ff bad2 	b.w	80a1750 <hal_usart_flush>

080a21ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a21ac:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a21ae:	7c46      	ldrb	r6, [r0, #17]
{
 80a21b0:	4604      	mov	r4, r0
 80a21b2:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a21b4:	b12e      	cbz	r6, 80a21c2 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a21b6:	4629      	mov	r1, r5
 80a21b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a21ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a21be:	f7ff baa7 	b.w	80a1710 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a21c2:	7c00      	ldrb	r0, [r0, #16]
 80a21c4:	f7ff fad4 	bl	80a1770 <hal_usart_available_data_for_write>
 80a21c8:	2800      	cmp	r0, #0
 80a21ca:	dcf4      	bgt.n	80a21b6 <_ZN11USARTSerial5writeEh+0xa>
}
 80a21cc:	4630      	mov	r0, r6
 80a21ce:	bd70      	pop	{r4, r5, r6, pc}

080a21d0 <_ZN11USARTSerialD0Ev>:
 80a21d0:	b510      	push	{r4, lr}
 80a21d2:	4604      	mov	r4, r0
 80a21d4:	2114      	movs	r1, #20
 80a21d6:	f000 fa40 	bl	80a265a <_ZdlPvj>
 80a21da:	4620      	mov	r0, r4
 80a21dc:	bd10      	pop	{r4, pc}
	...

080a21e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a21e0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a21e4:	b510      	push	{r4, lr}
 80a21e6:	4604      	mov	r4, r0
 80a21e8:	4608      	mov	r0, r1
 80a21ea:	4611      	mov	r1, r2
 80a21ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a21f0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a21f4:	4a04      	ldr	r2, [pc, #16]	; (80a2208 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a21f6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a21f8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a21fa:	2201      	movs	r2, #1
 80a21fc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a21fe:	461a      	mov	r2, r3
 80a2200:	f7ff fa7e 	bl	80a1700 <hal_usart_init>
}
 80a2204:	4620      	mov	r0, r4
 80a2206:	bd10      	pop	{r4, pc}
 80a2208:	080a397c 	.word	0x080a397c

080a220c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a220c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a220e:	4d0d      	ldr	r5, [pc, #52]	; (80a2244 <_Z22__fetch_global_Serial1v+0x38>)
 80a2210:	7829      	ldrb	r1, [r5, #0]
 80a2212:	f3bf 8f5b 	dmb	ish
 80a2216:	f011 0401 	ands.w	r4, r1, #1
 80a221a:	d111      	bne.n	80a2240 <_Z22__fetch_global_Serial1v+0x34>
 80a221c:	4628      	mov	r0, r5
 80a221e:	f7fd ff49 	bl	80a00b4 <__cxa_guard_acquire>
 80a2222:	b168      	cbz	r0, 80a2240 <_Z22__fetch_global_Serial1v+0x34>
 80a2224:	4621      	mov	r1, r4
 80a2226:	4a08      	ldr	r2, [pc, #32]	; (80a2248 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2228:	4b08      	ldr	r3, [pc, #32]	; (80a224c <_Z22__fetch_global_Serial1v+0x40>)
 80a222a:	4809      	ldr	r0, [pc, #36]	; (80a2250 <_Z22__fetch_global_Serial1v+0x44>)
 80a222c:	f7ff ffd8 	bl	80a21e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2230:	4628      	mov	r0, r5
 80a2232:	f7fd ff44 	bl	80a00be <__cxa_guard_release>
 80a2236:	4a07      	ldr	r2, [pc, #28]	; (80a2254 <_Z22__fetch_global_Serial1v+0x48>)
 80a2238:	4907      	ldr	r1, [pc, #28]	; (80a2258 <_Z22__fetch_global_Serial1v+0x4c>)
 80a223a:	4805      	ldr	r0, [pc, #20]	; (80a2250 <_Z22__fetch_global_Serial1v+0x44>)
 80a223c:	f000 fa08 	bl	80a2650 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2240:	4803      	ldr	r0, [pc, #12]	; (80a2250 <_Z22__fetch_global_Serial1v+0x44>)
 80a2242:	bd38      	pop	{r3, r4, r5, pc}
 80a2244:	20000468 	.word	0x20000468
 80a2248:	2000046c 	.word	0x2000046c
 80a224c:	200004f0 	.word	0x200004f0
 80a2250:	20000574 	.word	0x20000574
 80a2254:	20000074 	.word	0x20000074
 80a2258:	080a2169 	.word	0x080a2169

080a225c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a225c:	4770      	bx	lr

080a225e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a225e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2260:	4606      	mov	r6, r0
 80a2262:	4615      	mov	r5, r2
 80a2264:	460c      	mov	r4, r1
 80a2266:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2268:	42bc      	cmp	r4, r7
 80a226a:	d006      	beq.n	80a227a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a226c:	6833      	ldr	r3, [r6, #0]
 80a226e:	4630      	mov	r0, r6
 80a2270:	689b      	ldr	r3, [r3, #8]
 80a2272:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2276:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a2278:	e7f6      	b.n	80a2268 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a227a:	4628      	mov	r0, r5
 80a227c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a227e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a227e:	2200      	movs	r2, #0
 80a2280:	7c00      	ldrb	r0, [r0, #16]
 80a2282:	f7ff ba9d 	b.w	80a17c0 <hal_i2c_write>

080a2286 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a2286:	2100      	movs	r1, #0
 80a2288:	7c00      	ldrb	r0, [r0, #16]
 80a228a:	f7ff baa1 	b.w	80a17d0 <hal_i2c_available>

080a228e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a228e:	2100      	movs	r1, #0
 80a2290:	7c00      	ldrb	r0, [r0, #16]
 80a2292:	f7ff baa5 	b.w	80a17e0 <hal_i2c_read>

080a2296 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a2296:	2100      	movs	r1, #0
 80a2298:	7c00      	ldrb	r0, [r0, #16]
 80a229a:	f7ff baa9 	b.w	80a17f0 <hal_i2c_peek>

080a229e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a229e:	2100      	movs	r1, #0
 80a22a0:	7c00      	ldrb	r0, [r0, #16]
 80a22a2:	f7ff baad 	b.w	80a1800 <hal_i2c_flush>

080a22a6 <_ZN7TwoWireD0Ev>:
 80a22a6:	b510      	push	{r4, lr}
 80a22a8:	4604      	mov	r4, r0
 80a22aa:	2114      	movs	r1, #20
 80a22ac:	f000 f9d5 	bl	80a265a <_ZdlPvj>
 80a22b0:	4620      	mov	r0, r4
 80a22b2:	bd10      	pop	{r4, pc}

080a22b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a22b4:	b510      	push	{r4, lr}
 80a22b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a22ba:	4604      	mov	r4, r0
 80a22bc:	4608      	mov	r0, r1
 80a22be:	2100      	movs	r1, #0
 80a22c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a22c4:	4b03      	ldr	r3, [pc, #12]	; (80a22d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a22c6:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a22c8:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a22ca:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a22cc:	f7ff faa8 	bl	80a1820 <hal_i2c_init>
}
 80a22d0:	4620      	mov	r0, r4
 80a22d2:	bd10      	pop	{r4, pc}
 80a22d4:	080a39ac 	.word	0x080a39ac

080a22d8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a22d8:	2200      	movs	r2, #0
 80a22da:	7c00      	ldrb	r0, [r0, #16]
 80a22dc:	f7ff ba50 	b.w	80a1780 <hal_i2c_set_speed>

080a22e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a22e0:	2300      	movs	r3, #0
 80a22e2:	7c00      	ldrb	r0, [r0, #16]
 80a22e4:	461a      	mov	r2, r3
 80a22e6:	4619      	mov	r1, r3
 80a22e8:	f7ff ba52 	b.w	80a1790 <hal_i2c_begin>

080a22ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a22ec:	2200      	movs	r2, #0
 80a22ee:	7c00      	ldrb	r0, [r0, #16]
 80a22f0:	f7ff ba56 	b.w	80a17a0 <hal_i2c_begin_transmission>

080a22f4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a22f4:	b2c9      	uxtb	r1, r1
 80a22f6:	f7ff bff9 	b.w	80a22ec <_ZN7TwoWire17beginTransmissionEh>

080a22fa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a22fa:	2200      	movs	r2, #0
 80a22fc:	7c00      	ldrb	r0, [r0, #16]
 80a22fe:	f7ff ba57 	b.w	80a17b0 <hal_i2c_end_transmission>

080a2302 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a2302:	2101      	movs	r1, #1
 80a2304:	f7ff bff9 	b.w	80a22fa <_ZN7TwoWire15endTransmissionEh>

080a2308 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2308:	2200      	movs	r2, #0
 80a230a:	6840      	ldr	r0, [r0, #4]
 80a230c:	4611      	mov	r1, r2
 80a230e:	f7ff bb4d 	b.w	80a19ac <network_ready>

080a2312 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2312:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2314:	4615      	mov	r5, r2
 80a2316:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2318:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a231a:	460e      	mov	r6, r1
 80a231c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a231e:	2100      	movs	r1, #0
 80a2320:	a803      	add	r0, sp, #12
 80a2322:	f000 f9bb 	bl	80a269c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2326:	4628      	mov	r0, r5
 80a2328:	f000 f9e4 	bl	80a26f4 <strlen>
 80a232c:	2700      	movs	r7, #0
 80a232e:	b281      	uxth	r1, r0
 80a2330:	6873      	ldr	r3, [r6, #4]
 80a2332:	4628      	mov	r0, r5
 80a2334:	9700      	str	r7, [sp, #0]
 80a2336:	aa03      	add	r2, sp, #12
 80a2338:	f7ff fae4 	bl	80a1904 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a233c:	b130      	cbz	r0, 80a234c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a233e:	4639      	mov	r1, r7
 80a2340:	4620      	mov	r0, r4
 80a2342:	f7ff fe1f 	bl	80a1f84 <_ZN9IPAddressC1Em>
    }
 80a2346:	4620      	mov	r0, r4
 80a2348:	b009      	add	sp, #36	; 0x24
 80a234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a234c:	4620      	mov	r0, r4
 80a234e:	a903      	add	r1, sp, #12
 80a2350:	f7ff fe06 	bl	80a1f60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2354:	e7f7      	b.n	80a2346 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2356 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2356:	2200      	movs	r2, #0
 80a2358:	6840      	ldr	r0, [r0, #4]
 80a235a:	4611      	mov	r1, r2
 80a235c:	f7ff bb46 	b.w	80a19ec <network_listening>

080a2360 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2360:	2200      	movs	r2, #0
 80a2362:	6840      	ldr	r0, [r0, #4]
 80a2364:	4611      	mov	r1, r2
 80a2366:	f7ff bb51 	b.w	80a1a0c <network_get_listen_timeout>

080a236a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a236a:	2200      	movs	r2, #0
 80a236c:	6840      	ldr	r0, [r0, #4]
 80a236e:	f7ff bb45 	b.w	80a19fc <network_set_listen_timeout>

080a2372 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2372:	2200      	movs	r2, #0
 80a2374:	6840      	ldr	r0, [r0, #4]
 80a2376:	f081 0101 	eor.w	r1, r1, #1
 80a237a:	f7ff bb2f 	b.w	80a19dc <network_listen>

080a237e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a237e:	2300      	movs	r3, #0
 80a2380:	6840      	ldr	r0, [r0, #4]
 80a2382:	461a      	mov	r2, r3
 80a2384:	4619      	mov	r1, r3
 80a2386:	f7ff bb21 	b.w	80a19cc <network_off>

080a238a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a238a:	2200      	movs	r2, #0
 80a238c:	6840      	ldr	r0, [r0, #4]
 80a238e:	4611      	mov	r1, r2
 80a2390:	f7ff bafc 	b.w	80a198c <network_connecting>

080a2394 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2394:	2200      	movs	r2, #0
 80a2396:	2102      	movs	r1, #2
 80a2398:	6840      	ldr	r0, [r0, #4]
 80a239a:	f7ff baff 	b.w	80a199c <network_disconnect>

080a239e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a239e:	2300      	movs	r3, #0
 80a23a0:	6840      	ldr	r0, [r0, #4]
 80a23a2:	461a      	mov	r2, r3
 80a23a4:	f7ff baea 	b.w	80a197c <network_connect>

080a23a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a23a8:	2204      	movs	r2, #4
 80a23aa:	4b02      	ldr	r3, [pc, #8]	; (80a23b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a23ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a23ae:	4a02      	ldr	r2, [pc, #8]	; (80a23b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a23b0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a23b2:	4770      	bx	lr
 80a23b4:	20000588 	.word	0x20000588
 80a23b8:	080a39d4 	.word	0x080a39d4

080a23bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a23bc:	2300      	movs	r3, #0
 80a23be:	6840      	ldr	r0, [r0, #4]
 80a23c0:	461a      	mov	r2, r3
 80a23c2:	f7ff badb 	b.w	80a197c <network_connect>

080a23c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a23c6:	2200      	movs	r2, #0
 80a23c8:	2102      	movs	r1, #2
 80a23ca:	6840      	ldr	r0, [r0, #4]
 80a23cc:	f7ff bae6 	b.w	80a199c <network_disconnect>

080a23d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a23d0:	2200      	movs	r2, #0
 80a23d2:	6840      	ldr	r0, [r0, #4]
 80a23d4:	4611      	mov	r1, r2
 80a23d6:	f7ff bad9 	b.w	80a198c <network_connecting>

080a23da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a23da:	2200      	movs	r2, #0
 80a23dc:	6840      	ldr	r0, [r0, #4]
 80a23de:	4611      	mov	r1, r2
 80a23e0:	f7ff bae4 	b.w	80a19ac <network_ready>

080a23e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a23e4:	2300      	movs	r3, #0
 80a23e6:	6840      	ldr	r0, [r0, #4]
 80a23e8:	461a      	mov	r2, r3
 80a23ea:	4619      	mov	r1, r3
 80a23ec:	f7ff bae6 	b.w	80a19bc <network_on>

080a23f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a23f0:	2300      	movs	r3, #0
 80a23f2:	6840      	ldr	r0, [r0, #4]
 80a23f4:	461a      	mov	r2, r3
 80a23f6:	4619      	mov	r1, r3
 80a23f8:	f7ff bae8 	b.w	80a19cc <network_off>

080a23fc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a23fc:	2100      	movs	r1, #0
 80a23fe:	6840      	ldr	r0, [r0, #4]
 80a2400:	f7ff bb0c 	b.w	80a1a1c <network_is_on>

080a2404 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2404:	2100      	movs	r1, #0
 80a2406:	6840      	ldr	r0, [r0, #4]
 80a2408:	f7ff bb10 	b.w	80a1a2c <network_is_off>

080a240c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a240c:	2200      	movs	r2, #0
 80a240e:	6840      	ldr	r0, [r0, #4]
 80a2410:	f081 0101 	eor.w	r1, r1, #1
 80a2414:	f7ff bae2 	b.w	80a19dc <network_listen>

080a2418 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2418:	2200      	movs	r2, #0
 80a241a:	6840      	ldr	r0, [r0, #4]
 80a241c:	f7ff baee 	b.w	80a19fc <network_set_listen_timeout>

080a2420 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2420:	2200      	movs	r2, #0
 80a2422:	6840      	ldr	r0, [r0, #4]
 80a2424:	4611      	mov	r1, r2
 80a2426:	f7ff baf1 	b.w	80a1a0c <network_get_listen_timeout>

080a242a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a242a:	2200      	movs	r2, #0
 80a242c:	6840      	ldr	r0, [r0, #4]
 80a242e:	4611      	mov	r1, r2
 80a2430:	f7ff badc 	b.w	80a19ec <network_listening>

080a2434 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2434:	b570      	push	{r4, r5, r6, lr}
 80a2436:	4615      	mov	r5, r2
 80a2438:	b08e      	sub	sp, #56	; 0x38
 80a243a:	4604      	mov	r4, r0
    IPAddress addr;
 80a243c:	a808      	add	r0, sp, #32
 80a243e:	f7ff fd81 	bl	80a1f44 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a2442:	2211      	movs	r2, #17
 80a2444:	2100      	movs	r1, #0
 80a2446:	a803      	add	r0, sp, #12
 80a2448:	f000 f928 	bl	80a269c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a244c:	2600      	movs	r6, #0
 80a244e:	4628      	mov	r0, r5
 80a2450:	f000 f950 	bl	80a26f4 <strlen>
 80a2454:	4b0a      	ldr	r3, [pc, #40]	; (80a2480 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2456:	9600      	str	r6, [sp, #0]
 80a2458:	b281      	uxth	r1, r0
 80a245a:	685b      	ldr	r3, [r3, #4]
 80a245c:	4628      	mov	r0, r5
 80a245e:	aa03      	add	r2, sp, #12
 80a2460:	f7ff fa50 	bl	80a1904 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2464:	b130      	cbz	r0, 80a2474 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2466:	4631      	mov	r1, r6
 80a2468:	4620      	mov	r0, r4
 80a246a:	f7ff fd8b 	bl	80a1f84 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a246e:	4620      	mov	r0, r4
 80a2470:	b00e      	add	sp, #56	; 0x38
 80a2472:	bd70      	pop	{r4, r5, r6, pc}
 80a2474:	4620      	mov	r0, r4
 80a2476:	a903      	add	r1, sp, #12
 80a2478:	f7ff fd72 	bl	80a1f60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a247c:	e7f7      	b.n	80a246e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a247e:	bf00      	nop
 80a2480:	20000588 	.word	0x20000588

080a2484 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2484:	4b02      	ldr	r3, [pc, #8]	; (80a2490 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2486:	4a03      	ldr	r2, [pc, #12]	; (80a2494 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2488:	601a      	str	r2, [r3, #0]
 80a248a:	2200      	movs	r2, #0
 80a248c:	605a      	str	r2, [r3, #4]

} // spark
 80a248e:	4770      	bx	lr
 80a2490:	20000590 	.word	0x20000590
 80a2494:	080a3a10 	.word	0x080a3a10

080a2498 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2498:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a249a:	b570      	push	{r4, r5, r6, lr}
 80a249c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a249e:	d901      	bls.n	80a24a4 <pinAvailable+0xc>
    return false;
 80a24a0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a24a2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a24a4:	f1a0 030d 	sub.w	r3, r0, #13
 80a24a8:	2b02      	cmp	r3, #2
 80a24aa:	d90b      	bls.n	80a24c4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a24ac:	2801      	cmp	r0, #1
 80a24ae:	d826      	bhi.n	80a24fe <pinAvailable+0x66>
 80a24b0:	f000 f8a6 	bl	80a2600 <_Z19__fetch_global_Wirev>
 80a24b4:	2100      	movs	r1, #0
 80a24b6:	7c00      	ldrb	r0, [r0, #16]
 80a24b8:	f7ff f9aa 	bl	80a1810 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a24bc:	f080 0001 	eor.w	r0, r0, #1
 80a24c0:	b2c0      	uxtb	r0, r0
 80a24c2:	e7ee      	b.n	80a24a2 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a24c4:	4e13      	ldr	r6, [pc, #76]	; (80a2514 <pinAvailable+0x7c>)
 80a24c6:	7831      	ldrb	r1, [r6, #0]
 80a24c8:	f3bf 8f5b 	dmb	ish
 80a24cc:	f011 0501 	ands.w	r5, r1, #1
 80a24d0:	d10f      	bne.n	80a24f2 <pinAvailable+0x5a>
 80a24d2:	4630      	mov	r0, r6
 80a24d4:	f7fd fdee 	bl	80a00b4 <__cxa_guard_acquire>
 80a24d8:	b158      	cbz	r0, 80a24f2 <pinAvailable+0x5a>
 80a24da:	4629      	mov	r1, r5
 80a24dc:	480e      	ldr	r0, [pc, #56]	; (80a2518 <pinAvailable+0x80>)
 80a24de:	f7ff fad8 	bl	80a1a92 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a24e2:	4630      	mov	r0, r6
 80a24e4:	f7fd fdeb 	bl	80a00be <__cxa_guard_release>
 80a24e8:	4a0c      	ldr	r2, [pc, #48]	; (80a251c <pinAvailable+0x84>)
 80a24ea:	490d      	ldr	r1, [pc, #52]	; (80a2520 <pinAvailable+0x88>)
 80a24ec:	480a      	ldr	r0, [pc, #40]	; (80a2518 <pinAvailable+0x80>)
 80a24ee:	f000 f8af 	bl	80a2650 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a24f2:	4b09      	ldr	r3, [pc, #36]	; (80a2518 <pinAvailable+0x80>)
 80a24f4:	7818      	ldrb	r0, [r3, #0]
 80a24f6:	f7ff f9b5 	bl	80a1864 <hal_spi_is_enabled>
 80a24fa:	2800      	cmp	r0, #0
 80a24fc:	d1d0      	bne.n	80a24a0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a24fe:	3c12      	subs	r4, #18
 80a2500:	2c01      	cmp	r4, #1
 80a2502:	d805      	bhi.n	80a2510 <pinAvailable+0x78>
 80a2504:	f7ff fe82 	bl	80a220c <_Z22__fetch_global_Serial1v>
 80a2508:	7c00      	ldrb	r0, [r0, #16]
 80a250a:	f7ff f929 	bl	80a1760 <hal_usart_is_enabled>
 80a250e:	e7d5      	b.n	80a24bc <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2510:	2001      	movs	r0, #1
 80a2512:	e7c6      	b.n	80a24a2 <pinAvailable+0xa>
 80a2514:	200000f4 	.word	0x200000f4
 80a2518:	200000f8 	.word	0x200000f8
 80a251c:	20000074 	.word	0x20000074
 80a2520:	080a0305 	.word	0x080a0305

080a2524 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2524:	2817      	cmp	r0, #23
{
 80a2526:	b538      	push	{r3, r4, r5, lr}
 80a2528:	4604      	mov	r4, r0
 80a252a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a252c:	d80a      	bhi.n	80a2544 <pinMode+0x20>
 80a252e:	29ff      	cmp	r1, #255	; 0xff
 80a2530:	d008      	beq.n	80a2544 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2532:	f7ff ffb1 	bl	80a2498 <pinAvailable>
 80a2536:	b128      	cbz	r0, 80a2544 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2538:	4629      	mov	r1, r5
 80a253a:	4620      	mov	r0, r4
}
 80a253c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2540:	f7ff b876 	b.w	80a1630 <HAL_Pin_Mode>
}
 80a2544:	bd38      	pop	{r3, r4, r5, pc}

080a2546 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2546:	b538      	push	{r3, r4, r5, lr}
 80a2548:	4604      	mov	r4, r0
 80a254a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a254c:	f7ff f878 	bl	80a1640 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2550:	28ff      	cmp	r0, #255	; 0xff
 80a2552:	d010      	beq.n	80a2576 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2554:	2806      	cmp	r0, #6
 80a2556:	d804      	bhi.n	80a2562 <digitalWrite+0x1c>
 80a2558:	234d      	movs	r3, #77	; 0x4d
 80a255a:	fa23 f000 	lsr.w	r0, r3, r0
 80a255e:	07c3      	lsls	r3, r0, #31
 80a2560:	d409      	bmi.n	80a2576 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2562:	4620      	mov	r0, r4
 80a2564:	f7ff ff98 	bl	80a2498 <pinAvailable>
 80a2568:	b128      	cbz	r0, 80a2576 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a256a:	4629      	mov	r1, r5
 80a256c:	4620      	mov	r0, r4
}
 80a256e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2572:	f7ff b86d 	b.w	80a1650 <HAL_GPIO_Write>
}
 80a2576:	bd38      	pop	{r3, r4, r5, pc}

080a2578 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2578:	b510      	push	{r4, lr}
 80a257a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a257c:	f7ff f860 	bl	80a1640 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2580:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a2582:	b2db      	uxtb	r3, r3
 80a2584:	2b01      	cmp	r3, #1
 80a2586:	d908      	bls.n	80a259a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2588:	4620      	mov	r0, r4
 80a258a:	f7ff ff85 	bl	80a2498 <pinAvailable>
 80a258e:	b120      	cbz	r0, 80a259a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2590:	4620      	mov	r0, r4
}
 80a2592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a2596:	f7ff b863 	b.w	80a1660 <HAL_GPIO_Read>
}
 80a259a:	2000      	movs	r0, #0
 80a259c:	bd10      	pop	{r4, pc}
	...

080a25a0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a25a0:	2300      	movs	r3, #0
 80a25a2:	b513      	push	{r0, r1, r4, lr}
 80a25a4:	4c07      	ldr	r4, [pc, #28]	; (80a25c4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a25a6:	461a      	mov	r2, r3
 80a25a8:	4619      	mov	r1, r3
 80a25aa:	4620      	mov	r0, r4
 80a25ac:	9300      	str	r3, [sp, #0]
 80a25ae:	f7ff fcff 	bl	80a1fb0 <_ZN9IPAddressC1Ehhhh>
 80a25b2:	4620      	mov	r0, r4
 80a25b4:	4a04      	ldr	r2, [pc, #16]	; (80a25c8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a25b6:	4905      	ldr	r1, [pc, #20]	; (80a25cc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a25b8:	b002      	add	sp, #8
 80a25ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a25be:	f000 b847 	b.w	80a2650 <__aeabi_atexit>
 80a25c2:	bf00      	nop
 80a25c4:	2000059c 	.word	0x2000059c
 80a25c8:	20000074 	.word	0x20000074
 80a25cc:	080a1f01 	.word	0x080a1f01

080a25d0 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a25d0:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a25d2:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a25d4:	2520      	movs	r5, #32
 80a25d6:	8043      	strh	r3, [r0, #2]
 80a25d8:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a25da:	4e08      	ldr	r6, [pc, #32]	; (80a25fc <_Z17acquireWireBufferv+0x2c>)
{
 80a25dc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a25de:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a25e0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a25e2:	6085      	str	r5, [r0, #8]
 80a25e4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a25e6:	4628      	mov	r0, r5
 80a25e8:	f000 f839 	bl	80a265e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a25ec:	4631      	mov	r1, r6
	};
 80a25ee:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a25f0:	4628      	mov	r0, r5
 80a25f2:	f000 f834 	bl	80a265e <_ZnajRKSt9nothrow_t>
	};
 80a25f6:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a25f8:	4620      	mov	r0, r4
 80a25fa:	bd70      	pop	{r4, r5, r6, pc}
 80a25fc:	080a3a44 	.word	0x080a3a44

080a2600 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2600:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2602:	4d0f      	ldr	r5, [pc, #60]	; (80a2640 <_Z19__fetch_global_Wirev+0x40>)
{
 80a2604:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2606:	7829      	ldrb	r1, [r5, #0]
 80a2608:	f3bf 8f5b 	dmb	ish
 80a260c:	f011 0401 	ands.w	r4, r1, #1
 80a2610:	d113      	bne.n	80a263a <_Z19__fetch_global_Wirev+0x3a>
 80a2612:	4628      	mov	r0, r5
 80a2614:	f7fd fd4e 	bl	80a00b4 <__cxa_guard_acquire>
 80a2618:	b178      	cbz	r0, 80a263a <_Z19__fetch_global_Wirev+0x3a>
 80a261a:	a801      	add	r0, sp, #4
 80a261c:	f7ff ffd8 	bl	80a25d0 <_Z17acquireWireBufferv>
 80a2620:	4621      	mov	r1, r4
 80a2622:	aa01      	add	r2, sp, #4
 80a2624:	4807      	ldr	r0, [pc, #28]	; (80a2644 <_Z19__fetch_global_Wirev+0x44>)
 80a2626:	f7ff fe45 	bl	80a22b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a262a:	4628      	mov	r0, r5
 80a262c:	f7fd fd47 	bl	80a00be <__cxa_guard_release>
 80a2630:	4a05      	ldr	r2, [pc, #20]	; (80a2648 <_Z19__fetch_global_Wirev+0x48>)
 80a2632:	4906      	ldr	r1, [pc, #24]	; (80a264c <_Z19__fetch_global_Wirev+0x4c>)
 80a2634:	4803      	ldr	r0, [pc, #12]	; (80a2644 <_Z19__fetch_global_Wirev+0x44>)
 80a2636:	f000 f80b 	bl	80a2650 <__aeabi_atexit>
	return wire;
}
 80a263a:	4802      	ldr	r0, [pc, #8]	; (80a2644 <_Z19__fetch_global_Wirev+0x44>)
 80a263c:	b007      	add	sp, #28
 80a263e:	bd30      	pop	{r4, r5, pc}
 80a2640:	200005b4 	.word	0x200005b4
 80a2644:	200005b8 	.word	0x200005b8
 80a2648:	20000074 	.word	0x20000074
 80a264c:	080a225d 	.word	0x080a225d

080a2650 <__aeabi_atexit>:
 80a2650:	460b      	mov	r3, r1
 80a2652:	4601      	mov	r1, r0
 80a2654:	4618      	mov	r0, r3
 80a2656:	f000 b805 	b.w	80a2664 <__cxa_atexit>

080a265a <_ZdlPvj>:
 80a265a:	f7fd bd1e 	b.w	80a009a <_ZdlPv>

080a265e <_ZnajRKSt9nothrow_t>:
 80a265e:	f7fd bd1a 	b.w	80a0096 <_Znaj>
	...

080a2664 <__cxa_atexit>:
 80a2664:	b510      	push	{r4, lr}
 80a2666:	4604      	mov	r4, r0
 80a2668:	4804      	ldr	r0, [pc, #16]	; (80a267c <__cxa_atexit+0x18>)
 80a266a:	4613      	mov	r3, r2
 80a266c:	b120      	cbz	r0, 80a2678 <__cxa_atexit+0x14>
 80a266e:	460a      	mov	r2, r1
 80a2670:	2002      	movs	r0, #2
 80a2672:	4621      	mov	r1, r4
 80a2674:	f3af 8000 	nop.w
 80a2678:	bd10      	pop	{r4, pc}
 80a267a:	bf00      	nop
 80a267c:	00000000 	.word	0x00000000

080a2680 <memcpy>:
 80a2680:	440a      	add	r2, r1
 80a2682:	4291      	cmp	r1, r2
 80a2684:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2688:	d100      	bne.n	80a268c <memcpy+0xc>
 80a268a:	4770      	bx	lr
 80a268c:	b510      	push	{r4, lr}
 80a268e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2692:	4291      	cmp	r1, r2
 80a2694:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2698:	d1f9      	bne.n	80a268e <memcpy+0xe>
 80a269a:	bd10      	pop	{r4, pc}

080a269c <memset>:
 80a269c:	4603      	mov	r3, r0
 80a269e:	4402      	add	r2, r0
 80a26a0:	4293      	cmp	r3, r2
 80a26a2:	d100      	bne.n	80a26a6 <memset+0xa>
 80a26a4:	4770      	bx	lr
 80a26a6:	f803 1b01 	strb.w	r1, [r3], #1
 80a26aa:	e7f9      	b.n	80a26a0 <memset+0x4>

080a26ac <srand>:
 80a26ac:	b538      	push	{r3, r4, r5, lr}
 80a26ae:	4b0d      	ldr	r3, [pc, #52]	; (80a26e4 <srand+0x38>)
 80a26b0:	4604      	mov	r4, r0
 80a26b2:	681d      	ldr	r5, [r3, #0]
 80a26b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a26b6:	b97b      	cbnz	r3, 80a26d8 <srand+0x2c>
 80a26b8:	2018      	movs	r0, #24
 80a26ba:	f7ff f9c7 	bl	80a1a4c <malloc>
 80a26be:	4a0a      	ldr	r2, [pc, #40]	; (80a26e8 <srand+0x3c>)
 80a26c0:	4b0a      	ldr	r3, [pc, #40]	; (80a26ec <srand+0x40>)
 80a26c2:	63a8      	str	r0, [r5, #56]	; 0x38
 80a26c4:	e9c0 2300 	strd	r2, r3, [r0]
 80a26c8:	4b09      	ldr	r3, [pc, #36]	; (80a26f0 <srand+0x44>)
 80a26ca:	2201      	movs	r2, #1
 80a26cc:	6083      	str	r3, [r0, #8]
 80a26ce:	230b      	movs	r3, #11
 80a26d0:	8183      	strh	r3, [r0, #12]
 80a26d2:	2300      	movs	r3, #0
 80a26d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a26d8:	2200      	movs	r2, #0
 80a26da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a26dc:	611c      	str	r4, [r3, #16]
 80a26de:	615a      	str	r2, [r3, #20]
 80a26e0:	bd38      	pop	{r3, r4, r5, pc}
 80a26e2:	bf00      	nop
 80a26e4:	20000010 	.word	0x20000010
 80a26e8:	abcd330e 	.word	0xabcd330e
 80a26ec:	e66d1234 	.word	0xe66d1234
 80a26f0:	0005deec 	.word	0x0005deec

080a26f4 <strlen>:
 80a26f4:	4603      	mov	r3, r0
 80a26f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a26fa:	2a00      	cmp	r2, #0
 80a26fc:	d1fb      	bne.n	80a26f6 <strlen+0x2>
 80a26fe:	1a18      	subs	r0, r3, r0
 80a2700:	3801      	subs	r0, #1
 80a2702:	4770      	bx	lr

080a2704 <dynalib_user>:
 80a2704:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2714:	0000 0000 6843 6f6f 6573 4c20 7665 6c65     ....Choose Level
 80a2724:	4120 3d20 4520 7361 2079 6f6d 6564 202c      A = Easy mode, 
 80a2734:	2042 203d 6f4e 6d72 6c61 6d20 646f 2c65     B = Normal mode,
 80a2744:	4320 3d20 4820 7261 2064 6f6d 6564            C = Hard mode.

080a2753 <_ZL12bitmap_1og4o>:
 80a2753:	ffff ffff ffff ffff ffff ffff e0f0 0000     ................
 80a2763:	00e0 0000 0000 0070 7000 00e0 e000 0000     ......p..p......
 80a2773:	0000 7000 0000 e070 0000 00e0 0000 0000     ...p..p.........
 80a2783:	0070 7000 00e0 e000 0000 0000 7000 0000     p..p.........p..
 80a2793:	e070 0000 00e0 0000 0000 0070 7000 00e0     p.........p..p..
 80a27a3:	e000 0000 0000 7000 0000 e070 0000 00e0     .......p..p.....
 80a27b3:	0000 0000 0070 7000 00e0 6000 0000 00f0     ....p..p...`....
 80a27c3:	6000 0000 e070 0000 0000 f000 0000 0000     .`..p...........
 80a27d3:	0000 00e0 0000 0000 00f0 0000 0000 e000     ................
 80a27e3:	0000 0000 f000 0000 0000 0000 00e0 0000     ................
 80a27f3:	0000 00f0 0000 0000 e000 0000 0000 f000     ................
 80a2803:	0000 0000 0000 00e0 0000 0000 00f0 0000     ................
 80a2813:	0000 f700 ffff 0000 f000 0000 ff3f 80ff     ............?...
 80a2823:	ff1f e0fd 0000 00f0 3f00 feff 00f0 0000     .........?......
 80a2833:	00e0 f000 0000 0000 7000 0000 e000 0000     .........p......
 80a2843:	00f0 0000 0000 0070 0000 00e0 f000 0000     ......p.........
 80a2853:	0000 7000 0000 e000 0000 00f0 0000 0000     ...p............
 80a2863:	0070 0000 00e0 f000 0000 0000 7000 0000     p............p..
 80a2873:	e000 0000 00f0 0000 0000 e070 0000 00e0     ..........p.....
 80a2883:	ff00 ffff 00e0 7000 00e0 0000 0000 00f0     .......p........
 80a2893:	0000 0000 e070 0000 0000 f000 0000 0000     ....p...........
 80a28a3:	7000 00e0 0000 0000 00f0 0000 0000 e070     .p............p.
 80a28b3:	0000 0000 f000 0000 0000 7000 00e0 0000     ...........p....
 80a28c3:	0000 00f0 0000 0000 e070 0000 0000 f000     ........p.......
 80a28d3:	0000 0000 7000 00e0 0000 0000 00f0 0000     .....p..........
 80a28e3:	0000 ff70 ffff ffff ffff ffff ffff f0ff     ..p.............

080a28f3 <_ZL13bitmap_4bnjwe>:
 80a28f3:	ff07 ffff ffff ffff ffff feff 3f00 ffff     .............?..
 80a2903:	ffff ffff ffff ffff c0ff 003c 0000 0000     ..........<.....
 80a2913:	0000 1e00 0100 38c0 ff3f f0ff ff7f fcff     .......8?.......
 80a2923:	ff1f c0c1 3c38 0000 00f0 3c00 0000 c103     ....8<.....<....
 80a2933:	38c0 3f38 ffff ffff ffff c1ff c0c1 3838     .88?..........88
 80a2943:	ff7f ffff ffff ffff c1e1 38c0 7838 0000     ...........88x..
 80a2953:	0000 0000 e101 c0c1 3838 7f78 ffff ff81     ........88x.....
 80a2963:	e1ff c1e1 38c0 7838 0078 c003 0100 c1e0     .....88xx.......
 80a2973:	c0ff 3838 7878 033f ffff e0ff ff01 38c0     ..88xx?........8
 80a2983:	7838 7f00 ff83 ffff c1ff c0c1 3818 3078     8x...........8x0
 80a2993:	0078 001e e101 c1ff 00c0 7878 7878 ff7f     x.........xxxx..
 80a29a3:	e1e0 ffe0 c0c1 f83f 7878 7878 e101 e0e1     ......?.xxxx....
 80a29b3:	c101 3cc0 7878 7878 0020 e101 c0e1 c001     ...<xxxx .......
 80a29c3:	7d3d 78f8 2078 0100 e1e1 ffe1 3fc0 f8ff     =}.xx .......?..
 80a29d3:	7878 0078 e1e1 e1e1 c0ff 0000 7878 7f78     xxx.........xxx.
 80a29e3:	e1ff c1e0 c1e1 18c0 7830 7878 0000 e001     ........0xxx....
 80a29f3:	e101 c0c1 3838 7878 ff7f ffff ffe1 c1e1     ....88xx........
 80a2a03:	38c0 f83f 3f78 ffff c1ff e0e1 0000 3f38     .8?.x?........8?
 80a2a13:	78f8 0000 c003 e101 c0e0 3800 3838 ff7f     .x.........888..
 80a2a23:	83ff ffff e1e1 00c0 3838 0000 0000 0000     ........88......
 80a2a33:	0100 c1ff 38c0 0038 ff3f ffff ffff ffff     .....88.?.......
 80a2a43:	c0c1 3838 3f00 ffff ffff ffff c1c1 38c0     ..88.?.........8
 80a2a53:	003c 0000 0000 0000 0300 c0e3 3f38 ffff     <...........8?..
 80a2a63:	ffff 3ff8 ffff ffff 3cc0 0000 0000 0000     ...?.....<......
 80a2a73:	0000 0000 c001 ff3f ffff ffff ffff ffff     ......?.........
 80a2a83:	ffff 07c0 ffff ffff ffff ffff ffff 00fe     ................

080a2a93 <_ZL13bitmap_kykacd>:
	...
 80a2acb:	0300 00f0 0000 0000 0000 0000 0000 ff3f     ..............?.
 80a2adb:	0080 0000 0000 0000 0000 ff07 fcff 0000     ................
 80a2aeb:	0000 0000 0000 ff00 ffff e0ff 0000 0000     ................
 80a2afb:	0000 0f00 ffff ffff 00fe 0000 0000 0100     ................
 80a2b0b:	ffff ffff ffff 00f0 0000 0000 ff3f ffff     ............?...
 80a2b1b:	ffff ffff 0000 0000 ff03 3f80 ffff 0080     ...........?....
 80a2b2b:	1800 0000 1f00 80ff ff3f 80ff 0000 801f     ........?.......
 80a2b3b:	0000 ff1f 3f80 00f0 00f0 ff01 0080 1f00     .....?..........
 80a2b4b:	80ff 003f 1f00 1fc0 80ff 0000 ff1f 3e80     ..?............>
 80a2b5b:	f000 c007 ff3f 0080 1f00 80ff 033c 03f8     ....?.......<...
 80a2b6b:	3fc0 80ff 0000 ff1f 3c80 f803 c003 ff3f     .?.......<....?.
 80a2b7b:	0080 1f00 80ff 013c 07f0 3fc0 80ff 0000     ......<....?....
 80a2b8b:	ff1f 3e80 0000 c00f ff3f 0080 0300 80ff     ...>....?.......
 80a2b9b:	c03f 7f00 3fc0 00fc 0000 3f00 ffff ffff     ?....?.....?....
 80a2bab:	ffff c0ff 0000 0000 ff01 ffff ffff f8ff     ................
 80a2bbb:	0000 0000 0000 ff0f ffff ffff 0000 0000     ................
 80a2bcb:	0000 0000 ffff ffff 00f0 0000 0000 0000     ................
 80a2bdb:	0700 ffff 00fe 0000 0000 0000 0000 3f00     ...............?
 80a2beb:	c0ff 0000 0000 0000 0000 0000 fc03 0000     ................
	...

080a2c33 <_ZL13bitmap_y2b118>:
	...
 80a2c3f:	0000 ff3f ffff ffff ffff ffff 00c0 7f00     ..?.............
 80a2c4f:	ffff ffff ffff ffff e0ff 0000 0078 0000     ............x...
 80a2c5f:	0000 0000 0100 00e0 7800 0000 0000 0000     .........x......
 80a2c6f:	0000 e001 0000 0078 0000 0000 0000 0100     ......x.........
 80a2c7f:	00e0 7800 0000 0000 0000 0000 e001 0000     ...x............
 80a2c8f:	0078 ff0f ffff f0ff 0100 00e0 7800 1e00     x............x..
 80a2c9f:	0000 0000 0000 e001 0000 0078 001e 0000     ..........x.....
 80a2caf:	0000 0100 00e0 0000 1e00 0f00 ffff f8ff     ................
 80a2cbf:	e001 0000 0000 001e ff07 ffff 01f8 00e0     ................
 80a2ccf:	0000 1e00 0000 0000 7800 e001 0000 0000     .........x......
 80a2cdf:	001e 0000 0000 0178 00e0 7800 1f00 f0ff     ......x....x....
 80a2cef:	8007 7800 e001 0000 0078 ff1f 07f0 0080     ...x....x.......
 80a2cff:	0178 00e0 7800 1e00 0000 8007 3800 e001     x....x.......8..
 80a2d0f:	0000 0078 001e 0700 3880 0100 00e0 7800     ..x......8.....x
 80a2d1f:	1e00 0000 8007 003c e001 0000 0078 001e     ......<.....x...
 80a2d2f:	0700 3f80 ffff 00e0 7800 1e00 0000 8007     ...?.....x......
 80a2d3f:	003c 0000 0000 fe7f 011e ffff 3880 0000     <............8..
 80a2d4f:	0000 7f00 1efe c003 80e7 0038 0000 0000     ..........8.....
 80a2d5f:	0078 031e 07c0 3880 0000 0000 7800 1e00     x......8.....x..
 80a2d6f:	c003 8007 0038 e001 0000 0078 031e 07c0     ....8.....x.....
 80a2d7f:	3880 0100 00e0 7800 1e00 8001 8007 0000     .8.....x........
 80a2d8f:	e001 0000 0078 001e 0700 0080 0100 00e0     ....x...........
 80a2d9f:	7800 1e00 0000 8007 0000 e001 0000 ff7f     .x..............
 80a2daf:	ffff ffff ffff ffff 00e0 3f00 ffff ffff     ...........?....
 80a2dbf:	ffff ffff c0ff 0000 0000 0000 0000 0000     ................
 80a2dcf:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
 80a2ddf:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
 80a2def:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
 80a2dff:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
 80a2e0f:	4f4d 4544 7525 003e                         MODE%u>.

080a2e17 <_ZL4font>:
 80a2e17:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a2e27:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a2e37:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a2e47:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a2e57:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a2e67:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a2e77:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a2e87:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a2e97:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a2ea7:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a2eb7:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a2ec7:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a2ed7:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a2ee7:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a2ef7:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a2f07:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a2f17:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a2f27:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a2f37:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a2f47:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a2f57:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a2f67:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a2f77:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a2f87:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a2f97:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a2fa7:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a2fb7:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a2fc7:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a2fd7:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a2fe7:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a2ff7:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a3007:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a3017:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a3027:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a3037:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a3047:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a3057:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a3067:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a3077:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a3087:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a3097:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a30a7:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 80a30b7:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a30c7:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a30d7:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 80a30e7:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a30f7:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 80a3107:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 80a3117:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 80a3127:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a3137:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a3147:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a3157:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a3167:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a3177:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a3187:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 80a3197:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 80a31a7:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 80a31b7:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 80a31c7:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 80a31d7:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 80a31e7:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 80a31f7:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 80a3207:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 80a3217:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 80a3227:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 80a3237:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 80a3247:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 80a3257:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 80a3267:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 80a3277:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 80a3287:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 80a3297:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 80a32a7:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 80a32b7:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 80a32c7:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 80a32d7:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 80a32e7:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 80a32f7:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 80a3307:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

080a3318 <_ZTV12Adafruit_GFX>:
	...
 80a3328:	0a0d 080a 1c21 080a 00a1 080a 0441 080a     ....!.......A...
 80a3338:	0443 080a 0473 080a 044f 080a 0461 080a     C...s...O...a...
 80a3348:	0385 080a 0441 080a 0669 080a 05e5 080a     ....A...i.......
 80a3358:	048b 080a 04c9 080a 0503 080a 0549 080a     ............I...
 80a3368:	05e7 080a 0565 080a                         ....e...

080a3370 <_ZTV16OledWingAdafruit>:
	...
 80a3378:	0b1d 080a 0b3d 080a 0a0d 080a 1c21 080a     ....=.......!...
 80a3388:	0d4d 080a 0441 080a 0443 080a 0473 080a     M...A...C...s...
 80a3398:	044f 080a 0461 080a 0385 080a 0441 080a     O...a.......A...
 80a33a8:	0669 080a 0f17 080a 14af 080a 1461 080a     i...........a...
 80a33b8:	0503 080a 0549 080a 05e7 080a 0565 080a     ....I.......e...

080a33c8 <_ZTVN8particle11SPISettingsE>:
	...
 80a33d0:	0331 080a 02f5 080a 02f7 080a               1...........

080a33dc <_ZL12splash1_data>:
 80a33dc:	0000 0000 0100 0080 0000 0000 0000 0000     ................
 80a33ec:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
 80a33fc:	0000 0000 0000 c007 0000 0000 0000 0000     ................
 80a340c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
 80a341c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
 80a342c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
 80a3444:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
 80a3454:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
 80a3464:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
 80a3474:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
 80a3484:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
 80a3494:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
 80a34a4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
 80a34b4:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
 80a34c4:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
 80a34d4:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
 80a34e4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
 80a34f4:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
 80a3504:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
 80a3514:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
 80a3524:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
 80a3534:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
 80a3544:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
 80a3554:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
 80a356c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
 80a3584:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
 80a3594:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
 80a35a4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
 80a35b4:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
 80a35c4:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
 80a35d4:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
 80a35e4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
 80a35f4:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
 80a3604:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
 80a3614:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
 80a3624:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
 80a3634:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
 80a3644:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
 80a3654:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
 80a3664:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
 80a3674:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
 80a3684:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
 80a3694:	fdff 5b6b 6adb c0fd                         ..k[.j..

080a369c <_ZL12splash2_data>:
 80a369c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
 80a36ac:	e000 0000 0000 0000 0000 0000 0000 0100     ................
 80a36bc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
 80a36d8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
 80a36e8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
 80a36f8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
 80a3708:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
 80a3718:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
 80a3728:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
 80a3738:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
 80a3748:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
 80a3758:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
 80a3768:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
 80a3778:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
 80a3788:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
 80a3798:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
 80a37a8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
 80a37b8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
 80a37c8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
 80a37d8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
 80a37e8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
 80a37f8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
 80a3808:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
 80a3818:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
 80a3830:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
 80a3840:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
 80a3850:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
 80a3860:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
 80a3870:	7f00 ffff feff adb5 b5ed e07e               ..........~.

080a387c <_ZTV16Adafruit_SSD1306>:
	...
 80a3884:	0d21 080a 0d39 080a 0a0d 080a 1c21 080a     !...9.......!...
 80a3894:	0d4d 080a 0441 080a 0443 080a 0473 080a     M...A...C...s...
 80a38a4:	044f 080a 0461 080a 0385 080a 0441 080a     O...a.......A...
 80a38b4:	0669 080a 0f17 080a 14af 080a 1461 080a     i...........a...
 80a38c4:	0503 080a 0549 080a 05e7 080a 0565 080a     ....I.......e...

080a38d4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
 80a38d4:	8000 e0c0 f8f0 fefc                         ........

080a38dc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
 80a38dc:	0100 0703 1f0f 7f3f                         ......?.

080a38e4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
 80a38e4:	d5ae a880                                   ....

080a38e8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
 80a38e8:	00d3 8d40                                   ..@.

080a38ec <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
 80a38ec:	0020 c8a1                                    ...

080a38f0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
 80a38f0:	40db a6a4 af2e                              .@....

080a38f6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
 80a38f6:	02da 8f81                                   ....

080a38fa <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
 80a38fa:	12da                                         ...

080a38fd <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
 80a38fd:	02da                                         ...

080a3900 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
 80a3900:	0022 21ff                                    "..!.

080a3905 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a3905:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
 80a3915:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a3925:	7361 7463 6d69 0065 0000                     asctime....

080a3930 <_ZTV9IPAddress>:
	...
 80a3938:	1f11 080a 1f01 080a 1f03 080a               ............

080a3944 <_ZTV9USBSerial>:
	...
 80a394c:	1fcd 080a 2033 080a 200b 080a 1c21 080a     ....3 ... ..!...
 80a395c:	1ffd 080a 1fcf 080a 1fdf 080a 202d 080a     ............- ..
 80a396c:	1fef 080a 1fc9 080a                         ........

080a3974 <_ZTV11USARTSerial>:
	...
 80a397c:	2169 080a 21d1 080a 21ad 080a 1c21 080a     i!...!...!..!...
 80a398c:	217d 080a 2199 080a 218b 080a 21a7 080a     }!...!...!...!..
 80a399c:	216b 080a 216f 080a                         k!..o!..

080a39a4 <_ZTV7TwoWire>:
	...
 80a39ac:	225d 080a 22a7 080a 227f 080a 225f 080a     ]"..."...".._"..
 80a39bc:	2287 080a 228f 080a 2297 080a 229f 080a     ."..."..."..."..

080a39cc <_ZTVN5spark9WiFiClassE>:
	...
 80a39d4:	239f 080a 2395 080a 238b 080a 2309 080a     .#...#...#...#..
 80a39e4:	1d43 080a 237f 080a 23fd 080a 2405 080a     C....#...#...$..
 80a39f4:	2373 080a 236b 080a 2361 080a 2357 080a     s#..k#..a#..W#..
 80a3a04:	2313 080a                                   .#..

080a3a08 <_ZTVN5spark12NetworkClassE>:
	...
 80a3a10:	23bd 080a 23c7 080a 23d1 080a 23db 080a     .#...#...#...#..
 80a3a20:	23e5 080a 23f1 080a 23fd 080a 2405 080a     .#...#...#...$..
 80a3a30:	240d 080a 2419 080a 2421 080a 242b 080a     .$...$..!$..+$..
 80a3a40:	2435 080a                                   5$..

080a3a44 <_ZSt7nothrow>:
	...

080a3a45 <link_const_variable_data_end>:
 80a3a45:	00          	.byte	0x00
	...

080a3a48 <link_constructors_location>:
 80a3a48:	080a0131 	.word	0x080a0131
 80a3a4c:	080a1be5 	.word	0x080a1be5
 80a3a50:	080a1d51 	.word	0x080a1d51
 80a3a54:	080a1d61 	.word	0x080a1d61
 80a3a58:	080a1d99 	.word	0x080a1d99
 80a3a5c:	080a23a9 	.word	0x080a23a9
 80a3a60:	080a2485 	.word	0x080a2485
 80a3a64:	080a25a1 	.word	0x080a25a1

080a3a68 <link_constructors_end>:
	...
